fit<-aov(live~group+batch,data=dat)
summary(fit)
TukeyHSD(fit)
plot(fit)
library(ggplot2)
ggplot(data=dat)+geom_point(aes(x=group))
ggplot(data=dat)+geom_point(aes(x=group,y=live))
ggplot(data=dat)+geom_boxplot(aes(x=group,y=live))
ggplot(data=dat,aes(x=group,y=live))+geom_boxplot(aes(shape=batch))
ggplot(data=dat,aes(x=group,y=live))+geom_point(aes(shape=factor(batch)))
ggplot(data=dat,aes(x=group,y=live))+geom_boxplot()+geom_point(aes(shape=factor(batch)))
ggplot(data=dat,aes(x=group,y=live))+geom_boxplot()+geom_point(aes(shape=factor(batch),colour=factor(batch)))
spread(dat,group,live)
spread(dat,group,live,-batch)
spread(dat,live,group)
dat
ggplot(data=dat,aes(x=group,y=live))+geom_boxplot()+geom_point(aes(shape=factor(batch),colour=factor(batch)))
p<-ggplot(data=dat,aes(x=group,y=live))+geom_boxplot()+geom_point(aes(shape=factor(batch),colour=factor(batch)))
p
ggsave('Dropbox/Bioinformatics story/Figure 4/2018-10-10_both-batches.pdf')
q()
library(ggplot2)
faithfuld
ggplot(faithfuld,aes(waiting,eruptions))+geom_raster(aes(fill=density))
ggplot(faithfuld,aes(waiting,eruptions))+geom_raster(aes(fill=density))q()
q()
library(dplyr)#
library(dbplyr)#
library(tidyr)#
library(ggplot2)#
library(RColorBrewer)#
library(readr)#
library(stringr)#
library(DT)#
library(shiny)#
library(shinythemes)#
library(shinyjs)
source('~/Desktop/shiny-server/receptoR_final/functions.R')
load('~/Documents/Retina/CNIB_TuckMacPhee/Bioinformatics/2018-04-13_app_data.rda')
load('~/Documents/Retina/CNIB_TuckMacPhee/Bioinformatics/genelists.rda')
server<-function(input, output, session) {#
    ## load up the groups (this information should be saved, but isn't)#
    groups<-c("photoreceptors","RPE","whole.retina")#
# Load genes tab ------------------------------------------------------------------------------#
#
  geneList = reactive({#
    if (is.null(input$genelist) && is.null(input$gene)) {#
      return(NULL)#
    }#
    genes = c()#
#
    if (!is.null(input$genelist)) {#
      for (gene in input$genelist) {#
        genes = c(genes, gene_lists[[gene]])#
      }#
    }#
#
    if (!is.null(input$gene)) {#
      genes = c(genes, input$gene)  #
    }#
    return(unname(genes))#
  })#
  # gene list UI#
  output$geneListsUI = renderUI({#
    checkboxGroupInput("genelist", "Select a gene list", #
          choices = names(gene_lists))#
  })#
  # single gene UI#
  output$geneUI = renderUI({#
    selectInput("gene", "Select gene(s) to show", choices = all_genes, multiple = TRUE)#
  })#
 summary_gene_data = reactive({#
   validate(#
      need(geneList(), "No genes selected")#
    )#
   get_expression_summary(eset, geneList())#
 })#
  output$genes = DT::renderDataTable({#
    validate(#
      need(geneList(), "No genes selected")#
    )#
     summary_gene_data() %>% datatable() %>% #
      formatRound(2:4)#
  })#
  # single gene plot#
 output$singleGenePlot = renderPlot({#
  # output$singleGenePlot = renderTable({#
    validate(#
      need(input$genes_rows_selected >= 1, "No genes selected")#
    )#
    rows = as.integer(input$genes_rows_selected)#
    genes_to_plot = summary_gene_data()$Symbol[rows]#
    gene_data = get_gene_data(eset, genes_to_plot)#
    by_gene_boxplot(gene_data,tissues=c("photoreceptors","RPE","whole.retina"))#
  })#
#
  # DE choices UI#
  output$de_choices = renderUI({#
    checkboxGroupInput("de", "Choose comparison(s) to show", choices = de_choices, selected = de_choices[1])#
  })#
#
# Expression tab ------------------------------------------------------------------------------#
  observe({#
    toggle("de_choices", anim = TRUE, condition = input$de_state )#
  })#
  genesToPlot = reactive({#
    validate(#
      need(geneList(), "No genes selected")#
    )#
#
    genes = geneList()#
    if(input$de_state) {#
      selected_de = input$de#
      de_lists = lapply(selected_de, function(x) { as.character(get_de_genes(genes, x, sig_genes_lfc)$Symbol) })#
      genes = Reduce(union, de_lists)#
    } #
    return(genes) #
  }) #
# heatmap plot --------------------------------------------------------------------------------#
  output$expressionPlot = renderPlot({#
    validate(#
      need(genesToPlot(), "No genes selected"),#
      need(input$tissues, "No tissues selected")#
    )#
    selected_tissues = input$tissues#
    sub_eset = eset[, eset$tissue %in% selected_tissues]#
    genes = gene2probe(genesToPlot(), mapped_probes)#
    gene_heatmap(sub_eset, genes, scale = "row",#
                  probe_level = input$hm_probes,#
                  gsm_show = input$hm_gsm,#
                  show_rownames = input$hm_rownames,#
                  cluster_rows = input$hm_row_cluster,#
                  cluster_cols = input$hm_col_cluster,#
                  border_color = NA)#
  })#
  output$heatmap_ui = renderUI({#
    plotOutput("expressionPlot", height = input$hm_height, width = input$hm_width)#
  })#
#
# Overall expression --------------------------------------------------------------------------#
#
  output$overallPlot = renderPlot({#
    validate(#
      need(genesToPlot(), "No genes selected"),#
      need(input$tissues, "No tissues selected")#
    )#
    gene_data = get_gene_data(eset, genesToPlot())#
    overall_expression_boxplot(gene_data, tissues = input$tissues)#
  })#
# By gene boxplots ----------------------------------------------------------------------------#
#
  output$byGenePlot = renderPlot({#
    validate(#
      need(genesToPlot(), "No genes selected"),#
      need(input$tissues, "No tissues selected")#
    )#
    gene_data = get_gene_data(eset, genesToPlot())#
    by_gene_boxplot(gene_data, tissues = input$tissues)#
  })#
  plsdaData = reactive({#
    selected_tissues = input$pls_tissues#
    if(length(selected_tissues) < 2) {#
      return(NULL)#
    }#
    sub_eset = eset[, eset$tissue %in% selected_tissues]#
    genes = gene2probe(geneList(), mapped_probes)#
    probe = input$pls_probe#
    #ncomp = input$pls_ncomp#
    get_plsda(sub_eset, genes, probe) #
  })#
#
# PCA plot ----------------------------------------------------------------------------#
  output$indPlot = renderPlot({#
    validate(#
      need(plsdaData(), "No PLS-DA to plot"),#
      need(length(input$pls_tissues) >= 2, "Please select at least two tissues")#
    )#
    plotIndiv(plsdaData()$result, ind.names = FALSE, group = plsdaData()$tissue_grps, pch = 16, #
              col.per.group = brewer.pal(3, "Set1")[1:length(input$pls_tissues)], legend = TRUE, cex = 2, ellipse=TRUE)#
  })#
#
# Correlation Circle plot ----------------------------------------------------------------------------  #
  output$varPlot = renderPlot({#
     validate(#
      need(plsdaData(), "No PLS-DA to plot")#
    )#
#
    plotVar(plsdaData()$result, var.names = list(plsdaData()$varNames), cex = 3,overlap=FALSE)#
  })#
#
  output$numGenesUI = renderUI({#
    numericInput("pls_num_genes", "Select number of genes to show contributions for", #
                 value = 10, min = 1, max = length(geneList()), step = 1)#
  })#
# Loadings plot ----------------------------------------------------------------------------#
  output$contribPlot = renderPlot({#
    validate(#
      need(plsdaData(), "No PLS-DA to plot"),#
      need(input$pls_num_genes, "")#
    )#
    grps = plsdaData()$result$names$Y#
    cols = brewer.pal(3, "Set1")[1:length(grps)]#
    ndisplay = input$pls_num_genes#
    comp = as.integer(input$pls_ncomp)#
    plotLoadings(plsdaData()$result, name.var = plsdaData()$varNames, ndisplay = ndisplay,#
                comp = comp, legend.color = c(1:2))#
  })#
  # contribData = reactive({#
  ##
  #   ndisplay = input$pls_num_genes#
  #   comp = as.integer(input$pls_ncomp)#
  #   contrib = plotLoadings(plsdaData()$result, name.var = plsdaData()$varNames, ndisplay = ndisplay,#
  #               comp = comp, plot = TRUE)#
  ##
  #   contrib$contrib %>% dplyr::select(-Contrib) %>% add_rownames("Gene") %>%#
  #     mutate(Gene = getSYMBOL(Gene, "mouse4302.db"))#
  # })#
  # output$contribTable = renderDataTable({#
#     validate(#
#       need(contribData(), "No data")#
#     )#
#      contribData()#
#   })#
  # output$pls_download = downloadHandler(#
#     filename = 'gene_contribution_data.csv',#
#     content = function(file) {#
#       write_csv(contribData(), file)#
#     }#
##
#   )#
    session$onSessionEnded(stopApp)#
}
## receptoRA ui.R#
#
ui<-tagList(#
    shinyjs::useShinyjs(),#
  navbarPage("receptoR expression Analysis",#
    theme = "sandstone.css",#
  # Load Genes ----------------------------------------------------------------------------------  #
    tabPanel("Load Genes",#
      sidebarLayout(#
        sidebarPanel(#
          uiOutput("geneListsUI"),#
          br(),#
          uiOutput("geneUI")#
        ),#
        mainPanel(#
          fluidRow(#
            column(6,#
              h4("Average Expression"),#
              DT::dataTableOutput("genes")),#
            column(6,#
              h4("Gene Boxplot"),#
              plotOutput("singleGenePlot"))#
          )#
        )#
      )#
    ),#
  # Expression tab ------------------------------------------------------------------------------#
    tabPanel("Expression plots", #
      sidebarLayout(#
        sidebarPanel(#
          checkboxGroupInput("tissues", label = "Select tissues to include",#
              choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")),#
          br(),#
          checkboxInput("de_state", label = "Show differential expressed only", value = FALSE),#
          uiOutput("de_choices"),#
          br(),#
          h3("Heatmap parameters"),#
          checkboxInput("hm_probes", "Show probe-level", value = FALSE),#
          checkboxInput("hm_gsm", "Show GSM (column names)", value = TRUE),#
          checkboxInput("hm_rownames", "Show rownames", value = TRUE),#
          checkboxInput("hm_col_cluster", "Cluster columns", value = TRUE),#
          checkboxInput("hm_row_cluster", "Cluster rows", value = TRUE),#
          h4("Select plot dimensions (px)"),#
          numericInput("hm_width", "Width", value = 900, min = 100, max = 2400, step = 10),#
          numericInput("hm_height", "Height", value = 1200, min = 100, max = 2400, step = 10)#
        ),#
        mainPanel(#
          tabsetPanel(type = "tabs",#
            tabPanel("Heatmap", uiOutput("heatmap_ui")),#
            tabPanel("Summary boxplots", plotOutput("overallPlot", height = 600)),#
            tabPanel("By-gene boxplots", plotOutput("byGenePlot", height = 600))#
          )#
        )#
      )#
    )#
#
    ,tabPanel("PLS-DA",#
      sidebarLayout(#
        sidebarPanel(#
          checkboxGroupInput("pls_tissues", label = "Select tissues to inclued",#
              choices = c("photoreceptors","RPE","whole.retina"), selected = groups),#
          checkboxInput("pls_probe", "Perform PLS-DA at probe level", value = FALSE),#
          br(),#
          h4("Gene contribution plot"),#
          uiOutput("numGenesUI"),#
          radioButtons("pls_ncomp", "Select component for gene contribution plot", choices = c(1,2)),#
          br()#
          # downloadButton("pls_download", "Download gene contribution data")#
        ),#
        mainPanel(#
          plotOutput("indPlot", height = 800),#
          plotOutput("varPlot", height = 800),#
          plotOutput("contribPlot", height = 800)#
          # DT::dataTableOutput("contribTable")#
         )#
       )#
     )#
  )#
)
jscode <- '#
$(function() {#
  var $els = $("[data-proxy-click]");#
  $.each(#
    $els,#
    function(idx, el) {#
      var $el = $(el);#
      var $proxy = $("#" + $el.data("proxyClick"));#
      $el.keydown(function (e) {#
        if (e.keyCode == 13) {#
          $proxy.click();#
        }#
      });#
    }#
  );#
});#
'#
## UI#
ui <- fluidPage(#
tags$head(tags$script(HTML(jscode))),#
# tags$script(HTML("$('body').addClass('fixed);")),#
shinyjs::useShinyjs(),#
navbarPage("receptoR",#
    theme = "sandstone.css",#
#
    tabPanel("Search for datasets",#
        # Search for GSE  ------------------------------------------------------------------------------              #
        sidebarLayout(#
        sidebarPanel(#
        # Search for datasets ------------------------------------------------------#
        h4("Search for GEO data series (GSE)"),#
        radioButtons("gplSelection", "Choose species:", choices = c("Mouse (GPL1261)" = "mouse", "Human (GPL570)" = "human")),#
        tagAppendAttributes(#
        textInput("Key", "Enter search terms, separated by commas", value = ""),#
        `data-proxy-click` = "Search"#
        ),#
        actionButton("Search", "Search"),#
        hr(),#
        # Define categories --------------------------------------------------------#
        h4("Define the categories that you wish to assign each sample (GSM) for comparison."),#
        textInput("cat1", "Define Category 1"),#
        textInput("cat2", "Define Category 2"),#
        textInput("cat3", "Define Category 3")#
        ),#
        mainPanel(#
            tabsetPanel(#
            tabPanel("Select GEO data series (GSE)",  #search GSE, and select which to include#
                h4("2. Highlight the desired search results (GSE) and click 'Retrieve GSM' to proceed"),#
                actionButton("getGSM", "Retrieve GSM"),#
                helpText("Do not click 'finish' until all selections have been made. This button removes the unselected rows and generates a new table on the next page."),#
                DT::dataTableOutput("filteredgse")#
            ),#
            # Assign samples to categories ------------------------------------------------------#
            tabPanel("Assign samples (GSM) to categories", #
                h4("4. Highlight the desired search results and click 'assign' to assign them to the specificed category"),#
                uiOutput("categorySelect"),#
                actionButton("Assign", "Assign Categories"),#
                actionButton("Remove", "Finalize selections and remove not included"),#
                # ^ why aren't these two the same button?#
                helpText("Do not click 'finish' until all selections have been made. This button removes the unselected rows and generates a new table on the next page."),#
                DT::dataTableOutput("gsm_table")#
            ),#
            # This will be where the CEL files are downloaded (confirmation, etc) ------------#
            tabPanel("Selection details", uiOutput("page4"), #
                DT::dataTableOutput("finishedtable"),#
                actionButton("downloadCEL","Download CEL files"),#
                tableOutput("CELdl")#
            )#
            )#
        )#
        )#
    ),#
#
    # Load Genes tab -------------------------------------#
    tabPanel("Load data",#
        sidebarLayout(#
        sidebarPanel(#
            selectInput(inputId="user_data",label="Select user data for analysis",choices=c("none"="none","Photoreceptors v RPE"="2018-04-13_app_data.rda"),selected="2018-04-13_app_data.rda"),#
            br(),#
            uiOutput("geneListsUI"),#
            br(),#
            uiOutput("geneUI")#
        ),#
        mainPanel(#
            fluidRow(#
                column(6, h4("Average Expression"), DT::dataTableOutput("genes")),#
                column(6, h4("Gene Boxplot"), plotOutput("singleGenePlot"))#
            )#
        )#
        )#
    ),#
    # Expression tab ------------------------------------------------------------------------------#
#
    tabPanel("Expression plots", #
        sidebarLayout(#
        sidebarPanel(#
            checkboxGroupInput("tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            br(),#
            checkboxInput("de_state", label = "Show differential expressed only", value = FALSE),#
            uiOutput("de_choices"),#
            br(),#
            h3("Heatmap parameters"),#
            checkboxInput("hm_probes", "Show probe-level", value = FALSE),#
            checkboxInput("hm_gsm", "Show GSM (column names)", value = TRUE),#
            checkboxInput("hm_rownames", "Show rownames", value = TRUE),#
            checkboxInput("hm_col_cluster", "Cluster columns", value = TRUE),#
            checkboxInput("hm_row_cluster", "Cluster rows", value = TRUE),#
            h4("Select plot dimensions (px)"),#
            numericInput("hm_width", "Width", value = 900, min = 100, max = 2400, step = 10),#
            numericInput("hm_height", "Height", value = 1200, min = 100, max = 2400, step = 10)#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("Heatmap", uiOutput("heatmap_ui")),#
            tabPanel("Summary boxplots", plotOutput("overallPlot", height = 600)),#
            tabPanel("By-gene boxplots", plotOutput("byGenePlot", height = 600))#
        )#
        )#
        )#
    ),#
#
    # Mixomics tab ---------------------------------------------#
    tabPanel("PLS-DA",#
        sidebarLayout(#
        sidebarPanel(#
            checkboxGroupInput("pls_tissues", label = "Select tissues to inclued",#
            choices = groups, selected = groups),#
            checkboxInput("pls_probe", "Perform PLS-DA at probe level", value = FALSE),#
            br(),#
            h4("Gene contribution plot"),#
            uiOutput("numGenesUI"),#
            radioButtons("pls_ncomp", "Select component for gene contribution plot", choices = c(1,2)),#
            br()#
            # downloadButton("pls_download", "Download gene contribution data")#
        ),#
        mainPanel(#
            plotOutput("indPlot", height = 800),#
            plotOutput("varPlot", height = 800),#
            plotOutput("contribPlot", height = 800)#
            # DT::dataTableOutput("contribTable")#
        )#
        )#
    )#
)#
)
groups
tissues
ui<-tagList(#
    shinyjs::useShinyjs(),#
  navbarPage("receptoR expression Analysis",#
    theme = "sandstone.css",#
  # Load Genes ----------------------------------------------------------------------------------  #
    tabPanel("Load Genes",#
      sidebarLayout(#
        sidebarPanel(#
          uiOutput("geneListsUI"),#
          br(),#
          uiOutput("geneUI")#
        ),#
        mainPanel(#
          fluidRow(#
            column(6,#
              h4("Average Expression"),#
              DT::dataTableOutput("genes")),#
            column(6,#
              h4("Gene Boxplot"),#
              plotOutput("singleGenePlot"))#
          )#
        )#
      )#
    ),#
  # Expression tab ------------------------------------------------------------------------------#
    tabPanel("Expression plots", #
      sidebarLayout(#
        sidebarPanel(#
          checkboxGroupInput("tissues", label = "Select tissues to include",#
              choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE")),#
          br(),#
          checkboxInput("de_state", label = "Show differential expressed only", value = FALSE),#
          uiOutput("de_choices"),#
          br(),#
          h3("Heatmap parameters"),#
          checkboxInput("hm_probes", "Show probe-level", value = FALSE),#
          checkboxInput("hm_gsm", "Show GSM (column names)", value = TRUE),#
          checkboxInput("hm_rownames", "Show rownames", value = TRUE),#
          checkboxInput("hm_col_cluster", "Cluster columns", value = TRUE),#
          checkboxInput("hm_row_cluster", "Cluster rows", value = TRUE),#
          h4("Select plot dimensions (px)"),#
          numericInput("hm_width", "Width", value = 900, min = 100, max = 2400, step = 10),#
          numericInput("hm_height", "Height", value = 1200, min = 100, max = 2400, step = 10)#
        ),#
        mainPanel(#
          tabsetPanel(type = "tabs",#
            tabPanel("Heatmap", uiOutput("heatmap_ui")),#
            tabPanel("Summary boxplots", plotOutput("overallPlot", height = 600)),#
            tabPanel("By-gene boxplots", plotOutput("byGenePlot", height = 600))#
          )#
        )#
      )#
    )#
#
    # ,tabPanel("PLS-DA",#
    #   sidebarLayout(#
    #     sidebarPanel(#
    #       checkboxGroupInput("pls_tissues", label = "Select tissues to inclued",#
    #           choices = c("photoreceptors","RPE","whole.retina"), selected = groups),#
    #       checkboxInput("pls_probe", "Perform PLS-DA at probe level", value = FALSE),#
    #       br(),#
    #       h4("Gene contribution plot"),#
    #       uiOutput("numGenesUI"),#
    #       radioButtons("pls_ncomp", "Select component for gene contribution plot", choices = c(1,2)),#
    #       br()#
    #       # downloadButton("pls_download", "Download gene contribution data")#
    #     ),#
    #     mainPanel(#
    #       plotOutput("indPlot", height = 800),#
    #       plotOutput("varPlot", height = 800),#
    #       plotOutput("contribPlot", height = 800)#
    #       # DT::dataTableOutput("contribTable")#
         )#
       )#
     )#
  )#
)
## receptoRA ui.R#
#
ui<-tagList(#
    shinyjs::useShinyjs(),#
  navbarPage("receptoR expression Analysis",#
    theme = "sandstone.css",#
  # Load Genes ----------------------------------------------------------------------------------  #
    tabPanel("Load Genes",#
      sidebarLayout(#
        sidebarPanel(#
          uiOutput("geneListsUI"),#
          br(),#
          uiOutput("geneUI")#
        ),#
        mainPanel(#
          fluidRow(#
            column(6,#
              h4("Average Expression"),#
              DT::dataTableOutput("genes")),#
            column(6,#
              h4("Gene Boxplot"),#
              plotOutput("singleGenePlot"))#
          )#
        )#
      )#
    ),#
  # Expression tab ------------------------------------------------------------------------------#
    tabPanel("Expression plots", #
      sidebarLayout(#
        sidebarPanel(#
          checkboxGroupInput("tissues", label = "Select tissues to include",#
              choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE")),#
          br(),#
          checkboxInput("de_state", label = "Show differential expressed only", value = FALSE),#
          uiOutput("de_choices"),#
          br(),#
          h3("Heatmap parameters"),#
          checkboxInput("hm_probes", "Show probe-level", value = FALSE),#
          checkboxInput("hm_gsm", "Show GSM (column names)", value = TRUE),#
          checkboxInput("hm_rownames", "Show rownames", value = TRUE),#
          checkboxInput("hm_col_cluster", "Cluster columns", value = TRUE),#
          checkboxInput("hm_row_cluster", "Cluster rows", value = TRUE),#
          h4("Select plot dimensions (px)"),#
          numericInput("hm_width", "Width", value = 900, min = 100, max = 2400, step = 10),#
          numericInput("hm_height", "Height", value = 1200, min = 100, max = 2400, step = 10)#
        ),#
        mainPanel(#
          tabsetPanel(type = "tabs",#
            tabPanel("Heatmap", uiOutput("heatmap_ui")),#
            tabPanel("Summary boxplots", plotOutput("overallPlot", height = 600)),#
            tabPanel("By-gene boxplots", plotOutput("byGenePlot", height = 600))#
          )#
        )#
      )#
    )#
#
    # ,tabPanel("PLS-DA",#
    #   sidebarLayout(#
    #     sidebarPanel(#
    #       checkboxGroupInput("pls_tissues", label = "Select tissues to inclued",#
    #           choices = c("photoreceptors","RPE","whole.retina"), selected = groups),#
    #       checkboxInput("pls_probe", "Perform PLS-DA at probe level", value = FALSE),#
    #       br(),#
    #       h4("Gene contribution plot"),#
    #       uiOutput("numGenesUI"),#
    #       radioButtons("pls_ncomp", "Select component for gene contribution plot", choices = c(1,2)),#
    #       br()#
    #       # downloadButton("pls_download", "Download gene contribution data")#
    #     ),#
    #     mainPanel(#
    #       plotOutput("indPlot", height = 800),#
    #       plotOutput("varPlot", height = 800),#
    #       plotOutput("contribPlot", height = 800)#
    #       # DT::dataTableOutput("contribTable")#
         # )#
       )#
     )#
  )#
)
## receptoRA ui.R#
#
ui<-tagList(#
    shinyjs::useShinyjs(),#
  navbarPage("receptoR expression Analysis",#
    theme = "sandstone.css",#
  # Load Genes ----------------------------------------------------------------------------------  #
    tabPanel("Load Genes",#
      sidebarLayout(#
        sidebarPanel(#
          uiOutput("geneListsUI"),#
          br(),#
          uiOutput("geneUI")#
        ),#
        mainPanel(#
          fluidRow(#
            column(6,#
              h4("Average Expression"),#
              DT::dataTableOutput("genes")),#
            column(6,#
              h4("Gene Boxplot"),#
              plotOutput("singleGenePlot"))#
          )#
        )#
      )#
    ),#
  # Expression tab ------------------------------------------------------------------------------#
    tabPanel("Expression plots", #
      sidebarLayout(#
        sidebarPanel(#
          checkboxGroupInput("tissues", label = "Select tissues to include",#
              choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE")),#
          br(),#
          checkboxInput("de_state", label = "Show differential expressed only", value = FALSE),#
          uiOutput("de_choices"),#
          br(),#
          h3("Heatmap parameters"),#
          checkboxInput("hm_probes", "Show probe-level", value = FALSE),#
          checkboxInput("hm_gsm", "Show GSM (column names)", value = TRUE),#
          checkboxInput("hm_rownames", "Show rownames", value = TRUE),#
          checkboxInput("hm_col_cluster", "Cluster columns", value = TRUE),#
          checkboxInput("hm_row_cluster", "Cluster rows", value = TRUE),#
          h4("Select plot dimensions (px)"),#
          numericInput("hm_width", "Width", value = 900, min = 100, max = 2400, step = 10),#
          numericInput("hm_height", "Height", value = 1200, min = 100, max = 2400, step = 10)#
        ),#
        mainPanel(#
          tabsetPanel(type = "tabs",#
            tabPanel("Heatmap", uiOutput("heatmap_ui")),#
            tabPanel("Summary boxplots", plotOutput("overallPlot", height = 600)),#
            tabPanel("By-gene boxplots", plotOutput("byGenePlot", height = 600))#
          )#
        )#
      )#
    )#
#
    # ,tabPanel("PLS-DA",#
    #   sidebarLayout(#
    #     sidebarPanel(#
    #       checkboxGroupInput("pls_tissues", label = "Select tissues to inclued",#
    #           choices = c("photoreceptors","RPE","whole.retina"), selected = groups),#
    #       checkboxInput("pls_probe", "Perform PLS-DA at probe level", value = FALSE),#
    #       br(),#
    #       h4("Gene contribution plot"),#
    #       uiOutput("numGenesUI"),#
    #       radioButtons("pls_ncomp", "Select component for gene contribution plot", choices = c(1,2)),#
    #       br()#
    #       # downloadButton("pls_download", "Download gene contribution data")#
    #     ),#
    #     mainPanel(#
    #       plotOutput("indPlot", height = 800),#
    #       plotOutput("varPlot", height = 800),#
    #       plotOutput("contribPlot", height = 800)#
    #       # DT::dataTableOutput("contribTable")#
    #      )#
    #   )#
     )#
  )#
)
## receptoRA ui.R#
#
ui<-tagList(#
    shinyjs::useShinyjs(),#
  navbarPage("receptoR expression Analysis",#
    theme = "sandstone.css",#
  # Load Genes ----------------------------------------------------------------------------------  #
    tabPanel("Load Genes",#
      sidebarLayout(#
        sidebarPanel(#
          uiOutput("geneListsUI"),#
          br(),#
          uiOutput("geneUI")#
        ),#
        mainPanel(#
          fluidRow(#
            column(6,#
              h4("Average Expression"),#
              DT::dataTableOutput("genes")),#
            column(6,#
              h4("Gene Boxplot"),#
              plotOutput("singleGenePlot"))#
          )#
        )#
      )#
    ),#
  # Expression tab ------------------------------------------------------------------------------#
    tabPanel("Expression plots", #
      sidebarLayout(#
        sidebarPanel(#
          checkboxGroupInput("tissues", label = "Select tissues to include",#
              choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE")),#
          br(),#
          checkboxInput("de_state", label = "Show differential expressed only", value = FALSE),#
          uiOutput("de_choices"),#
          br(),#
          h3("Heatmap parameters"),#
          checkboxInput("hm_probes", "Show probe-level", value = FALSE),#
          checkboxInput("hm_gsm", "Show GSM (column names)", value = TRUE),#
          checkboxInput("hm_rownames", "Show rownames", value = TRUE),#
          checkboxInput("hm_col_cluster", "Cluster columns", value = TRUE),#
          checkboxInput("hm_row_cluster", "Cluster rows", value = TRUE),#
          h4("Select plot dimensions (px)"),#
          numericInput("hm_width", "Width", value = 900, min = 100, max = 2400, step = 10),#
          numericInput("hm_height", "Height", value = 1200, min = 100, max = 2400, step = 10)#
        ),#
        mainPanel(#
          tabsetPanel(type = "tabs",#
            tabPanel("Heatmap", uiOutput("heatmap_ui")),#
            tabPanel("Summary boxplots", plotOutput("overallPlot", height = 600)),#
            tabPanel("By-gene boxplots", plotOutput("byGenePlot", height = 600))#
          )#
        )#
      )#
    )#
#
    # ,tabPanel("PLS-DA",#
    #   sidebarLayout(#
    #     sidebarPanel(#
    #       checkboxGroupInput("pls_tissues", label = "Select tissues to inclued",#
    #           choices = c("photoreceptors","RPE","whole.retina"), selected = groups),#
    #       checkboxInput("pls_probe", "Perform PLS-DA at probe level", value = FALSE),#
    #       br(),#
    #       h4("Gene contribution plot"),#
    #       uiOutput("numGenesUI"),#
    #       radioButtons("pls_ncomp", "Select component for gene contribution plot", choices = c(1,2)),#
    #       br()#
    #       # downloadButton("pls_download", "Download gene contribution data")#
    #     ),#
    #     mainPanel(#
    #       plotOutput("indPlot", height = 800),#
    #       plotOutput("varPlot", height = 800),#
    #       plotOutput("contribPlot", height = 800)#
    #       # DT::dataTableOutput("contribTable")#
    #      )#
    #   )#
    # )#
  )#
)
shinyApp(server,ui)
shinyApp(ui,server)
ui<-## receptoRA ui.R#
#
ui<-tagList(#
    shinyjs::useShinyjs(),#
  navbarPage("receptoR expression Analysis",#
    theme = "sandstone.css",#
  # Load Genes ----------------------------------------------------------------------------------  #
    tabPanel("Load Genes",#
      sidebarLayout(#
        sidebarPanel(#
          uiOutput("geneListsUI"),#
          br(),#
          uiOutput("geneUI")#
        ),#
        mainPanel(#
          fluidRow(#
            column(6,#
              h4("Average Expression"),#
              DT::dataTableOutput("genes")),#
            column(6,#
              h4("Gene Boxplot"),#
              plotOutput("singleGenePlot"))#
          )#
        )#
      )#
    ),#
  # Expression tab ------------------------------------------------------------------------------#
    tabPanel("Expression plots", #
      sidebarLayout(#
        sidebarPanel(#
          checkboxGroupInput("tissues", label = "Select tissues to include",#
              choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE")),#
          br(),#
          checkboxInput("de_state", label = "Show differential expressed only", value = FALSE),#
          uiOutput("de_choices"),#
          br(),#
          h3("Heatmap parameters"),#
          checkboxInput("hm_probes", "Show probe-level", value = FALSE),#
          checkboxInput("hm_gsm", "Show GSM (column names)", value = TRUE),#
          checkboxInput("hm_rownames", "Show rownames", value = TRUE),#
          checkboxInput("hm_col_cluster", "Cluster columns", value = TRUE),#
          checkboxInput("hm_row_cluster", "Cluster rows", value = TRUE),#
          h4("Select plot dimensions (px)"),#
          numericInput("hm_width", "Width", value = 900, min = 100, max = 2400, step = 10),#
          numericInput("hm_height", "Height", value = 1200, min = 100, max = 2400, step = 10)#
        ),#
        mainPanel(#
          tabsetPanel(type = "tabs",#
            tabPanel("Heatmap", uiOutput("heatmap_ui")),#
            tabPanel("Summary boxplots", plotOutput("overallPlot", height = 600)),#
            tabPanel("By-gene boxplots", plotOutput("byGenePlot", height = 600))#
          )#
        )#
      )#
    )#
#
    ,tabPanel("PLS-DA",#
      sidebarLayout(#
        sidebarPanel(#
          checkboxGroupInput("pls_tissues", label = "Select tissues to inclued",#
              choices = c("photoreceptors","RPE","whole.retina"), selected = groups),#
          checkboxInput("pls_probe", "Perform PLS-DA at probe level", value = FALSE),#
          br(),#
          h4("Gene contribution plot"),#
          uiOutput("numGenesUI"),#
          radioButtons("pls_ncomp", "Select component for gene contribution plot", choices = c(1,2)),#
          br()#
          # downloadButton("pls_download", "Download gene contribution data")#
        ),#
        mainPanel(#
          plotOutput("indPlot", height = 800),#
          plotOutput("varPlot", height = 800),#
          plotOutput("contribPlot", height = 800)#
          # DT::dataTableOutput("contribTable")#
         )#
      )#
    )#
  )#
)
## receptoRA ui.R#
#
ui<-tagList(#
    shinyjs::useShinyjs(),#
  navbarPage("receptoR expression Analysis",#
    theme = "sandstone.css",#
  # Load Genes ----------------------------------------------------------------------------------  #
    tabPanel("Load Genes",#
      sidebarLayout(#
        sidebarPanel(#
          uiOutput("geneListsUI"),#
          br(),#
          uiOutput("geneUI")#
        ),#
        mainPanel(#
          fluidRow(#
            column(6,#
              h4("Average Expression"),#
              DT::dataTableOutput("genes")),#
            column(6,#
              h4("Gene Boxplot"),#
              plotOutput("singleGenePlot"))#
          )#
        )#
      )#
    ),#
  # Expression tab ------------------------------------------------------------------------------#
    tabPanel("Expression plots", #
      sidebarLayout(#
        sidebarPanel(#
          checkboxGroupInput("tissues", label = "Select tissues to include",#
              choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE")),#
          br(),#
          checkboxInput("de_state", label = "Show differential expressed only", value = FALSE),#
          uiOutput("de_choices"),#
          br(),#
          h3("Heatmap parameters"),#
          checkboxInput("hm_probes", "Show probe-level", value = FALSE),#
          checkboxInput("hm_gsm", "Show GSM (column names)", value = TRUE),#
          checkboxInput("hm_rownames", "Show rownames", value = TRUE),#
          checkboxInput("hm_col_cluster", "Cluster columns", value = TRUE),#
          checkboxInput("hm_row_cluster", "Cluster rows", value = TRUE),#
          h4("Select plot dimensions (px)"),#
          numericInput("hm_width", "Width", value = 900, min = 100, max = 2400, step = 10),#
          numericInput("hm_height", "Height", value = 1200, min = 100, max = 2400, step = 10)#
        ),#
        mainPanel(#
          tabsetPanel(type = "tabs",#
            tabPanel("Heatmap", uiOutput("heatmap_ui")),#
            tabPanel("Summary boxplots", plotOutput("overallPlot", height = 600)),#
            tabPanel("By-gene boxplots", plotOutput("byGenePlot", height = 600))#
          )#
        )#
      )#
    )#
#
    ,tabPanel("PLS-DA",#
      sidebarLayout(#
        sidebarPanel(#
          checkboxGroupInput("pls_tissues", label = "Select tissues to inclued",#
              choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE")),#
          checkboxInput("pls_probe", "Perform PLS-DA at probe level", value = FALSE),#
          br(),#
          h4("Gene contribution plot"),#
          uiOutput("numGenesUI"),#
          radioButtons("pls_ncomp", "Select component for gene contribution plot", choices = c(1,2)),#
          br()#
          # downloadButton("pls_download", "Download gene contribution data")#
        ),#
        mainPanel(#
          plotOutput("indPlot", height = 800),#
          plotOutput("varPlot", height = 800),#
          plotOutput("contribPlot", height = 800)#
          # DT::dataTableOutput("contribTable")#
         )#
      )#
    )#
  )#
)
shinyApp(ui,server)
library(affy)
shinyApp(ui,server)
library(GEOmetadb)#
library(GEOquery)#
#
library(affy)#
#
library(limma)#
library(annotate)#
library(genefilter)#
library(ComplexHeatmap)#
library(pheatmap)#
library(cowplot)#
#
#biocLite(c('mixOmics','MergeMaid','GEOquery','inSilicoMerging','affy','sva','Rtsne','metaArray','testthat'))#
#
library(mixOmics)#
library(MergeMaid)#
library(testthat)#
library(metaArray)#
#library(inSilicoMerging) ## package ‘inSilicoMerging’ is not available (for R version 3.4.3) #
library(Rtsne)#
library(sva)#
#
# Microarray platform annotations:#
# Equivalent human platform is GPL570 with 127 514 samples#
# HG-U133_Plus_2] Affymetrix Human Genome U133 Plus 2.0 Array#
#
library(mouse4302.db) #
library(hgu133plus2.db)
shinyApp(ui,server)
server<-function(input, output, session) {#
    ## load up the groups (this information should be saved, but isn't)#
    groups<-c("photoreceptors","RPE","whole.retina")#
# Load genes tab ------------------------------------------------------------------------------#
#
  geneList = reactive({#
    if (is.null(input$genelist) && is.null(input$gene)) {#
      return(NULL)#
    }#
    genes = c()#
#
    if (!is.null(input$genelist)) {#
      for (gene in input$genelist) {#
        genes = c(genes, gene_lists[[gene]])#
      }#
    }#
#
    if (!is.null(input$gene)) {#
      genes = c(genes, input$gene)  #
    }#
    return(unname(genes))#
  })#
  # gene list UI#
  output$geneListsUI = renderUI({#
      withProgress(message="Loading gene expression data",value=0.5,{#
          checkboxGroupInput("genelist", "Select a gene list", #
                choices = names(gene_lists))#
      })#
#
  })#
  # single gene UI#
  output$geneUI = renderUI({#
    selectInput("gene", "Select gene(s) to show", choices = all_genes, multiple = TRUE)#
  })#
 summary_gene_data = reactive({#
   validate(#
      need(geneList(), "No genes selected")#
    )#
   get_expression_summary(eset, geneList())#
 })#
  output$genes = DT::renderDataTable({#
    validate(#
      need(geneList(), "No genes selected")#
    )#
     summary_gene_data() %>% datatable() %>% #
      formatRound(2:4)#
  })#
  # single gene plot#
 output$singleGenePlot = renderPlot({#
  # output$singleGenePlot = renderTable({#
    validate(#
      need(input$genes_rows_selected >= 1, "No genes selected")#
    )#
    rows = as.integer(input$genes_rows_selected)#
    genes_to_plot = summary_gene_data()$Symbol[rows]#
    gene_data = get_gene_data(eset, genes_to_plot)#
    by_gene_boxplot(gene_data,tissues=c("photoreceptors","RPE","whole.retina"))#
  })#
#
  # DE choices UI#
  output$de_choices = renderUI({#
    checkboxGroupInput("de", "Choose comparison(s) to show", choices = de_choices, selected = de_choices[1])#
  })#
#
# Expression tab ------------------------------------------------------------------------------#
  observe({#
    toggle("de_choices", anim = TRUE, condition = input$de_state )#
  })#
  genesToPlot = reactive({#
    validate(#
      need(geneList(), "No genes selected")#
    )#
#
    genes = geneList()#
    if(input$de_state) {#
      selected_de = input$de#
      de_lists = lapply(selected_de, function(x) { as.character(get_de_genes(genes, x, sig_genes_lfc)$Symbol) })#
      genes = Reduce(union, de_lists)#
    } #
    return(genes) #
  }) #
# heatmap plot --------------------------------------------------------------------------------#
  output$expressionPlot = renderPlot({#
    validate(#
      need(genesToPlot(), "No genes selected"),#
      need(input$tissues, "No tissues selected")#
    )#
    selected_tissues = input$tissues#
    sub_eset = eset[, eset$tissue %in% selected_tissues]#
    genes = gene2probe(genesToPlot(), mapped_probes)#
    gene_heatmap(sub_eset, genes, scale = "row",#
                  probe_level = input$hm_probes,#
                  gsm_show = input$hm_gsm,#
                  show_rownames = input$hm_rownames,#
                  cluster_rows = input$hm_row_cluster,#
                  cluster_cols = input$hm_col_cluster,#
                  border_color = NA)#
  })#
  output$heatmap_ui = renderUI({#
    plotOutput("expressionPlot", height = input$hm_height, width = input$hm_width)#
  })#
#
# Overall expression --------------------------------------------------------------------------#
#
  output$overallPlot = renderPlot({#
    validate(#
      need(genesToPlot(), "No genes selected"),#
      need(input$tissues, "No tissues selected")#
    )#
    gene_data = get_gene_data(eset, genesToPlot())#
    overall_expression_boxplot(gene_data, tissues = input$tissues)#
  })#
# By gene boxplots ----------------------------------------------------------------------------#
#
  output$byGenePlot = renderPlot({#
    validate(#
      need(genesToPlot(), "No genes selected"),#
      need(input$tissues, "No tissues selected")#
    )#
    gene_data = get_gene_data(eset, genesToPlot())#
    by_gene_boxplot(gene_data, tissues = input$tissues)#
  })#
  plsdaData = reactive({#
    selected_tissues = input$pls_tissues#
    if(length(selected_tissues) < 2) {#
      return(NULL)#
    }#
    sub_eset = eset[, eset$tissue %in% selected_tissues]#
    genes = gene2probe(geneList(), mapped_probes)#
    probe = input$pls_probe#
    #ncomp = input$pls_ncomp#
    get_plsda(sub_eset, genes, probe) #
  })#
#
# PCA plot ----------------------------------------------------------------------------#
  output$indPlot = renderPlot({#
    validate(#
      need(plsdaData(), "No PLS-DA to plot"),#
      need(length(input$pls_tissues) >= 2, "Please select at least two tissues")#
    )#
    plotIndiv(plsdaData()$result, ind.names = FALSE, group = plsdaData()$tissue_grps, pch = 16, #
              col.per.group = brewer.pal(3, "Set1")[1:length(input$pls_tissues)], legend = TRUE, cex = 2, ellipse=TRUE)#
  })#
#
# Correlation Circle plot ----------------------------------------------------------------------------  #
  output$varPlot = renderPlot({#
     validate(#
      need(plsdaData(), "No PLS-DA to plot")#
    )#
#
    plotVar(plsdaData()$result, var.names = list(plsdaData()$varNames), cex = 3,overlap=FALSE)#
  })#
#
  output$numGenesUI = renderUI({#
    numericInput("pls_num_genes", "Select number of genes to show contributions for", #
                 value = 10, min = 1, max = length(geneList()), step = 1)#
  })#
# Loadings plot ----------------------------------------------------------------------------#
  output$contribPlot = renderPlot({#
    validate(#
      need(plsdaData(), "No PLS-DA to plot"),#
      need(input$pls_num_genes, "")#
    )#
    grps = plsdaData()$result$names$Y#
    cols = brewer.pal(3, "Set1")[1:length(grps)]#
    ndisplay = input$pls_num_genes#
    comp = as.integer(input$pls_ncomp)#
    plotLoadings(plsdaData()$result, name.var = plsdaData()$varNames, ndisplay = ndisplay,#
                comp = comp, legend.color = c(1:2))#
  })#
  # contribData = reactive({#
  ##
  #   ndisplay = input$pls_num_genes#
  #   comp = as.integer(input$pls_ncomp)#
  #   contrib = plotLoadings(plsdaData()$result, name.var = plsdaData()$varNames, ndisplay = ndisplay,#
  #               comp = comp, plot = TRUE)#
  ##
  #   contrib$contrib %>% dplyr::select(-Contrib) %>% add_rownames("Gene") %>%#
  #     mutate(Gene = getSYMBOL(Gene, "mouse4302.db"))#
  # })#
  # output$contribTable = renderDataTable({#
#     validate(#
#       need(contribData(), "No data")#
#     )#
#      contribData()#
#   })#
  # output$pls_download = downloadHandler(#
#     filename = 'gene_contribution_data.csv',#
#     content = function(file) {#
#       write_csv(contribData(), file)#
#     }#
##
#   )#
    session$onSessionEnded(stopApp)#
}
shinyApp(ui,server)
library(profvis)
profvis({shinyApp(ui,server)})
install.packages("profvis")
library(profvis)
profvis({shinyApp(ui,server)})
runApp()
profvis({runApp(appDir='Desktop/shiny-server/receptoR_analysis/')})
runApp(appDir='Desktop/shiny-server/receptoR_analysis/')
q()
if(!require("devtools")) install.packages("devtools")#
    devtools::install_github("briandconnelly/ggplot2bdc")#
library(ggplot2bdc)
# load libraries#
library(dplyr)#
library(ggplot2)
plate1<-read.csv('~/Dropbox/Pseudoislet Optimization/Soluble factors/DSD_pseudoislets/2018-12 DSD Small scale/2018-12-10_DSD10.csv')
head(plate1)
plate1<-read.csv('~/Dropbox/Pseudoislet Optimization/Soluble factors/DSD_pseudoislets/2018-12 DSD Small scale/2018-12-10_DSD10.csv')
head(plate1)
plate1<-read.csv('~/Dropbox/Pseudoislet Optimization/Soluble factors/DSD_pseudoislets/2018-12 DSD Small scale/2018-12-10_DSD10.csv',sep=",")
head(plate1)
plate1<-read.csv('~/Dropbox/Pseudoislet Optimization/Soluble factors/DSD_pseudoislets/2018-12 DSD Small scale/2018-12-10_DSD10.csv',sep=",")
head(plate1)
platemap<-mutate(plate1,row=as.numeric(match(toupper(substr(well,1,1)), LETTERS)),col=as.numeric(substr(well,2,5)))
plate1<-read.csv('~/Dropbox/Pseudoislet Optimization/Soluble factors/DSD_pseudoislets/2018-12 DSD Small scale/2018-12-10_DSD10.csv',sep=",")
platemap<-mutate(plate1,row=as.numeric(match(toupper(substr(well,1,1)), LETTERS)),col=as.numeric(substr(well,2,5)))
PLATEMAP
platemap
ggplot(data=platemap,aes(x=col,y=row))+geom_point(data=expand.grid(seq(1, 12), seq(1, 8)), aes(x=Var1, y=Var2),color="grey90", fill="white", shape=21, size=6)+geom_point(aes(colour=as.factor(size)),size=10)+scale_y_reverse(breaks=seq(1, 8), labels=LETTERS[1:8])+scale_x_continuous(breaks=seq(1, 12))+scale_colour_manual(values=c("100"="red","250"="blue","400"="green"))+labs(title="CCD Plate 1",colour="Cells per aggregate")+theme_bdc_microtiter()
ggplot(data=platemap,aes(x=col,y=row))+geom_point(data=expand.grid(seq(1, 6), seq(1, 4)), aes(x=Var1, y=Var2),color="grey90", fill="white", shape=21, size=6)+geom_point(aes(colour=as.factor(size)),size=10)+scale_y_reverse(breaks=seq(1, 8), labels=LETTERS[1:8])+scale_x_continuous(breaks=seq(1, 12))+scale_colour_manual(values=c("100"="red","250"="blue","400"="green"))+labs(title="CCD Plate 1",colour="Cells per aggregate")+theme_bdc_microtiter()
ggplot(data=platemap,aes(x=col,y=row))+geom_point(data=expand.grid(seq(1, 6), seq(1, 4)), aes(x=Var1, y=Var2),color="grey90", fill="white", shape=21, size=6)+geom_point(aes(colour=as.factor(size)),size=10)+scale_y_reverse(breaks=seq(1, 8), labels=LETTERS[1:4])+scale_x_continuous(breaks=seq(1, 6))+scale_colour_manual(values=c("100"="red","250"="blue","400"="green"))+labs(title="CCD Plate 1",colour="Cells per aggregate")+theme_bdc_microtiter()
ggplot(data=platemap,aes(x=col,y=row))+geom_point(data=expand.grid(seq(1, 6), seq(1, 4)), aes(x=Var1, y=Var2),color="grey90", fill="white", shape=21, size=6)+geom_point(aes(colour=as.factor(size)),size=10)+scale_y_reverse(breaks=seq(1, 4), labels=LETTERS[1:4])+scale_x_continuous(breaks=seq(1, 6))+scale_colour_manual(values=c("100"="red","250"="blue","400"="green"))+labs(title="CCD Plate 1",colour="Cells per aggregate")+theme_bdc_microtiter()
ggplot(data=platemap,aes(x=col,y=row))+geom_point(data=expand.grid(seq(1, 6), seq(1, 4)), aes(x=Var1, y=Var2),color="grey90", fill="white", shape=21, size=6)+geom_point(aes(colour=as.factor(size)),size=20)+scale_y_reverse(breaks=seq(1, 4), labels=LETTERS[1:4])+scale_x_continuous(breaks=seq(1, 6))+scale_colour_manual(values=c("100"="red","250"="blue","400"="green"))+labs(title="CCD Plate 1",colour="Cells per aggregate")+theme_bdc_microtiter()
ggplot(data=platemap,aes(x=col,y=row))+geom_point(data=expand.grid(seq(1, 6), seq(1, 4)), aes(x=Var1, y=Var2),color="grey90", fill="white", shape=21, size=6)+geom_point(aes(colour=as.factor(size)))+scale_y_reverse(breaks=seq(1, 4), labels=LETTERS[1:4])+scale_x_continuous(breaks=seq(1, 6))+scale_colour_manual(values=c("100"="red","250"="blue","400"="green"))+labs(title="DSD10 Cell Platemap",colour="Cells per aggregate")+theme_bdc_microtiter()
ggplot(data=platemap,aes(x=col,y=row))+geom_point(aes(colour=as.factor(size)))+scale_y_reverse(breaks=seq(1, 4), labels=LETTERS[1:4])+scale_x_continuous(breaks=seq(1, 6))+scale_colour_manual(values=c("100"="red","250"="blue","400"="green"))+labs(title="DSD10 Cell Platemap",colour="Cells per aggregate")+theme_bdc_microtiter()
ggplot(data=platemap,aes(x=col,y=row))+geom_point(data=expand.grid(seq(1, 6), seq(1, 4)), aes(x=Var1, y=Var2),color="grey90", fill="white", shape=21, size=6)+geom_point(aes(colour=as.factor(size)),size=20)+scale_y_reverse(breaks=seq(1, 4), labels=LETTERS[1:4])+scale_x_continuous(breaks=seq(1, 6))+scale_colour_manual(values=c("100"="red","250"="blue","400"="green"))+labs(title="DSD10 Cell Platemap",colour="Cells per aggregate")+theme_bdc_microtiter()
ggplot(data=platemap,aes(x=col,y=row))+geom_point(data=expand.grid(seq(1, 6), seq(1, 4)), aes(x=Var1, y=Var2),color="grey90", fill="white", shape=21, size=6)+geom_point(aes(colour=as.factor(size)),size=15)+scale_y_reverse(breaks=seq(1, 4), labels=LETTERS[1:4])+scale_x_continuous(breaks=seq(1, 6))+scale_colour_manual(values=c("100"="red","250"="blue","400"="green"))+labs(title="DSD10 Cell Platemap",colour="Cells per aggregate")+theme_bdc_microtiter()
ggplot(data=platemap,aes(x=col,y=row))+geom_point(data=expand.grid(seq(1, 6), seq(1, 4)), aes(x=Var1, y=Var2),color="grey90", fill="white", shape=21, size=6)+geom_point(aes(colour=as.factor(size)),size=20)+scale_y_reverse(breaks=seq(1, 4), labels=LETTERS[1:4])+scale_x_continuous(breaks=seq(1, 6))+scale_colour_manual(values=c("100"="red","250"="blue","400"="green"))+labs(title="DSD10 Cell Platemap",colour="Cells per aggregate")+theme_bdc_microtiter()
ggplot(data=platemap,aes(x=col,y=row))+geom_point(data=expand.grid(seq(1, 6), seq(1, 4)), aes(x=Var1, y=Var2),color="grey90", fill="white", shape=21, size=6)+geom_point(aes(colour=as.factor(size)),size=10)+scale_y_reverse(breaks=seq(1, 4), labels=LETTERS[1:4])+scale_x_continuous(breaks=seq(1, 6))+scale_colour_manual(values=c("100"="red","250"="blue","400"="green"))+labs(title="DSD10 Cell Platemap",colour="Cells per aggregate")+theme_bdc_microtiter()
ggplot(data=platemap,aes(x=col,y=row))+geom_point(data=expand.grid(seq(1, 6), seq(1, 4)), aes(x=Var1, y=Var2),color="grey90", fill="white", shape=21, size=6)
ggplot(data=platemap,aes(x=col,y=row))+geom_point(data=expand.grid(seq(1, 6), seq(1, 4)), aes(x=Var1, y=Var2),color="grey90", fill="white", shape=21, size=6)+theme_bdc_microtiter()
ggplot(data=platemap,aes(x=col,y=row))+geom_point(data=expand.grid(seq(1, 6), seq(1, 4)), aes(x=Var1, y=Var2),color="grey90", fill="white", shape=21, size=10)+theme_bdc_microtiter()
ggplot(data=platemap,aes(x=col,y=row))+geom_point(data=expand.grid(seq(1, 6), seq(1, 4)), aes(x=Var1, y=Var2),color="grey90", fill="white", shape=21, size=10)+labs(title="DSD10 Cell Platemap",colour="Cells per aggregate")+theme_bdc_microtiter()
ggplot(data=platemap,aes(x=col,y=row))+geom_point(data=expand.grid(seq(1, 6), seq(1, 4)), aes(x=Var1, y=Var2),color="grey90", fill="white", shape=21, size=10)+geom_point(aes(colour=as.factor(size)),size=10)+scale_y_reverse(breaks=seq(1, 4), labels=LETTERS[1:4])+scale_x_continuous(breaks=seq(1, 6))+scale_colour_manual(values=c("100"="red","250"="blue","400"="green"))+labs(title="DSD10 Cell Platemap",colour="Cells per aggregate")+theme_bdc_microtiter()
today<-strftime(Sys.time(),"%Y-%m-%d")
today
ggplot(data=platemap,aes(x=col,y=row))+geom_point(data=expand.grid(seq(1, 6), seq(1, 4)), aes(x=Var1, y=Var2),color="grey90", fill="white", shape=21, size=10)+geom_point(aes(colour=as.factor(size)),size=10)+scale_y_reverse(breaks=seq(1, 4), labels=LETTERS[1:4])+scale_x_continuous(breaks=seq(1, 6))+scale_colour_manual(values=c("100"="red","250"="blue","400"="green"))+labs(title=paste("DSD10 Cell Platemap ",today,sep=""),colour="Cells per aggregate")+theme_bdc_microtiter()
dev.new(width=4, height=3)
dev.new(width=50, height=30)
ggplot(data=platemap,aes(x=col,y=row))+geom_point(data=expand.grid(seq(1, 6), seq(1, 4)), aes(x=Var1, y=Var2),color="grey90", fill="white", shape=21, size=10)+geom_point(aes(colour=as.factor(size)),size=10)+scale_y_reverse(breaks=seq(1, 4), labels=LETTERS[1:4])+scale_x_continuous(breaks=seq(1, 6))+scale_colour_manual(values=c("100"="red","250"="blue","400"="green"))+labs(title=paste("DSD10 Cell Platemap ",today,sep=""),colour="Cells per aggregate")+theme_bdc_microtiter()
dev.new(width=12, height=8)
ggplot(data=platemap,aes(x=col,y=row))+geom_point(data=expand.grid(seq(1, 6), seq(1, 4)), aes(x=Var1, y=Var2),color="grey90", fill="white", shape=21, size=10)+geom_point(aes(colour=as.factor(size)),size=10)+scale_y_reverse(breaks=seq(1, 4), labels=LETTERS[1:4])+scale_x_continuous(breaks=seq(1, 6))+scale_colour_manual(values=c("100"="red","250"="blue","400"="green"))+labs(title=paste("DSD10 Cell Platemap ",today,sep=""),colour="Cells per aggregate")+theme_bdc_microtiter()
dev.new(width=3, height=2)
dev.new(width=6, height=4)
ggplot(data=platemap,aes(x=col,y=row))+geom_point(data=expand.grid(seq(1, 6), seq(1, 4)), aes(x=Var1, y=Var2),color="grey90", fill="white", shape=21, size=10)+geom_point(aes(colour=as.factor(size)),size=10)+scale_y_reverse(breaks=seq(1, 4), labels=LETTERS[1:4])+scale_x_continuous(breaks=seq(1, 6))+scale_colour_manual(values=c("100"="red","250"="blue","400"="green"))+labs(title=paste("DSD10 Cell Platemap ",today,sep=""),colour="Cells per aggregate")+theme_bdc_microtiter()
png(filename='Desktop/platemap.png',width=480,height=320)
ggplot(data=platemap,aes(x=col,y=row))+geom_point(data=expand.grid(seq(1, 6), seq(1, 4)), aes(x=Var1, y=Var2),color="grey90", fill="white", shape=21, size=10)+geom_point(aes(colour=as.factor(size)),size=10)+scale_y_reverse(breaks=seq(1, 4), labels=LETTERS[1:4])+scale_x_continuous(breaks=seq(1, 6))+scale_colour_manual(values=c("100"="red","250"="blue","400"="green"))+labs(title=paste("DSD10 Cell Platemap ",today,sep=""),colour="Cells per aggregate")+theme_bdc_microtiter()
dev.off()
png(filename='Desktop/platemap.png',width=960,height=640)
ggplot(data=platemap,aes(x=col,y=row))+geom_point(data=expand.grid(seq(1, 6), seq(1, 4)), aes(x=Var1, y=Var2),color="grey90", fill="white", shape=21, size=10)+geom_point(aes(colour=as.factor(size)),size=10)+scale_y_reverse(breaks=seq(1, 4), labels=LETTERS[1:4])+scale_x_continuous(breaks=seq(1, 6))+scale_colour_manual(values=c("100"="red","250"="blue","400"="green"))+labs(title=paste("DSD10 Cell Platemap ",today,sep=""),colour="Cells per aggregate")+theme_bdc_microtiter()
dev.off()
ggplot(data=platemap,aes(x=col,y=row))+geom_point(data=expand.grid(seq(1, 6), seq(1, 4)), aes(x=Var1, y=Var2),color="grey90", fill="white", shape=21, size=10)+geom_point(aes(colour=as.factor(size)),size=10)+scale_y_reverse(breaks=seq(1, 4), labels=LETTERS[1:4])+scale_x_continuous(breaks=seq(1, 6))+scale_colour_manual(values=c("100"="red","250"="blue","400"="green"))+labs(title=paste("DSD10 Cell Platemap ",today,sep=""),colour="Cells per aggregate")+theme_bdc_microtiter()+xlim(-1,7)
ggplot(data=platemap,aes(x=col,y=row))+geom_point(data=expand.grid(seq(1, 6), seq(1, 4)), aes(x=Var1, y=Var2),color="grey90", fill="white", shape=21, size=10)+geom_point(aes(colour=as.factor(size)),size=10)+scale_y_reverse(breaks=seq(1, 4), labels=LETTERS[1:4])+scale_x_continuous(limits=c(-1,7),breaks=seq(1, 6))+scale_colour_manual(values=c("100"="red","250"="blue","400"="green"))+labs(title=paste("DSD10 Cell Platemap ",today,sep=""),colour="Cells per aggregate")+theme_bdc_microtiter()
ggplot(data=platemap,aes(x=col,y=row))+geom_point(data=expand.grid(seq(1, 6), seq(1, 4)), aes(x=Var1, y=Var2),color="grey90", fill="white", shape=21, size=10)+geom_point(aes(colour=as.factor(size)),size=10)+scale_y_reverse(breaks=seq(1, 4), labels=LETTERS[1:4])+scale_x_continuous(limits=c(0.5,6.5),breaks=seq(1, 6))+scale_colour_manual(values=c("100"="red","250"="blue","400"="green"))+labs(title=paste("DSD10 Cell Platemap ",today,sep=""),colour="Cells per aggregate")+theme_bdc_microtiter()
ggplot(data=platemap,aes(x=col,y=row))+geom_point(data=expand.grid(seq(1, 6), seq(1, 4)), aes(x=Var1, y=Var2),color="grey90", fill="white", shape=21, size=20)+geom_point(aes(colour=as.factor(size)),size=20)+scale_y_reverse(breaks=seq(1, 4), labels=LETTERS[1:4],limits=c(0.7,4.3))+scale_x_continuous(breaks=seq(1, 6),limits=c(0.7,6.3))+scale_colour_manual(values=c("100"="red","250"="blue","400"="green"))+labs(title=paste("DSD10 Cell Platemap ",today,sep=""),colour="Cells per aggregate")+theme_bdc_microtiter()
ggplot(data=platemap,aes(x=col,y=row))+geom_point(data=expand.grid(seq(1, 6), seq(1, 4)), aes(x=Var1, y=Var2),color="grey90", fill="white", shape=21, size=20)+geom_point(aes(colour=as.factor(size)),size=20)+scale_y_reverse(breaks=seq(1, 4), labels=LETTERS[1:4])+scale_x_continuous(breaks=seq(1, 6),limits=c(0.7,6.3))+scale_colour_manual(values=c("100"="red","250"="blue","400"="green"))+labs(title=paste("DSD10 Cell Platemap ",today,sep=""),colour="Cells per aggregate")+theme_bdc_microtiter()
?scale_y_reverse
ggplot(data=platemap,aes(x=col,y=row))+geom_point(data=expand.grid(seq(1, 6), seq(1, 4)), aes(x=Var1, y=Var2),color="grey90", fill="white", shape=21, size=20)+geom_point(aes(colour=as.factor(size)),size=20)+scale_y_reverse(breaks=seq(1, 4), labels=LETTERS[1:4],position="top")+scale_x_continuous(breaks=seq(1, 6),limits=c(0.7,6.3))+scale_colour_manual(values=c("100"="red","250"="blue","400"="green"))+labs(title=paste("DSD10 Cell Platemap ",today,sep=""),colour="Cells per aggregate")+theme_bdc_microtiter()
ggplot(data=platemap,aes(x=col,y=row))+geom_point(data=expand.grid(seq(1, 6), seq(1, 4)), aes(x=Var1, y=Var2),color="grey90", fill="white", shape=21, size=20)+geom_point(aes(colour=as.factor(size)),size=20)+scale_y_continuos(breaks=seq(4, 1), labels=LETTERS[1:4],position="top")+scale_x_continuous(breaks=seq(1, 6),limits=c(0.7,6.3))+scale_colour_manual(values=c("100"="red","250"="blue","400"="green"))+labs(title=paste("DSD10 Cell Platemap ",today,sep=""),colour="Cells per aggregate")+theme_bdc_microtiter()
ggplot(data=platemap,aes(x=col,y=row))+geom_point(data=expand.grid(seq(1, 6), seq(1, 4)), aes(x=Var1, y=Var2),color="grey90", fill="white", shape=21, size=20)+geom_point(aes(colour=as.factor(size)),size=20)+scale_y_continuous(breaks=seq(4, 1), labels=LETTERS[1:4],position="top")+scale_x_continuous(breaks=seq(1, 6),limits=c(0.7,6.3))+scale_colour_manual(values=c("100"="red","250"="blue","400"="green"))+labs(title=paste("DSD10 Cell Platemap ",today,sep=""),colour="Cells per aggregate")+theme_bdc_microtiter()
ggplot(data=platemap,aes(x=col,y=row))+geom_point(data=expand.grid(seq(1, 6), seq(1, 4)), aes(x=Var1, y=Var2),color="grey90", fill="white", shape=21, size=20)+geom_point(aes(colour=as.factor(size)),size=20)+scale_x_continuous(breaks=seq(1, 6),limits=c(0.7,6.3))+scale_colour_manual(values=c("100"="red","250"="blue","400"="green"))+labs(title=paste("DSD10 Cell Platemap ",today,sep=""),colour="Cells per aggregate")+theme_bdc_microtiter()
ggplot(data=platemap,aes(x=col,y=row))+geom_point(data=expand.grid(seq(1, 6), seq(1, 4)), aes(x=Var1, y=Var2),color="grey90", fill="white", shape=21, size=20)+geom_point(aes(colour=as.factor(size)),size=20)+scale_y_reverse(breaks=seq(1, 4), labels=LETTERS[1:4])+scale_x_continuous(breaks=seq(1, 6),limits=c(0.7,6.3))+scale_colour_manual(values=c("100"="red","250"="blue","400"="green"))+labs(title=paste("DSD10 Cell Platemap ",today,sep=""),colour="Cells per aggregate")+theme_bdc_microtiter()
exit()
q()
## 2019-01-11#
## Beta version to be completed today!#
## 2018-04-02#
library(shiny)#
library(shinythemes)#
library(shinyjs)#
#
#  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  #
# ( )( )( )( )( )( )( )( )( )( )( )( )( )( )( )( )( )( )( )( )( )#
# \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/\ #
# (_)(_)(_)(_)(_)(_)(_)(_)(_)(_)(_)(_)(_)(_)(_)(_)(_)(_)(_)(_)(_)#
#
## Javascript#
#
# this codes for the 'enter/return' key as an action button#
jscode <- '#
$(function() {#
  var $els = $("[data-proxy-click]");#
  $.each(#
    $els,#
    function(idx, el) {#
      var $el = $(el);#
      var $proxy = $("#" + $el.data("proxyClick"));#
      $el.keydown(function (e) {#
        if (e.keyCode == 13) {#
          $proxy.click();#
        }#
      });#
    }#
  );#
});#
'#
## UI#
ui <- fluidPage(#
tags$head(tags$script(HTML(jscode))),#
# tags$script(HTML("$('body').addClass('fixed);")),#
shinyjs::useShinyjs(),#
navbarPage("receptoR",#
    theme = shinytheme("spacelab"),#
#
# Start page  ------------------------------------------------------------------------------#
#
    tabPanel("Start here",#
       h3("Welcome to receptoR!"),#
       hr(),#
       sidebarLayout(#
           sidebarPanel(#
               h4("receptoR is an automated hypothesis generation software to identify cellular signaling pathways from transcriptomics data."),#
               p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky. Andouille t-bone biltong bacon beef ribs boudin frankfurter ham hock pork loin capicola tail ground round brisket tenderloin tri-tip. Ham pork bacon strip steak, ball tip leberkas meatball capicola pork loin. Ribeye turducken tri-tip jowl filet mignon drumstick shank corned beef prosciutto spare ribs sausage leberkas cupim burgdoggen bacon.",style="color:#D8BFD8"),#
               hr(),#
               p("(C) 2019 Derek Toms")),#
           mainPanel(#
               p("This software allows you to browse and analyze public transcriptomics data. To proceed, click \'Search for datasets\', above"),#
               img(src="overview.png"),#
               p("Spicy jalapeno bacon ipsum dolor amet brisket ribeye tri-tip tail meatloaf ground round salami fatback. Ball tip flank pork turkey prosciutto. Venison burgdoggen beef pork hamburger tongue shankle rump frankfurter kielbasa pastrami pork belly. T-bone fatback venison tenderloin salami biltong turkey chuck.",style="color:#D8BFD8"),#
#
p("Turkey tenderloin buffalo frankfurter, strip steak capicola filet mignon ribeye cow t-bone biltong. Tri-tip hamburger ham hock, shank landjaeger kielbasa pork loin spare ribs pastrami salami shoulder alcatra. Biltong tail brisket, turkey beef ribs hamburger prosciutto bacon tenderloin pancetta shank venison picanha cupim. Frankfurter porchetta turkey biltong corned beef, burgdoggen prosciutto jerky tail. Capicola beef ribs burgdoggen pancetta, frankfurter leberkas pig. Filet mignon jerky ground round cow burgdoggen, shoulder boudin ham hock pancetta.",style="color:#D8BFD8"),#
#
p("Sirloin salami strip steak burgdoggen pork chop ribeye, pastrami fatback short ribs corned beef. Beef shank shoulder, leberkas pancetta ground round jowl tenderloin ribeye hamburger shankle flank. Strip steak short loin kevin pork belly meatball swine sausage ham jowl pig tongue venison fatback t-bone beef. Spare ribs shoulder ham hock strip steak pastrami.",style="color:#D8BFD8")#
               ))#
        ),#
#
# Search for GSE  ------------------------------------------------------------------------------#
#
    tabPanel("Search for datasets",#
       h3("Organize publicly available expression data"),#
       hr(),#
       sidebarLayout(#
       sidebarPanel(#
           # style = "position:fixed;width:30%",#
           h4("Search for datasets"),#
           p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
           hr(),#
           conditionalPanel(condition="input.searchpanel==1",#
           h4("Find expression data from publicly available datasets to begin defining your own experiment."),#
           p("Begin by searching for ",span("G",style="font-weight:bold"),"EO data ",span("se",style="font-weight:bold"),"ries (GSE) containing expression data for your cell or tissue type of interest."),#
           radioButtons("gplSelection", "Choose species:", choices = c("Mouse (GPL1261)" = "mouse", "Human (GPL570)" = "human")),#
           tagAppendAttributes(textInput("Key", "Enter search terms, separated by commas", value = ""),`data-proxy-click` = "Search"),#
           actionButton("Search", "Search"),#
           hr(),#
           p("When you have selected the appropriate datasets, click \'Retrieve GSM\' to collect sample information and then click on the \'Assign samples\' tab above."),#
           actionButton("getGSM", "Retrieve GSM")),#
           conditionalPanel(condition="input.searchpanel==2",#
           h4("Define the categories that you wish to assign each sample (GSM) for comparison."),#
           textInput("cat1", label=NULL, placeholder="Category 1"),#
           textInput("cat2", label=NULL, placeholder="Category 2"),#
           textInput("cat3", label=NULL, placeholder="Category 3 (optional)"),#
           ### https://www.aridhia.com/blog/the-sky-is-not-the-limit-embedding-raw-html-and-javascript-to-create-dynamic-ui-elements-in-shiny-applications/   #
           ### ^ this should help with dynamically adding/subtracting categories#
           hr(),#
           h4("Highlight samples, then click to Assign them to the specificed category."),#
           uiOutput("categorySelect"),#
           actionButton("Assign", "Assign GSM to Category")),#
           conditionalPanel(condition="input.searchpanel==3",#
               h4("Thank you for using receptoR!"),#
               p(" Please enter your name and any comments/bugs/questions/requests in the box below, then click the \'Download and Process\' button to retrieve the raw files from the NCBI server and process them based on their assigned categories."),#
               textAreaInput("comments","Comments",width="100%",height="100px",resize="vertical"),#
               textInput("downloadId","Download ID"),#
               actionButton("downloadCEL","Download and Process"))#
       ),#
       mainPanel(#
           # Search GSE based on species#
        tabsetPanel(#
        tabPanel("Search", value=1,#
            h4("GEO data series (\'GSE\') matching search query"), # return search here!#
            DT::dataTableOutput("filteredgse")#
        ),#
        # Assign samples to categories ------------------------------------------------------#
        tabPanel("Assign", value=2,#
            h4("From the selected series' (GSE) assign individual samples (GSM) to categories of your choosing."),#
            DT::dataTableOutput("gsm_table")#
        ),#
        # This will be where the CEL files are downloaded (confirmation, etc) ------------#
        tabPanel("Process", value=3,#
        h4("Please confirm samples are properly categorized."),#
        p("Expression samples annotated:"),#
                DT::dataTableOutput("finishedtable")#
        ),#
        id = "searchpanel"#
        )#
        )#
        )#
    ),#
    # Load Gene Expression Data tab -------------------------------------#
    tabPanel("Load expression data",#
        h3("Pick from user-defined experiments to perform analyses"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Load expression data"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            hr(),#
            selectInput(inputId="user_data",label="Select user data for analysis",choices=c("none"="none","Photoreceptors v RPE"="2018-04-13_app_data.rda"),selected="none"),#
            br(),#
            uiOutput("geneListsUI"),#
            br(),#
            uiOutput("geneUI")#
        ),#
        mainPanel(#
            tabsetPanel(type="tabs",selected="Gene-level expression",#
            tabPanel("Experimental design",h4("Category definitions and contrasts"),p("Coming soon!")),#
            tabPanel("Gene-level expression",#
                fluidRow(#
                column(6, h4("Average Expression"), DT::dataTableOutput("genes")),#
                column(6, h4("Gene Boxplot"), plotOutput("singleGenePlot"))#
            )))#
        )#
        )#
    ),#
    # Magnitude expression tab ------------------------------------------------------------------------------#
#
    tabPanel("Absolute expression",#
        h3("Compare genes based on absolute expression"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Absolute expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            # style = "position:fixed",#
            checkboxGroupInput("tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            br(),#
            checkboxInput("de_state", label = "Show differential expressed only", value = TRUE),#
            uiOutput("de_choices"),#
            br(),#
            conditionalPanel(condition="input.absexpanel==1",#
                h3("Heatmap parameters"),#
                checkboxInput("hm_probes", "Show probe-level", value = FALSE),#
                checkboxInput("hm_gsm", "Show GSM (column names)", value = TRUE),#
                checkboxInput("hm_rownames", "Show rownames", value = TRUE),#
                checkboxInput("hm_col_cluster", "Cluster columns", value = TRUE),#
                checkboxInput("hm_row_cluster", "Cluster rows", value = TRUE),#
                h4("Select plot dimensions (px)"),#
                numericInput("hm_width", "Width", value = 900, min = 100, max = 2400, step = 10),#
                numericInput("hm_height", "Height", value = 1200, min = 100, max = 2400, step = 10))#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("Heatmap", value=1, uiOutput("heatmap_ui")),#
            tabPanel("Summary boxplots", plotOutput("overallPlot", height = 600)),#
            tabPanel("By-gene boxplots", plotOutput("byGenePlot", height = 600)),#
            id = "absexpanel"#
        )#
        )#
        )#
    ),#
#
    # Mixomics tab ---------------------------------------------#
    tabPanel("Relative expression",#
        h3("Compare genes based on relative expression between experimental groups"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Relative expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            checkboxGroupInput("pls_tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            checkboxInput("pls_probe", "Perform PLS-DA at probe level", value = FALSE),#
            br(),#
            h4("Gene contribution plot"),#
            uiOutput("numGenesUI"),#
            radioButtons("pls_ncomp", "Select component for gene contribution plot", choices = c(1,2)),#
            br()#
            # downloadButton("pls_download", "Download gene contribution data")#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("PCA Analysis", plotOutput("indPlot", height = 800)),#
            tabPanel("Circle variance", plotOutput("varPlot", height = 800)),#
            tabPanel("Loadings plot", plotOutput("contribPlot", height = 800))#
        ),#
        position = c("right","left"),#
        fluid = TRUE#
        )#
        )#
    )#
)#
)
setwd("Documents/Retina/CNIB_TuckMacPhee/Bioinformatics/2019-01 Beta version/")
# October 2018 receptoR v 1.0#
## Last update: 2018-11-23#
## server.R#
### Integrating both applications to a final shiny executable#
#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
#
# 2018-04-02#
# Hoping to work with the filtered table to integrate #
# 1. saving table data (e.g. search results) for reproducibility#
# 2. displaying sorted table tibble and associated categories#
# 3. .rda of CEL to get that can be loaded (thinking along the lines of a !exist escape if there is no processed datafile)#
# 4. aforementioned processed datafile, saved for each user for some length of time#
#
#########################################
#$#$#$#$#$#$    HEADER     $#$#$#$#$#$#$#
#########################################
#
# App structural packages:#
#install.packages(c('dplyr','dbplyr','tidyr','ggplot2','RColorBrewer','readr','stringr','shiny','shinythemes','shinyjs','DT'))#
#
library(dplyr)#
library(tidyr)#
library(ggplot2)#
library(RColorBrewer)#
library(readr)#
library(stringr)#
library(shiny)#
library(shinythemes)#
library(shinyjs)#
library(dbplyr)#
library(DT)#
#
# Bioinformatics packages installed via biocLite:#
#source("https://bioconductor.org/biocLite.R")#
#biocLite(c('limma','annotate','genefilter','ComplexHeatmap','pheatmap','cowplot','GEOmetadb','mouse4302.db','hgu133plus2.db'))#
#biocLite(c('mixOmics','MergeMaid','GEOquery','inSilicoMerging','affy','sva','Rtsne','metaArray','testthat'))#
#
library(GEOmetadb)#
library(GEOquery)#
library(affy)#
#
library(limma)#
library(annotate)#
library(pheatmap)#
library(mixOmics)#
library(cowplot)#
#
## 2018-12-02 not currently needed:#
    # library(genefilter)#
   #  library(ComplexHeatmap)#
   ##
   #  library(MergeMaid)#
   #  library(testthat)#
   #  library(metaArray)#
   #  library(Rtsne)#
   #  library(sva)#
#
# Microarray platform annotations:#
library(mouse4302.db) #
library(hgu133plus2.db)#
#
#########################################
#$#$#$#$#$#$    Shiny App  $#$#$#$#$#$#$#
#########################################
#
source("functions.R")#
#
### not the best place to put this, but it should work for now#
#
load("../gseGPL570.rda")#
load("../gsmGPL570.rda")#
load("../gseGPL1261.rda")#
load("../gsmGPL1261.rda")#
#
load("../2018-12_genelists.rda")#
### I'm going to try and not have this loaded to start#
# load("2018-04-13_app_data.rda")#
#
## SERVER#
server <- function(input, output, session) {#
#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
  ## Set up colour environment#
  catCol <- brewer.pal(3, "Set1")#
  rowCol <-desat(catCol)#
  # groups <- c(group1,group2,group3) ## Use these in all following code! They should have a "name" variable for user-assigned names 2018-12-10#
  groups<-c("photoreceptors","RPE","whole.retina") ## what is has to be for the moment#
  userID <- NULL#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
  ## Search functions#
  Totalchar <- eventReactive(input$Search, {nchar(input$Key)})#
  Commas <- eventReactive(input$Search, {which(strsplit(input$Key, "")[[1]]==",")})#
  Ncommas <- eventReactive(input$Search, {length(Commas())})#
  Commasstart <- eventReactive(input$Search, {Commas() + 1})#
  Commasend <- eventReactive(input$Search, {Commas() - 1})#
  Searchterms <- eventReactive(input$Search, {#
    substring(input$Key, c(1, Commasstart()), c(Commasend(), Totalchar()))#
  })#
  filtered_gse <- eventReactive(input$Search, {#
      if(input$gplSelection=='human'){#
          dplyr::filter(gseGPL570, str_detect(gseGPL570$title, Searchterms()))#
      } else {#
          dplyr::filter(gseGPL1261, str_detect(gseGPL1261$summary, Searchterms()))#
      }#
  })#
#
  output$filteredgse <- DT::renderDataTable({#
          filtered_gse()}, options=list(searching=TRUE, pageLength=50, scrollY='60vh', columnDefs=list(list(#
              targets = c(8,9,12),#
              render = JS(#
                  "function(data, type, row, meta) {",#
                      "return type === 'display' && typeof data === 'string' && data.length > 100 ?",#
                      "'<span title=\"' + data + '\">' + data.substr(0, 100) + '...</span>' : data;",#
                      "}") #
                      )))) ## typeof data needs to be a string, as a "NA" converted to JS "NULL" breaks things#
#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
### 2018-10-28 Disable platform selection to get it working with mice#
# shinyjs::disable("gplSelection")#
#
### 2018-12-10 The Download CEL button was also disabled once both the whole application was integrated. I'm planning on fixing this today to enable a PDF and RDA of the assigned categories, CEL can be downloaded and annotated at a later date#
# shinyjs::disable("downloadCEL")#
#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
  ## Collect samples to use (GSE - GSM)#
  ### List of the GSM associated with the selected GSE#
    gse_to_keep <- eventReactive(input$getGSM, {#
    filtered_gse()[input$filteredgse_rows_selected,]#
  })#
  ### Use GSE to load GSM from the prefiltered lists#
  gsm_annotated <- eventReactive(input$getGSM, {#
      withProgress(message='Collecting GSM',{#
      if(input$gplSelection=='human'){#
          dplyr::filter(gsmGPL570,series_id %in% gse_to_keep()$gse)#
      } else {#
          dplyr::filter(gsmGPL1261,series_id %in% gse_to_keep()$gse)#
      }#
      })#
  })#
#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
#
  ## Assign categories to each sample (GSM)#
  output$gsm_table <- DT::renderDataTable({#
#
       if(input$Assign==0){#
          return (datatable(gsm_annotated()[,c(-5:-7,-11,-12,-14:-26,-28:-32)],options=list(searching=TRUE, pageLength=50, scrollY='60vh',## 2018-12-10 Pick which columns are necessary ^#
              columnDefs=list(list(#
              targets = "_all",#
              render = JS(#
                  "function(data, type, row, meta) {",#
                      "return type === 'display' && typeof data === 'string' && data.length > 100 ?",#
                      "'<span title=\"' + data + '\">' + data.substr(0, 100) + '...</span>' : data;",#
                      "}") #
                      )))))#
       } else {#
          return (datatable(samples$df[,c(-5:-7,-11,-12,-14:-26,-28:-32)],options=list(searching=TRUE, pageLength=50, scrollY='60vh',#
              columnDefs=list(list(#
              targets = "_all",#
              render = JS(#
                  "function(data, type, row, meta) {",#
                      "return type === 'display' && typeof data === 'string' && data.length > 100 ?",#
                      "'<span title=\"' + data + '\">' + data.substr(0, 100) + '...</span>' : data;",#
                      "}") #
                      ))))%>% formatStyle('category',target="row",backgroundColor=styleEqual(c(input$cat1,input$cat2,input$cat3),c(rowCol[1],rowCol[2],rowCol[3]))))#
       }#
  })#
  proxy.gsm = dataTableProxy('gsm_table')#
  observeEvent(input$Assign,{#
      proxy.gsm %>% selectRows(NULL)#
  }) #
  ## UI output#
#
    output$categorySelect <- renderUI(#
      fluidRow(#
        column(12,#
               selectInput("selection", "Select a Category",#
                           c("category1" <- {input$cat1},#
                             "category2" <- {input$cat2},#
                             "category3" <- {input$cat3},#
                             "category4" <- "Not included"))#
        )#
      )     ### 2018-12-10 I'd like to have a button to add category 3#
    )#
#
  ## Assign categories#
  samples <- reactiveValues()#
  samples$df <- data.frame()#
  observeEvent(input$Assign, {#
      if (input$Assign == 1) {#
        gsm_selected <- gsm_annotated()#
        gsm_selected$category <- rep("Not yet assigned", nrow(gsm_selected))#
        gsm_selected[input$gsm_table_rows_selected,"category"] <- input$selection#
        samples$df <<- gsm_selected#
      }#
      else#
      {#
        samples$df[input$gsm_table_rows_selected,"category"] <<- input$selection#
      }#
  })      #
  # ^ don't love this... would like to have the category set without a button click (maybe change to this tab), but it's working for the moment#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
#
## Finished table, to ultimately lead to CEL download#
#
  finishedtable <- eventReactive(input$Assign, {#
    dplyr::filter(samples$df, category %in% c(input$cat1, input$cat2, input$cat3))#
  })#
  output$finishedtable <- DT::renderDataTable({datatable(finishedtable()[,c(2,3,4,10,31,32,33)],#
      options=list(searching=FALSE,pageLength=100, scrollY='20vh')) %>%#
      formatStyle('category',target="row",#
      backgroundColor=styleEqual(c(input$cat1,input$cat2,input$cat3),c(rowCol[1],rowCol[2],rowCol[3]))#
  )})#
rv <- reactiveValues(download_flag = 0)#
#
  # proxy.finishedtable = dataTableProxy('finishedtable')#
  output$report <- downloadHandler(#
      filename = paste(input$downloadId,userID,"GSM_report.csv",sep="_"),#
      content = function(file){#
          write.csv(finishedtable(),file)#
#           tempReport <- file.path(tempdir(),"report.Rmd")#
#           file.copy("report.Rmd",tempReport,overwrite=TRUE)#
#           params <- list(annotatedGSM = finishedtable())#
##
#           rmarkdown::render(tempReport,output_file = file,#
#               params = params,#
#               envir = new.env(parent=globalenv())#
#               )#
rv$download_flag <- rv$download_flag + 1#
      })#
observeEvent(input$downloadCEL, {#
    showModal(modalDialog(title="Important! Downloading raw .CEL files from the NCBI server.","Jan 11th, 2019: As I finish working out the bugs in converting these files to the analyzed output, the downloading has been disabled. However, all annotations will be saved and processed (Jan 12-13) to be made available for analysis. Please click below to download a record of your submission.",#
    footer = tagList(#
        modalButton("Cancel"),#
        downloadButton("report","Download submission record"))))      #
  })#
  observeEvent(rv$download_flag, {#
      removeModal()#
   })#
  observeEvent(input$downloadCEL, {#
      withProgress(#
          message = "Downloading and processing GSM",#
          {userID<<-processData(finishedtable(),input$comments)})#
  })#
#
#  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  #
# ( )( )( )( )( )( )( )( )( )( )( )( )( )( )( )( )( )( )( )( )( )#
# \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/\ #
# (_)(_)(_)(_)(_)(_)(_)(_)(_)(_)(_)(_)(_)(_)(_)(_)(_)(_)(_)(_)(_)#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
## This is where the analysis part of the application begins#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
observeEvent(input$user_data,{#
   if(input$user_data=="none"){#
        mapped_probes<<-NULL#
        eset<<-NULL#
        de_choices<<-NULL#
        sig_genes_lfc<<-NULL#
    }else{#
        withProgress(message="Dataset loading",value=0.4,{load("../2018-04-13_app_data.rda",envir=.GlobalEnv)})#
    }#
})#
#
# Load genes tab ------------------------------------------------------------------------------#
#
  geneList = reactive({#
    if (is.null(input$genelist) && is.null(input$gene)) {#
      return(NULL)#
    }#
    genes = c()#
#
    if (!is.null(input$genelist)) {#
      for (gene in input$genelist) {#
        genes = c(genes, gene_lists[[gene]])#
      }#
    }#
#
    if (!is.null(input$gene)) {#
      genes = c(genes, input$gene)  #
    }#
    return(unname(genes))#
  })#
  # gene list UI#
  output$geneListsUI = renderUI({#
    checkboxGroupInput("genelist", "Select a gene list", #
          choices = names(gene_lists))#
  })#
  # single gene UI#
  output$geneUI = renderUI({#
    withProgress(message="Loading gene lists",value=0.6,{selectInput("gene", "Select gene(s) to show", choices = all_genes, multiple = TRUE)})#
  })#
 summary_gene_data = reactive({#
   validate(#
      need(geneList(), "No genes selected"),#
      need(!is.null(eset),"No dataset selected")#
    )#
   get_expression_summary(eset, geneList())#
 })#
  output$genes = DT::renderDataTable({#
    validate(#
      need(geneList(), "No genes selected")#
    )#
     summary_gene_data() %>% datatable() %>% #
      formatRound(2:4)#
  })#
  # single gene plot#
 output$singleGenePlot = renderPlot({#
  # output$singleGenePlot = renderTable({#
    validate(#
      need(input$genes_rows_selected >= 1, "No genes selected")#
    )#
    rows = as.integer(input$genes_rows_selected)#
    genes_to_plot = summary_gene_data()$Symbol[rows]#
    gene_data = get_gene_data(eset, genes_to_plot)#
    by_gene_violplot(gene_data,tissues=c("photoreceptors","RPE","whole.retina"))#
  })#
#
  # DE choices UI#
  output$de_choices = renderUI({#
    checkboxGroupInput("de", "Choose comparison(s) to show", choices = de_choices, selected = de_choices[1])#
  })#
#
# Expression tab ------------------------------------------------------------------------------#
  observe({#
    toggle("de_choices", anim = TRUE, condition = input$de_state )#
  })#
  genesToPlot = reactive({#
    validate(#
      need(geneList(), "No genes selected")#
    )#
#
    genes = geneList()#
    if(input$de_state) {#
      selected_de = input$de#
      de_lists = lapply(selected_de, function(x) { as.character(get_de_genes(genes, x, sig_genes_lfc)$Symbol) })#
      genes = Reduce(union, de_lists)#
    } #
    return(genes) #
  }) #
# heatmap plot --------------------------------------------------------------------------------#
  output$expressionPlot = renderPlot({#
    validate(#
      need(genesToPlot(), "No genes selected"),#
      need(input$tissues, "No tissues selected")#
    )#
    selected_tissues = input$tissues#
    sub_eset = eset[, eset$tissue %in% selected_tissues]#
    genes = gene2probe(genesToPlot(), mapped_probes)#
    gene_heatmap(sub_eset, genes, scale = "row",#
                  probe_level = input$hm_probes,#
                  gsm_show = input$hm_gsm,#
                  show_rownames = input$hm_rownames,#
                  cluster_rows = input$hm_row_cluster,#
                  cluster_cols = input$hm_col_cluster,#
                  border_color = NA)#
  })#
  output$heatmap_ui = renderUI({#
    plotOutput("expressionPlot", height = input$hm_height, width = input$hm_width)#
  })#
#
# Overall expression --------------------------------------------------------------------------#
#
  output$overallPlot = renderPlot({#
    validate(#
      need(genesToPlot(), "No genes selected"),#
      need(input$tissues, "No tissues selected")#
    )#
    gene_data = get_gene_data(eset, genesToPlot())#
    overall_expression_boxplot(gene_data, tissues = input$tissues)#
  })#
# By gene boxplots ----------------------------------------------------------------------------#
#
  output$byGenePlot = renderPlot({#
    validate(#
      need(genesToPlot(), "No genes selected"),#
      need(input$tissues, "No tissues selected")#
    )#
    gene_data = get_gene_data(eset, genesToPlot())#
    by_gene_boxplot(gene_data, tissues = input$tissues)#
  })#
  plsdaData = reactive({#
    selected_tissues = input$pls_tissues#
    if(length(selected_tissues) < 2) {#
      return(NULL)#
    }#
    sub_eset = eset[, eset$tissue %in% selected_tissues]#
    genes = gene2probe(geneList(), mapped_probes)#
    probe = input$pls_probe#
    #ncomp = input$pls_ncomp#
    get_plsda(sub_eset, genes, probe) #
  })#
#
# PCA plot ----------------------------------------------------------------------------#
  output$indPlot = renderPlot({#
    validate(#
      need(plsdaData(), "No PLS-DA to plot"),#
      need(length(input$pls_tissues) >= 2, "Please select at least two tissues")#
    )#
    plotIndiv(plsdaData()$result, ind.names = FALSE, group = plsdaData()$tissue_grps, pch = 16, #
              col.per.group = brewer.pal(3, "Set1")[1:length(input$pls_tissues)], legend = TRUE, cex = 2, ellipse=TRUE)#
  })#
#
# Correlation Circle plot ----------------------------------------------------------------------------  #
  output$varPlot = renderPlot({#
     validate(#
      need(plsdaData(), "No PLS-DA to plot")#
    )#
#
    plotVar(plsdaData()$result, var.names = list(plsdaData()$varNames), cex = 3,overlap=FALSE)#
  })#
#
  output$numGenesUI = renderUI({#
    numericInput("pls_num_genes", "Select number of genes to show contributions for", #
                 value = 10, min = 1, max = length(geneList()), step = 1)#
  })#
# Loadings plot ----------------------------------------------------------------------------#
  output$contribPlot = renderPlot({#
    validate(#
      need(plsdaData(), "No PLS-DA to plot"),#
      need(input$pls_num_genes, "")#
    )#
    grps = plsdaData()$result$names$Y#
    cols = brewer.pal(3, "Set1")[1:length(grps)]#
    ndisplay = input$pls_num_genes#
    comp = as.integer(input$pls_ncomp)#
    plotLoadings(plsdaData()$result, name.var = plsdaData()$varNames, ndisplay = ndisplay,#
                comp = comp, legend.color = c(1:2))#
  })#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$  #
  ## Kill shinyApp when session closes#
  session$onSessionEnded(stopApp)#
#
}
test<-function(){shinyApp(ui,server)}
test()
library(GEOmetadb)#
library(GEOquery)#
library(affy)#
#
library(limma)#
library(annotate)#
library(pheatmap)#
library(mixOmics)#
library(cowplot)
library(GEOmetadb)#
library(GEOquery)#
library(affy)#
#
library(limma)#
library(annotate)#
library(pheatmap)#
library(mixOmics)#
library(cowplot)
server <- function(input, output, session) {#
#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
  ## Set up colour environment#
  catCol <- brewer.pal(3, "Set1")#
  rowCol <-desat(catCol)#
  # groups <- c(group1,group2,group3) ## Use these in all following code! They should have a "name" variable for user-assigned names 2018-12-10#
  groups<-c("photoreceptors","RPE","whole.retina") ## what is has to be for the moment#
  userID <- NULL#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
  ## Search functions#
  Totalchar <- eventReactive(input$Search, {nchar(input$Key)})#
  Commas <- eventReactive(input$Search, {which(strsplit(input$Key, "")[[1]]==",")})#
  Ncommas <- eventReactive(input$Search, {length(Commas())})#
  Commasstart <- eventReactive(input$Search, {Commas() + 1})#
  Commasend <- eventReactive(input$Search, {Commas() - 1})#
  Searchterms <- eventReactive(input$Search, {#
    substring(input$Key, c(1, Commasstart()), c(Commasend(), Totalchar()))#
  })#
  filtered_gse <- eventReactive(input$Search, {#
      if(input$gplSelection=='human'){#
          dplyr::filter(gseGPL570, str_detect(gseGPL570$title, Searchterms()))#
      } else {#
          dplyr::filter(gseGPL1261, str_detect(gseGPL1261$summary, Searchterms()))#
      }#
  })#
#
  output$filteredgse <- DT::renderDataTable({#
          filtered_gse()}, options=list(searching=TRUE, pageLength=50, scrollY='60vh', columnDefs=list(list(#
              targets = c(8,9,12),#
              render = JS(#
                  "function(data, type, row, meta) {",#
                      "return type === 'display' && typeof data === 'string' && data.length > 100 ?",#
                      "'<span title=\"' + data + '\">' + data.substr(0, 100) + '...</span>' : data;",#
                      "}") #
                      )))) ## typeof data needs to be a string, as a "NA" converted to JS "NULL" breaks things#
#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
### 2018-10-28 Disable platform selection to get it working with mice#
# shinyjs::disable("gplSelection")#
#
### 2018-12-10 The Download CEL button was also disabled once both the whole application was integrated. I'm planning on fixing this today to enable a PDF and RDA of the assigned categories, CEL can be downloaded and annotated at a later date#
# shinyjs::disable("downloadCEL")#
#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
  ## Collect samples to use (GSE - GSM)#
  ### List of the GSM associated with the selected GSE#
    gse_to_keep <- eventReactive(input$getGSM, {#
    filtered_gse()[input$filteredgse_rows_selected,]#
  })#
  ### Use GSE to load GSM from the prefiltered lists#
  gsm_annotated <- eventReactive(input$getGSM, {#
      withProgress(message='Collecting GSM',{#
      if(input$gplSelection=='human'){#
          dplyr::filter(gsmGPL570,series_id %in% gse_to_keep()$gse)#
      } else {#
          dplyr::filter(gsmGPL1261,series_id %in% gse_to_keep()$gse)#
      }#
      })#
  })#
#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
#
  ## Assign categories to each sample (GSM)#
  output$gsm_table <- DT::renderDataTable({#
#
       if(input$Assign==0){#
          return (datatable(gsm_annotated()[,c(-5:-7,-11,-12,-14:-26,-28:-32)],options=list(searching=TRUE, pageLength=50, scrollY='60vh',## 2018-12-10 Pick which columns are necessary ^#
              columnDefs=list(list(#
              targets = "_all",#
              render = JS(#
                  "function(data, type, row, meta) {",#
                      "return type === 'display' && typeof data === 'string' && data.length > 100 ?",#
                      "'<span title=\"' + data + '\">' + data.substr(0, 100) + '...</span>' : data;",#
                      "}") #
                      )))))#
       } else {#
          return (datatable(samples$df[,c(-5:-7,-11,-12,-14:-26,-28:-32)],options=list(searching=TRUE, pageLength=50, scrollY='60vh',#
              columnDefs=list(list(#
              targets = "_all",#
              render = JS(#
                  "function(data, type, row, meta) {",#
                      "return type === 'display' && typeof data === 'string' && data.length > 100 ?",#
                      "'<span title=\"' + data + '\">' + data.substr(0, 100) + '...</span>' : data;",#
                      "}") #
                      ))))%>% formatStyle('category',target="row",backgroundColor=styleEqual(c(input$cat1,input$cat2,input$cat3),c(rowCol[1],rowCol[2],rowCol[3]))))#
       }#
  })#
  proxy.gsm = dataTableProxy('gsm_table')#
  observeEvent(input$Assign,{#
      proxy.gsm %>% selectRows(NULL)#
  }) #
  ## UI output#
#
    output$categorySelect <- renderUI(#
      fluidRow(#
        column(12,#
               selectInput("selection", "Select a Category",#
                           c("category1" <- {input$cat1},#
                             "category2" <- {input$cat2},#
                             "category3" <- {input$cat3},#
                             "category4" <- "Not included"))#
        )#
      )     ### 2018-12-10 I'd like to have a button to add category 3#
    )#
#
  ## Assign categories#
  samples <- reactiveValues()#
  samples$df <- data.frame()#
  observeEvent(input$Assign, {#
      if (input$Assign == 1) {#
        gsm_selected <- gsm_annotated()#
        gsm_selected$category <- rep("Not yet assigned", nrow(gsm_selected))#
        gsm_selected[input$gsm_table_rows_selected,"category"] <- input$selection#
        samples$df <<- gsm_selected#
      }#
      else#
      {#
        samples$df[input$gsm_table_rows_selected,"category"] <<- input$selection#
      }#
  })      #
  # ^ don't love this... would like to have the category set without a button click (maybe change to this tab), but it's working for the moment#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
#
## Finished table, to ultimately lead to CEL download#
#
  finishedtable <- eventReactive(input$Assign, {#
    dplyr::filter(samples$df, category %in% c(input$cat1, input$cat2, input$cat3))#
  })#
  output$finishedtable <- DT::renderDataTable({datatable(finishedtable()[,c(2,3,4,10,31,32,33)],#
      options=list(searching=FALSE,pageLength=100, scrollY='20vh')) %>%#
      formatStyle('category',target="row",#
      backgroundColor=styleEqual(c(input$cat1,input$cat2,input$cat3),c(rowCol[1],rowCol[2],rowCol[3]))#
  )})#
rv <- reactiveValues(download_flag = 0)#
#
  # proxy.finishedtable = dataTableProxy('finishedtable')#
  output$report <- downloadHandler(#
      filename = paste(input$downloadId,userID,"GSM_report.csv",sep="_"),#
      content = function(file){#
          write.csv(finishedtable(),file)#
#           tempReport <- file.path(tempdir(),"report.Rmd")#
#           file.copy("report.Rmd",tempReport,overwrite=TRUE)#
#           params <- list(annotatedGSM = finishedtable())#
##
#           rmarkdown::render(tempReport,output_file = file,#
#               params = params,#
#               envir = new.env(parent=globalenv())#
#               )#
rv$download_flag <- rv$download_flag + 1#
      })#
observeEvent(input$downloadCEL, {#
    showModal(modalDialog(title="Important! Downloading raw .CEL files from the NCBI server.","Jan 11th, 2019: As I finish working out the bugs in converting these files to the analyzed output, the downloading has been disabled. However, all annotations will be saved and processed (Jan 12-13) to be made available for analysis. Please click below to download a record of your submission.",#
    footer = tagList(#
        modalButton("Cancel"),#
        downloadButton("report","Download submission record"))))      #
  })#
  observeEvent(rv$download_flag, {#
      removeModal()#
   })#
  observeEvent(input$downloadCEL, {#
      withProgress(#
          message = "Downloading and processing GSM",#
          {userID<<-processData(finishedtable(),input$comments)})#
  })#
#
#  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  #
# ( )( )( )( )( )( )( )( )( )( )( )( )( )( )( )( )( )( )( )( )( )#
# \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/ \/\ #
# (_)(_)(_)(_)(_)(_)(_)(_)(_)(_)(_)(_)(_)(_)(_)(_)(_)(_)(_)(_)(_)#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
## This is where the analysis part of the application begins#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
observeEvent(input$user_data,{#
   if(input$user_data=="none"){#
        mapped_probes<<-NULL#
        eset<<-NULL#
        de_choices<<-NULL#
        sig_genes_lfc<<-NULL#
    }else{#
        withProgress(message="Dataset loading",value=0.4,{load("../2018-04-13_app_data.rda",envir=.GlobalEnv)})#
    }#
})#
#
# Load genes tab ------------------------------------------------------------------------------#
#
  geneList = reactive({#
    if (is.null(input$genelist) && is.null(input$gene)) {#
      return(NULL)#
    }#
    genes = c()#
#
    if (!is.null(input$genelist)) {#
      for (gene in input$genelist) {#
        genes = c(genes, gene_lists[[gene]])#
      }#
    }#
#
    if (!is.null(input$gene)) {#
      genes = c(genes, input$gene)  #
    }#
    return(unname(genes))#
  })#
  # gene list UI#
  output$geneListsUI = renderUI({#
    checkboxGroupInput("genelist", "Select a gene list", #
          choices = names(gene_lists))#
  })#
  # single gene UI#
  output$geneUI = renderUI({#
    withProgress(message="Loading gene lists",value=0.6,{selectInput("gene", "Select gene(s) to show", choices = all_genes, multiple = TRUE)})#
  })#
 summary_gene_data = reactive({#
   validate(#
      need(geneList(), "No genes selected"),#
      need(!is.null(eset),"No dataset selected")#
    )#
   get_expression_summary(eset, geneList())#
 })#
  output$genes = DT::renderDataTable({#
    validate(#
      need(geneList(), "No genes selected")#
    )#
     summary_gene_data() %>% datatable() %>% #
      formatRound(2:4)#
  })#
  # single gene plot#
 output$singleGenePlot = renderPlot({#
  # output$singleGenePlot = renderTable({#
    validate(#
      need(input$genes_rows_selected >= 1, "No genes selected")#
    )#
    rows = as.integer(input$genes_rows_selected)#
    genes_to_plot = summary_gene_data()$Symbol[rows]#
    gene_data = get_gene_data(eset, genes_to_plot)#
    by_gene_violplot(gene_data,tissues=c("photoreceptors","RPE","whole.retina"))#
  })#
#
  # DE choices UI#
  output$de_choices = renderUI({#
    checkboxGroupInput("de", "Choose comparison(s) to show", choices = de_choices, selected = de_choices[1])#
  })#
#
# Expression tab ------------------------------------------------------------------------------#
  observe({#
    toggle("de_choices", anim = TRUE, condition = input$de_state )#
  })#
  genesToPlot = reactive({#
    validate(#
      need(geneList(), "No genes selected")#
    )#
#
    genes = geneList()#
    if(input$de_state) {#
      selected_de = input$de#
      de_lists = lapply(selected_de, function(x) { as.character(get_de_genes(genes, x, sig_genes_lfc)$Symbol) })#
      genes = Reduce(union, de_lists)#
    } #
    return(genes) #
  }) #
# heatmap plot --------------------------------------------------------------------------------#
  output$expressionPlot = renderPlot({#
    validate(#
      need(genesToPlot(), "No genes selected"),#
      need(input$tissues, "No tissues selected")#
    )#
    selected_tissues = input$tissues#
    sub_eset = eset[, eset$tissue %in% selected_tissues]#
    genes = gene2probe(genesToPlot(), mapped_probes)#
    gene_heatmap(sub_eset, genes, scale = "row",#
                  probe_level = input$hm_probes,#
                  gsm_show = input$hm_gsm,#
                  show_rownames = input$hm_rownames,#
                  cluster_rows = input$hm_row_cluster,#
                  cluster_cols = input$hm_col_cluster,#
                  border_color = NA)#
  })#
  output$heatmap_ui = renderUI({#
    plotOutput("expressionPlot", height = input$hm_height, width = input$hm_width)#
  })#
#
# Overall expression --------------------------------------------------------------------------#
#
  output$overallPlot = renderPlot({#
    validate(#
      need(genesToPlot(), "No genes selected"),#
      need(input$tissues, "No tissues selected")#
    )#
    gene_data = get_gene_data(eset, genesToPlot())#
    overall_expression_boxplot(gene_data, tissues = input$tissues)#
  })#
# By gene boxplots ----------------------------------------------------------------------------#
#
  output$byGenePlot = renderPlot({#
    validate(#
      need(genesToPlot(), "No genes selected"),#
      need(input$tissues, "No tissues selected")#
    )#
    gene_data = get_gene_data(eset, genesToPlot())#
    by_gene_boxplot(gene_data, tissues = input$tissues)#
  })#
  plsdaData = reactive({#
    selected_tissues = input$pls_tissues#
    if(length(selected_tissues) < 2) {#
      return(NULL)#
    }#
    sub_eset = eset[, eset$tissue %in% selected_tissues]#
    genes = gene2probe(geneList(), mapped_probes)#
    probe = input$pls_probe#
    #ncomp = input$pls_ncomp#
    get_plsda(sub_eset, genes, probe) #
  })#
#
# PCA plot ----------------------------------------------------------------------------#
  output$indPlot = renderPlot({#
    validate(#
      need(plsdaData(), "No PLS-DA to plot"),#
      need(length(input$pls_tissues) >= 2, "Please select at least two tissues")#
    )#
    plotIndiv(plsdaData()$result, ind.names = FALSE, group = plsdaData()$tissue_grps, pch = 16, #
              col.per.group = brewer.pal(3, "Set1")[1:length(input$pls_tissues)], legend = TRUE, cex = 2, ellipse=TRUE)#
  })#
#
# Correlation Circle plot ----------------------------------------------------------------------------  #
  output$varPlot = renderPlot({#
     validate(#
      need(plsdaData(), "No PLS-DA to plot")#
    )#
#
    plotVar(plsdaData()$result, var.names = list(plsdaData()$varNames), cex = 3,overlap=FALSE)#
  })#
#
  output$numGenesUI = renderUI({#
    numericInput("pls_num_genes", "Select number of genes to show contributions for", #
                 value = 10, min = 1, max = length(geneList()), step = 1)#
  })#
# Loadings plot ----------------------------------------------------------------------------#
  output$contribPlot = renderPlot({#
    validate(#
      need(plsdaData(), "No PLS-DA to plot"),#
      need(input$pls_num_genes, "")#
    )#
    grps = plsdaData()$result$names$Y#
    cols = brewer.pal(3, "Set1")[1:length(grps)]#
    ndisplay = input$pls_num_genes#
    comp = as.integer(input$pls_ncomp)#
    plotLoadings(plsdaData()$result, name.var = plsdaData()$varNames, ndisplay = ndisplay,#
                comp = comp, legend.color = c(1:2))#
  })#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$  #
  ## Kill shinyApp when session closes#
  session$onSessionEnded(stopApp)#
#
}
test
test()
source('~/Desktop/shiny-server/receptoR_final/functions.R')
test()
ui <- fluidPage(#
tags$head(tags$script(HTML(jscode))),#
# tags$script(HTML("$('body').addClass('fixed);")),#
shinyjs::useShinyjs(),#
navbarPage("receptoR",#
    theme = shinytheme("spacelab"),#
#
# Start page  ------------------------------------------------------------------------------#
#
    tabPanel("Start here",#
       h3("Welcome to receptoR!"),#
       hr(),#
       sidebarLayout(#
           sidebarPanel(#
               h4("receptoR is an automated hypothesis generation software to identify cellular signaling pathways from transcriptomics data."),#
               p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky. Andouille t-bone biltong bacon beef ribs boudin frankfurter ham hock pork loin capicola tail ground round brisket tenderloin tri-tip. Ham pork bacon strip steak, ball tip leberkas meatball capicola pork loin. Ribeye turducken tri-tip jowl filet mignon drumstick shank corned beef prosciutto spare ribs sausage leberkas cupim burgdoggen bacon.",style="color:#D8BFD8"),#
               hr(),#
               p("(C) 2019 Derek Toms")),#
           mainPanel(#
               p("This software allows you to browse and analyze public transcriptomics data. To proceed, click \'Search for datasets\', above"),#
               img(src="overview.png"),#
               p("Spicy jalapeno bacon ipsum dolor amet brisket ribeye tri-tip tail meatloaf ground round salami fatback. Ball tip flank pork turkey prosciutto. Venison burgdoggen beef pork hamburger tongue shankle rump frankfurter kielbasa pastrami pork belly. T-bone fatback venison tenderloin salami biltong turkey chuck.",style="color:#D8BFD8"),#
#
p("Turkey tenderloin buffalo frankfurter, strip steak capicola filet mignon ribeye cow t-bone biltong. Tri-tip hamburger ham hock, shank landjaeger kielbasa pork loin spare ribs pastrami salami shoulder alcatra. Biltong tail brisket, turkey beef ribs hamburger prosciutto bacon tenderloin pancetta shank venison picanha cupim. Frankfurter porchetta turkey biltong corned beef, burgdoggen prosciutto jerky tail. Capicola beef ribs burgdoggen pancetta, frankfurter leberkas pig. Filet mignon jerky ground round cow burgdoggen, shoulder boudin ham hock pancetta.",style="color:#D8BFD8"),#
#
p("Sirloin salami strip steak burgdoggen pork chop ribeye, pastrami fatback short ribs corned beef. Beef shank shoulder, leberkas pancetta ground round jowl tenderloin ribeye hamburger shankle flank. Strip steak short loin kevin pork belly meatball swine sausage ham jowl pig tongue venison fatback t-bone beef. Spare ribs shoulder ham hock strip steak pastrami.",style="color:#D8BFD8")#
               ))#
        ),#
#
# Search for GSE  ------------------------------------------------------------------------------#
#
    tabPanel("Search for datasets",#
       h3("Organize publicly available expression data"),#
       hr(),#
       sidebarLayout(#
       sidebarPanel(#
           # style = "position:fixed;width:30%",#
           h4("Search for datasets"),#
           p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
           hr(),#
           conditionalPanel(condition="input.searchpanel==1",#
           h4("Find expression data from publicly available datasets to begin defining your own experiment."),#
           p("Begin by searching for ",span("G",style="font-weight:bold"),"EO data ",span("se",style="font-weight:bold"),"ries (GSE) containing expression data for your cell or tissue type of interest."),#
           radioButtons("gplSelection", "Choose species:", choices = c("Mouse (GPL1261)" = "mouse", "Human (GPL570)" = "human")),#
           tagAppendAttributes(textInput("Key", "Enter search terms, separated by commas", value = ""),`data-proxy-click` = "Search"),#
           actionButton("Search", "Search"),#
           hr(),#
           p("When you have selected the appropriate datasets, click \'Retrieve GSM\' to collect sample information and then click on the \'Assign samples\' tab above."),#
           actionButton("getGSM", "Retrieve GSM")),#
           conditionalPanel(condition="input.searchpanel==2",#
           h4("Define the categories that you wish to assign each sample (GSM) for comparison."),#
           icon("circle"),textInput("cat1", label=NULL, placeholder="Category 1"),#
           textInput("cat2", label=NULL, placeholder="Category 2"),#
           textInput("cat3", label=NULL, placeholder="Category 3 (optional)"),#
           ### https://www.aridhia.com/blog/the-sky-is-not-the-limit-embedding-raw-html-and-javascript-to-create-dynamic-ui-elements-in-shiny-applications/   #
           ### ^ this should help with dynamically adding/subtracting categories#
           hr(),#
           h4("Highlight samples, then click to Assign them to the specificed category."),#
           uiOutput("categorySelect"),#
           actionButton("Assign", "Assign GSM to Category")),#
           conditionalPanel(condition="input.searchpanel==3",#
               h4("Thank you for using receptoR!"),#
               p(" Please enter your name and any comments/bugs/questions/requests in the box below, then click the \'Download and Process\' button to retrieve the raw files from the NCBI server and process them based on their assigned categories."),#
               textAreaInput("comments","Comments",width="100%",height="100px",resize="vertical"),#
               textInput("downloadId","Download ID"),#
               actionButton("downloadCEL","Download and Process"))#
       ),#
       mainPanel(#
           # Search GSE based on species#
        tabsetPanel(#
        tabPanel("Search", value=1,#
            h4("GEO data series (\'GSE\') matching search query"), # return search here!#
            DT::dataTableOutput("filteredgse")#
        ),#
        # Assign samples to categories ------------------------------------------------------#
        tabPanel("Assign", value=2,#
            h4("From the selected series' (GSE) assign individual samples (GSM) to categories of your choosing."),#
            DT::dataTableOutput("gsm_table")#
        ),#
        # This will be where the CEL files are downloaded (confirmation, etc) ------------#
        tabPanel("Process", value=3,#
        h4("Please confirm samples are properly categorized."),#
        p("Expression samples annotated:"),#
                DT::dataTableOutput("finishedtable")#
        ),#
        id = "searchpanel"#
        )#
        )#
        )#
    ),#
    # Load Gene Expression Data tab -------------------------------------#
    tabPanel("Load expression data",#
        h3("Pick from user-defined experiments to perform analyses"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Load expression data"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            hr(),#
            selectInput(inputId="user_data",label="Select user data for analysis",choices=c("none"="none","Photoreceptors v RPE"="2018-04-13_app_data.rda"),selected="none"),#
            br(),#
            uiOutput("geneListsUI"),#
            br(),#
            uiOutput("geneUI")#
        ),#
        mainPanel(#
            tabsetPanel(type="tabs",selected="Gene-level expression",#
            tabPanel("Experimental design",h4("Category definitions and contrasts"),p("Coming soon!")),#
            tabPanel("Gene-level expression",#
                fluidRow(#
                column(6, h4("Average Expression"), DT::dataTableOutput("genes")),#
                column(6, h4("Gene Boxplot"), plotOutput("singleGenePlot"))#
            )))#
        )#
        )#
    ),#
    # Magnitude expression tab ------------------------------------------------------------------------------#
#
    tabPanel("Absolute expression",#
        h3("Compare genes based on absolute expression"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Absolute expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            # style = "position:fixed",#
            checkboxGroupInput("tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            br(),#
            checkboxInput("de_state", label = "Show differential expressed only", value = TRUE),#
            uiOutput("de_choices"),#
            br(),#
            conditionalPanel(condition="input.absexpanel==1",#
                h3("Heatmap parameters"),#
                checkboxInput("hm_probes", "Show probe-level", value = FALSE),#
                checkboxInput("hm_gsm", "Show GSM (column names)", value = TRUE),#
                checkboxInput("hm_rownames", "Show rownames", value = TRUE),#
                checkboxInput("hm_col_cluster", "Cluster columns", value = TRUE),#
                checkboxInput("hm_row_cluster", "Cluster rows", value = TRUE),#
                h4("Select plot dimensions (px)"),#
                numericInput("hm_width", "Width", value = 900, min = 100, max = 2400, step = 10),#
                numericInput("hm_height", "Height", value = 1200, min = 100, max = 2400, step = 10))#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("Heatmap", value=1, uiOutput("heatmap_ui")),#
            tabPanel("Summary boxplots", plotOutput("overallPlot", height = 600)),#
            tabPanel("By-gene boxplots", plotOutput("byGenePlot", height = 600)),#
            id = "absexpanel"#
        )#
        )#
        )#
    ),#
#
    # Mixomics tab ---------------------------------------------#
    tabPanel("Relative expression",#
        h3("Compare genes based on relative expression between experimental groups"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Relative expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            checkboxGroupInput("pls_tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            checkboxInput("pls_probe", "Perform PLS-DA at probe level", value = FALSE),#
            br(),#
            h4("Gene contribution plot"),#
            uiOutput("numGenesUI"),#
            radioButtons("pls_ncomp", "Select component for gene contribution plot", choices = c(1,2)),#
            br()#
            # downloadButton("pls_download", "Download gene contribution data")#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("PCA Analysis", plotOutput("indPlot", height = 800)),#
            tabPanel("Circle variance", plotOutput("varPlot", height = 800)),#
            tabPanel("Loadings plot", plotOutput("contribPlot", height = 800))#
        ),#
        position = c("right","left"),#
        fluid = TRUE#
        )#
        )#
    )#
)#
)
test()
ui <- fluidPage(#
tags$head(tags$script(HTML(jscode))),#
# tags$script(HTML("$('body').addClass('fixed);")),#
shinyjs::useShinyjs(),#
navbarPage("receptoR",#
    theme = shinytheme("spacelab"),#
#
# Start page  ------------------------------------------------------------------------------#
#
    tabPanel("Start here",#
       h3("Welcome to receptoR!"),#
       hr(),#
       sidebarLayout(#
           sidebarPanel(#
               h4("receptoR is an automated hypothesis generation software to identify cellular signaling pathways from transcriptomics data."),#
               p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky. Andouille t-bone biltong bacon beef ribs boudin frankfurter ham hock pork loin capicola tail ground round brisket tenderloin tri-tip. Ham pork bacon strip steak, ball tip leberkas meatball capicola pork loin. Ribeye turducken tri-tip jowl filet mignon drumstick shank corned beef prosciutto spare ribs sausage leberkas cupim burgdoggen bacon.",style="color:#D8BFD8"),#
               hr(),#
               p("(C) 2019 Derek Toms")),#
           mainPanel(#
               p("This software allows you to browse and analyze public transcriptomics data. To proceed, click \'Search for datasets\', above"),#
               img(src="overview.png"),#
               p("Spicy jalapeno bacon ipsum dolor amet brisket ribeye tri-tip tail meatloaf ground round salami fatback. Ball tip flank pork turkey prosciutto. Venison burgdoggen beef pork hamburger tongue shankle rump frankfurter kielbasa pastrami pork belly. T-bone fatback venison tenderloin salami biltong turkey chuck.",style="color:#D8BFD8"),#
#
p("Turkey tenderloin buffalo frankfurter, strip steak capicola filet mignon ribeye cow t-bone biltong. Tri-tip hamburger ham hock, shank landjaeger kielbasa pork loin spare ribs pastrami salami shoulder alcatra. Biltong tail brisket, turkey beef ribs hamburger prosciutto bacon tenderloin pancetta shank venison picanha cupim. Frankfurter porchetta turkey biltong corned beef, burgdoggen prosciutto jerky tail. Capicola beef ribs burgdoggen pancetta, frankfurter leberkas pig. Filet mignon jerky ground round cow burgdoggen, shoulder boudin ham hock pancetta.",style="color:#D8BFD8"),#
#
p("Sirloin salami strip steak burgdoggen pork chop ribeye, pastrami fatback short ribs corned beef. Beef shank shoulder, leberkas pancetta ground round jowl tenderloin ribeye hamburger shankle flank. Strip steak short loin kevin pork belly meatball swine sausage ham jowl pig tongue venison fatback t-bone beef. Spare ribs shoulder ham hock strip steak pastrami.",style="color:#D8BFD8")#
               ))#
        ),#
#
# Search for GSE  ------------------------------------------------------------------------------#
#
    tabPanel("Search for datasets",#
       h3("Organize publicly available expression data"),#
       hr(),#
       sidebarLayout(#
       sidebarPanel(#
           # style = "position:fixed;width:30%",#
           h4("Search for datasets"),#
           p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
           hr(),#
           conditionalPanel(condition="input.searchpanel==1",#
           h4("Find expression data from publicly available datasets to begin defining your own experiment."),#
           p("Begin by searching for ",span("G",style="font-weight:bold"),"EO data ",span("se",style="font-weight:bold"),"ries (GSE) containing expression data for your cell or tissue type of interest."),#
           radioButtons("gplSelection", "Choose species:", choices = c("Mouse (GPL1261)" = "mouse", "Human (GPL570)" = "human")),#
           tagAppendAttributes(textInput("Key", "Enter search terms, separated by commas", value = ""),`data-proxy-click` = "Search"),#
           actionButton("Search", "Search"),#
           hr(),#
           p("When you have selected the appropriate datasets, click \'Retrieve GSM\' to collect sample information and then click on the \'Assign samples\' tab above."),#
           actionButton("getGSM", "Retrieve GSM")),#
           conditionalPanel(condition="input.searchpanel==2",#
           h4("Define the categories that you wish to assign each sample (GSM) for comparison."),#
           fluidRow(column(1,icon("circle")),column(11,textInput("cat1", label=NULL, placeholder="Category 1")),#
           textInput("cat2", label=NULL, placeholder="Category 2"),#
           textInput("cat3", label=NULL, placeholder="Category 3 (optional)"),#
           ### https://www.aridhia.com/blog/the-sky-is-not-the-limit-embedding-raw-html-and-javascript-to-create-dynamic-ui-elements-in-shiny-applications/   #
           ### ^ this should help with dynamically adding/subtracting categories#
           hr(),#
           h4("Highlight samples, then click to Assign them to the specificed category."),#
           uiOutput("categorySelect"),#
           actionButton("Assign", "Assign GSM to Category")),#
           conditionalPanel(condition="input.searchpanel==3",#
               h4("Thank you for using receptoR!"),#
               p(" Please enter your name and any comments/bugs/questions/requests in the box below, then click the \'Download and Process\' button to retrieve the raw files from the NCBI server and process them based on their assigned categories."),#
               textAreaInput("comments","Comments",width="100%",height="100px",resize="vertical"),#
               textInput("downloadId","Download ID"),#
               actionButton("downloadCEL","Download and Process"))#
       ),#
       mainPanel(#
           # Search GSE based on species#
        tabsetPanel(#
        tabPanel("Search", value=1,#
            h4("GEO data series (\'GSE\') matching search query"), # return search here!#
            DT::dataTableOutput("filteredgse")#
        ),#
        # Assign samples to categories ------------------------------------------------------#
        tabPanel("Assign", value=2,#
            h4("From the selected series' (GSE) assign individual samples (GSM) to categories of your choosing."),#
            DT::dataTableOutput("gsm_table")#
        ),#
        # This will be where the CEL files are downloaded (confirmation, etc) ------------#
        tabPanel("Process", value=3,#
        h4("Please confirm samples are properly categorized."),#
        p("Expression samples annotated:"),#
                DT::dataTableOutput("finishedtable")#
        ),#
        id = "searchpanel"#
        )#
        )#
        )#
    ),#
    # Load Gene Expression Data tab -------------------------------------#
    tabPanel("Load expression data",#
        h3("Pick from user-defined experiments to perform analyses"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Load expression data"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            hr(),#
            selectInput(inputId="user_data",label="Select user data for analysis",choices=c("none"="none","Photoreceptors v RPE"="2018-04-13_app_data.rda"),selected="none"),#
            br(),#
            uiOutput("geneListsUI"),#
            br(),#
            uiOutput("geneUI")#
        ),#
        mainPanel(#
            tabsetPanel(type="tabs",selected="Gene-level expression",#
            tabPanel("Experimental design",h4("Category definitions and contrasts"),p("Coming soon!")),#
            tabPanel("Gene-level expression",#
                fluidRow(#
                column(6, h4("Average Expression"), DT::dataTableOutput("genes")),#
                column(6, h4("Gene Boxplot"), plotOutput("singleGenePlot"))#
            )))#
        )#
        )#
    ),#
    # Magnitude expression tab ------------------------------------------------------------------------------#
#
    tabPanel("Absolute expression",#
        h3("Compare genes based on absolute expression"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Absolute expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            # style = "position:fixed",#
            checkboxGroupInput("tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            br(),#
            checkboxInput("de_state", label = "Show differential expressed only", value = TRUE),#
            uiOutput("de_choices"),#
            br(),#
            conditionalPanel(condition="input.absexpanel==1",#
                h3("Heatmap parameters"),#
                checkboxInput("hm_probes", "Show probe-level", value = FALSE),#
                checkboxInput("hm_gsm", "Show GSM (column names)", value = TRUE),#
                checkboxInput("hm_rownames", "Show rownames", value = TRUE),#
                checkboxInput("hm_col_cluster", "Cluster columns", value = TRUE),#
                checkboxInput("hm_row_cluster", "Cluster rows", value = TRUE),#
                h4("Select plot dimensions (px)"),#
                numericInput("hm_width", "Width", value = 900, min = 100, max = 2400, step = 10),#
                numericInput("hm_height", "Height", value = 1200, min = 100, max = 2400, step = 10))#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("Heatmap", value=1, uiOutput("heatmap_ui")),#
            tabPanel("Summary boxplots", plotOutput("overallPlot", height = 600)),#
            tabPanel("By-gene boxplots", plotOutput("byGenePlot", height = 600)),#
            id = "absexpanel"#
        )#
        )#
        )#
    ),#
#
    # Mixomics tab ---------------------------------------------#
    tabPanel("Relative expression",#
        h3("Compare genes based on relative expression between experimental groups"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Relative expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            checkboxGroupInput("pls_tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            checkboxInput("pls_probe", "Perform PLS-DA at probe level", value = FALSE),#
            br(),#
            h4("Gene contribution plot"),#
            uiOutput("numGenesUI"),#
            radioButtons("pls_ncomp", "Select component for gene contribution plot", choices = c(1,2)),#
            br()#
            # downloadButton("pls_download", "Download gene contribution data")#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("PCA Analysis", plotOutput("indPlot", height = 800)),#
            tabPanel("Circle variance", plotOutput("varPlot", height = 800)),#
            tabPanel("Loadings plot", plotOutput("contribPlot", height = 800))#
        ),#
        position = c("right","left"),#
        fluid = TRUE#
        )#
        )#
    )#
)#
)
ui <- fluidPage(#
tags$head(tags$script(HTML(jscode))),#
# tags$script(HTML("$('body').addClass('fixed);")),#
shinyjs::useShinyjs(),#
navbarPage("receptoR",#
    theme = shinytheme("spacelab"),#
#
# Start page  ------------------------------------------------------------------------------#
#
    tabPanel("Start here",#
       h3("Welcome to receptoR!"),#
       hr(),#
       sidebarLayout(#
           sidebarPanel(#
               h4("receptoR is an automated hypothesis generation software to identify cellular signaling pathways from transcriptomics data."),#
               p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky. Andouille t-bone biltong bacon beef ribs boudin frankfurter ham hock pork loin capicola tail ground round brisket tenderloin tri-tip. Ham pork bacon strip steak, ball tip leberkas meatball capicola pork loin. Ribeye turducken tri-tip jowl filet mignon drumstick shank corned beef prosciutto spare ribs sausage leberkas cupim burgdoggen bacon.",style="color:#D8BFD8"),#
               hr(),#
               p("(C) 2019 Derek Toms")),#
           mainPanel(#
               p("This software allows you to browse and analyze public transcriptomics data. To proceed, click \'Search for datasets\', above"),#
               img(src="overview.png"),#
               p("Spicy jalapeno bacon ipsum dolor amet brisket ribeye tri-tip tail meatloaf ground round salami fatback. Ball tip flank pork turkey prosciutto. Venison burgdoggen beef pork hamburger tongue shankle rump frankfurter kielbasa pastrami pork belly. T-bone fatback venison tenderloin salami biltong turkey chuck.",style="color:#D8BFD8"),#
#
p("Turkey tenderloin buffalo frankfurter, strip steak capicola filet mignon ribeye cow t-bone biltong. Tri-tip hamburger ham hock, shank landjaeger kielbasa pork loin spare ribs pastrami salami shoulder alcatra. Biltong tail brisket, turkey beef ribs hamburger prosciutto bacon tenderloin pancetta shank venison picanha cupim. Frankfurter porchetta turkey biltong corned beef, burgdoggen prosciutto jerky tail. Capicola beef ribs burgdoggen pancetta, frankfurter leberkas pig. Filet mignon jerky ground round cow burgdoggen, shoulder boudin ham hock pancetta.",style="color:#D8BFD8"),#
#
p("Sirloin salami strip steak burgdoggen pork chop ribeye, pastrami fatback short ribs corned beef. Beef shank shoulder, leberkas pancetta ground round jowl tenderloin ribeye hamburger shankle flank. Strip steak short loin kevin pork belly meatball swine sausage ham jowl pig tongue venison fatback t-bone beef. Spare ribs shoulder ham hock strip steak pastrami.",style="color:#D8BFD8")#
               ))#
        ),#
#
# Search for GSE  ------------------------------------------------------------------------------#
#
    tabPanel("Search for datasets",#
       h3("Organize publicly available expression data"),#
       hr(),#
       sidebarLayout(#
       sidebarPanel(#
           # style = "position:fixed;width:30%",#
           h4("Search for datasets"),#
           p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
           hr(),#
           conditionalPanel(condition="input.searchpanel==1",#
           h4("Find expression data from publicly available datasets to begin defining your own experiment."),#
           p("Begin by searching for ",span("G",style="font-weight:bold"),"EO data ",span("se",style="font-weight:bold"),"ries (GSE) containing expression data for your cell or tissue type of interest."),#
           radioButtons("gplSelection", "Choose species:", choices = c("Mouse (GPL1261)" = "mouse", "Human (GPL570)" = "human")),#
           tagAppendAttributes(textInput("Key", "Enter search terms, separated by commas", value = ""),`data-proxy-click` = "Search"),#
           actionButton("Search", "Search"),#
           hr(),#
           p("When you have selected the appropriate datasets, click \'Retrieve GSM\' to collect sample information and then click on the \'Assign samples\' tab above."),#
           actionButton("getGSM", "Retrieve GSM")),#
           conditionalPanel(condition="input.searchpanel==2",#
           h4("Define the categories that you wish to assign each sample (GSM) for comparison."),#
           fluidRow(column(1,icon("circle")),column(11,textInput("cat1", label=NULL, placeholder="Category 1"))),#
           textInput("cat2", label=NULL, placeholder="Category 2"),#
           textInput("cat3", label=NULL, placeholder="Category 3 (optional)"),#
           ### https://www.aridhia.com/blog/the-sky-is-not-the-limit-embedding-raw-html-and-javascript-to-create-dynamic-ui-elements-in-shiny-applications/   #
           ### ^ this should help with dynamically adding/subtracting categories#
           hr(),#
           h4("Highlight samples, then click to Assign them to the specificed category."),#
           uiOutput("categorySelect"),#
           actionButton("Assign", "Assign GSM to Category")),#
           conditionalPanel(condition="input.searchpanel==3",#
               h4("Thank you for using receptoR!"),#
               p(" Please enter your name and any comments/bugs/questions/requests in the box below, then click the \'Download and Process\' button to retrieve the raw files from the NCBI server and process them based on their assigned categories."),#
               textAreaInput("comments","Comments",width="100%",height="100px",resize="vertical"),#
               textInput("downloadId","Download ID"),#
               actionButton("downloadCEL","Download and Process"))#
       ),#
       mainPanel(#
           # Search GSE based on species#
        tabsetPanel(#
        tabPanel("Search", value=1,#
            h4("GEO data series (\'GSE\') matching search query"), # return search here!#
            DT::dataTableOutput("filteredgse")#
        ),#
        # Assign samples to categories ------------------------------------------------------#
        tabPanel("Assign", value=2,#
            h4("From the selected series' (GSE) assign individual samples (GSM) to categories of your choosing."),#
            DT::dataTableOutput("gsm_table")#
        ),#
        # This will be where the CEL files are downloaded (confirmation, etc) ------------#
        tabPanel("Process", value=3,#
        h4("Please confirm samples are properly categorized."),#
        p("Expression samples annotated:"),#
                DT::dataTableOutput("finishedtable")#
        ),#
        id = "searchpanel"#
        )#
        )#
        )#
    ),#
    # Load Gene Expression Data tab -------------------------------------#
    tabPanel("Load expression data",#
        h3("Pick from user-defined experiments to perform analyses"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Load expression data"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            hr(),#
            selectInput(inputId="user_data",label="Select user data for analysis",choices=c("none"="none","Photoreceptors v RPE"="2018-04-13_app_data.rda"),selected="none"),#
            br(),#
            uiOutput("geneListsUI"),#
            br(),#
            uiOutput("geneUI")#
        ),#
        mainPanel(#
            tabsetPanel(type="tabs",selected="Gene-level expression",#
            tabPanel("Experimental design",h4("Category definitions and contrasts"),p("Coming soon!")),#
            tabPanel("Gene-level expression",#
                fluidRow(#
                column(6, h4("Average Expression"), DT::dataTableOutput("genes")),#
                column(6, h4("Gene Boxplot"), plotOutput("singleGenePlot"))#
            )))#
        )#
        )#
    ),#
    # Magnitude expression tab ------------------------------------------------------------------------------#
#
    tabPanel("Absolute expression",#
        h3("Compare genes based on absolute expression"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Absolute expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            # style = "position:fixed",#
            checkboxGroupInput("tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            br(),#
            checkboxInput("de_state", label = "Show differential expressed only", value = TRUE),#
            uiOutput("de_choices"),#
            br(),#
            conditionalPanel(condition="input.absexpanel==1",#
                h3("Heatmap parameters"),#
                checkboxInput("hm_probes", "Show probe-level", value = FALSE),#
                checkboxInput("hm_gsm", "Show GSM (column names)", value = TRUE),#
                checkboxInput("hm_rownames", "Show rownames", value = TRUE),#
                checkboxInput("hm_col_cluster", "Cluster columns", value = TRUE),#
                checkboxInput("hm_row_cluster", "Cluster rows", value = TRUE),#
                h4("Select plot dimensions (px)"),#
                numericInput("hm_width", "Width", value = 900, min = 100, max = 2400, step = 10),#
                numericInput("hm_height", "Height", value = 1200, min = 100, max = 2400, step = 10))#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("Heatmap", value=1, uiOutput("heatmap_ui")),#
            tabPanel("Summary boxplots", plotOutput("overallPlot", height = 600)),#
            tabPanel("By-gene boxplots", plotOutput("byGenePlot", height = 600)),#
            id = "absexpanel"#
        )#
        )#
        )#
    ),#
#
    # Mixomics tab ---------------------------------------------#
    tabPanel("Relative expression",#
        h3("Compare genes based on relative expression between experimental groups"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Relative expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            checkboxGroupInput("pls_tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            checkboxInput("pls_probe", "Perform PLS-DA at probe level", value = FALSE),#
            br(),#
            h4("Gene contribution plot"),#
            uiOutput("numGenesUI"),#
            radioButtons("pls_ncomp", "Select component for gene contribution plot", choices = c(1,2)),#
            br()#
            # downloadButton("pls_download", "Download gene contribution data")#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("PCA Analysis", plotOutput("indPlot", height = 800)),#
            tabPanel("Circle variance", plotOutput("varPlot", height = 800)),#
            tabPanel("Loadings plot", plotOutput("contribPlot", height = 800))#
        ),#
        position = c("right","left"),#
        fluid = TRUE#
        )#
        )#
    )#
)#
)
test()
ui <- fluidPage(#
tags$head(tags$script(HTML(jscode))),#
# tags$script(HTML("$('body').addClass('fixed);")),#
shinyjs::useShinyjs(),#
navbarPage("receptoR",#
    theme = shinytheme("spacelab"),#
#
# Start page  ------------------------------------------------------------------------------#
#
    tabPanel("Start here",#
       h3("Welcome to receptoR!"),#
       hr(),#
       sidebarLayout(#
           sidebarPanel(#
               h4("receptoR is an automated hypothesis generation software to identify cellular signaling pathways from transcriptomics data."),#
               p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky. Andouille t-bone biltong bacon beef ribs boudin frankfurter ham hock pork loin capicola tail ground round brisket tenderloin tri-tip. Ham pork bacon strip steak, ball tip leberkas meatball capicola pork loin. Ribeye turducken tri-tip jowl filet mignon drumstick shank corned beef prosciutto spare ribs sausage leberkas cupim burgdoggen bacon.",style="color:#D8BFD8"),#
               hr(),#
               p("(C) 2019 Derek Toms")),#
           mainPanel(#
               p("This software allows you to browse and analyze public transcriptomics data. To proceed, click \'Search for datasets\', above"),#
               img(src="overview.png"),#
               p("Spicy jalapeno bacon ipsum dolor amet brisket ribeye tri-tip tail meatloaf ground round salami fatback. Ball tip flank pork turkey prosciutto. Venison burgdoggen beef pork hamburger tongue shankle rump frankfurter kielbasa pastrami pork belly. T-bone fatback venison tenderloin salami biltong turkey chuck.",style="color:#D8BFD8"),#
#
p("Turkey tenderloin buffalo frankfurter, strip steak capicola filet mignon ribeye cow t-bone biltong. Tri-tip hamburger ham hock, shank landjaeger kielbasa pork loin spare ribs pastrami salami shoulder alcatra. Biltong tail brisket, turkey beef ribs hamburger prosciutto bacon tenderloin pancetta shank venison picanha cupim. Frankfurter porchetta turkey biltong corned beef, burgdoggen prosciutto jerky tail. Capicola beef ribs burgdoggen pancetta, frankfurter leberkas pig. Filet mignon jerky ground round cow burgdoggen, shoulder boudin ham hock pancetta.",style="color:#D8BFD8"),#
#
p("Sirloin salami strip steak burgdoggen pork chop ribeye, pastrami fatback short ribs corned beef. Beef shank shoulder, leberkas pancetta ground round jowl tenderloin ribeye hamburger shankle flank. Strip steak short loin kevin pork belly meatball swine sausage ham jowl pig tongue venison fatback t-bone beef. Spare ribs shoulder ham hock strip steak pastrami.",style="color:#D8BFD8")#
               ))#
        ),#
#
# Search for GSE  ------------------------------------------------------------------------------#
#
    tabPanel("Search for datasets",#
       h3("Organize publicly available expression data"),#
       hr(),#
       sidebarLayout(#
       sidebarPanel(#
           # style = "position:fixed;width:30%",#
           h4("Search for datasets"),#
           p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
           hr(),#
           conditionalPanel(condition="input.searchpanel==1",#
           h4("Find expression data from publicly available datasets to begin defining your own experiment."),#
           p("Begin by searching for ",span("G",style="font-weight:bold"),"EO data ",span("se",style="font-weight:bold"),"ries (GSE) containing expression data for your cell or tissue type of interest."),#
           radioButtons("gplSelection", "Choose species:", choices = c("Mouse (GPL1261)" = "mouse", "Human (GPL570)" = "human")),#
           tagAppendAttributes(textInput("Key", "Enter search terms, separated by commas", value = ""),`data-proxy-click` = "Search"),#
           actionButton("Search", "Search"),#
           hr(),#
           p("When you have selected the appropriate datasets, click \'Retrieve GSM\' to collect sample information and then click on the \'Assign samples\' tab above."),#
           actionButton("getGSM", "Retrieve GSM")),#
           conditionalPanel(condition="input.searchpanel==2",#
           h4("Define the categories that you wish to assign each sample (GSM) for comparison."),#
           splitLayout(cellWidths=c("10%","90%"), icon("circle"),textInput("cat1", label=NULL, placeholder="Category 1")),#
           textInput("cat2", label=NULL, placeholder="Category 2"),#
           textInput("cat3", label=NULL, placeholder="Category 3 (optional)"),#
           ### https://www.aridhia.com/blog/the-sky-is-not-the-limit-embedding-raw-html-and-javascript-to-create-dynamic-ui-elements-in-shiny-applications/   #
           ### ^ this should help with dynamically adding/subtracting categories#
           hr(),#
           h4("Highlight samples, then click to Assign them to the specificed category."),#
           uiOutput("categorySelect"),#
           actionButton("Assign", "Assign GSM to Category")),#
           conditionalPanel(condition="input.searchpanel==3",#
               h4("Thank you for using receptoR!"),#
               p(" Please enter your name and any comments/bugs/questions/requests in the box below, then click the \'Download and Process\' button to retrieve the raw files from the NCBI server and process them based on their assigned categories."),#
               textAreaInput("comments","Comments",width="100%",height="100px",resize="vertical"),#
               textInput("downloadId","Download ID"),#
               actionButton("downloadCEL","Download and Process"))#
       ),#
       mainPanel(#
           # Search GSE based on species#
        tabsetPanel(#
        tabPanel("Search", value=1,#
            h4("GEO data series (\'GSE\') matching search query"), # return search here!#
            DT::dataTableOutput("filteredgse")#
        ),#
        # Assign samples to categories ------------------------------------------------------#
        tabPanel("Assign", value=2,#
            h4("From the selected series' (GSE) assign individual samples (GSM) to categories of your choosing."),#
            DT::dataTableOutput("gsm_table")#
        ),#
        # This will be where the CEL files are downloaded (confirmation, etc) ------------#
        tabPanel("Process", value=3,#
        h4("Please confirm samples are properly categorized."),#
        p("Expression samples annotated:"),#
                DT::dataTableOutput("finishedtable")#
        ),#
        id = "searchpanel"#
        )#
        )#
        )#
    ),#
    # Load Gene Expression Data tab -------------------------------------#
    tabPanel("Load expression data",#
        h3("Pick from user-defined experiments to perform analyses"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Load expression data"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            hr(),#
            selectInput(inputId="user_data",label="Select user data for analysis",choices=c("none"="none","Photoreceptors v RPE"="2018-04-13_app_data.rda"),selected="none"),#
            br(),#
            uiOutput("geneListsUI"),#
            br(),#
            uiOutput("geneUI")#
        ),#
        mainPanel(#
            tabsetPanel(type="tabs",selected="Gene-level expression",#
            tabPanel("Experimental design",h4("Category definitions and contrasts"),p("Coming soon!")),#
            tabPanel("Gene-level expression",#
                fluidRow(#
                column(6, h4("Average Expression"), DT::dataTableOutput("genes")),#
                column(6, h4("Gene Boxplot"), plotOutput("singleGenePlot"))#
            )))#
        )#
        )#
    ),#
    # Magnitude expression tab ------------------------------------------------------------------------------#
#
    tabPanel("Absolute expression",#
        h3("Compare genes based on absolute expression"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Absolute expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            # style = "position:fixed",#
            checkboxGroupInput("tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            br(),#
            checkboxInput("de_state", label = "Show differential expressed only", value = TRUE),#
            uiOutput("de_choices"),#
            br(),#
            conditionalPanel(condition="input.absexpanel==1",#
                h3("Heatmap parameters"),#
                checkboxInput("hm_probes", "Show probe-level", value = FALSE),#
                checkboxInput("hm_gsm", "Show GSM (column names)", value = TRUE),#
                checkboxInput("hm_rownames", "Show rownames", value = TRUE),#
                checkboxInput("hm_col_cluster", "Cluster columns", value = TRUE),#
                checkboxInput("hm_row_cluster", "Cluster rows", value = TRUE),#
                h4("Select plot dimensions (px)"),#
                numericInput("hm_width", "Width", value = 900, min = 100, max = 2400, step = 10),#
                numericInput("hm_height", "Height", value = 1200, min = 100, max = 2400, step = 10))#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("Heatmap", value=1, uiOutput("heatmap_ui")),#
            tabPanel("Summary boxplots", plotOutput("overallPlot", height = 600)),#
            tabPanel("By-gene boxplots", plotOutput("byGenePlot", height = 600)),#
            id = "absexpanel"#
        )#
        )#
        )#
    ),#
#
    # Mixomics tab ---------------------------------------------#
    tabPanel("Relative expression",#
        h3("Compare genes based on relative expression between experimental groups"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Relative expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            checkboxGroupInput("pls_tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            checkboxInput("pls_probe", "Perform PLS-DA at probe level", value = FALSE),#
            br(),#
            h4("Gene contribution plot"),#
            uiOutput("numGenesUI"),#
            radioButtons("pls_ncomp", "Select component for gene contribution plot", choices = c(1,2)),#
            br()#
            # downloadButton("pls_download", "Download gene contribution data")#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("PCA Analysis", plotOutput("indPlot", height = 800)),#
            tabPanel("Circle variance", plotOutput("varPlot", height = 800)),#
            tabPanel("Loadings plot", plotOutput("contribPlot", height = 800))#
        ),#
        position = c("right","left"),#
        fluid = TRUE#
        )#
        )#
    )#
)#
)
test()
ui <- fluidPage(#
tags$head(tags$script(HTML(jscode))),#
# tags$script(HTML("$('body').addClass('fixed);")),#
shinyjs::useShinyjs(),#
navbarPage("receptoR",#
    theme = shinytheme("spacelab"),#
#
# Start page  ------------------------------------------------------------------------------#
#
    tabPanel("Start here",#
       h3("Welcome to receptoR!"),#
       hr(),#
       sidebarLayout(#
           sidebarPanel(#
               h4("receptoR is an automated hypothesis generation software to identify cellular signaling pathways from transcriptomics data."),#
               p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky. Andouille t-bone biltong bacon beef ribs boudin frankfurter ham hock pork loin capicola tail ground round brisket tenderloin tri-tip. Ham pork bacon strip steak, ball tip leberkas meatball capicola pork loin. Ribeye turducken tri-tip jowl filet mignon drumstick shank corned beef prosciutto spare ribs sausage leberkas cupim burgdoggen bacon.",style="color:#D8BFD8"),#
               hr(),#
               p("(C) 2019 Derek Toms")),#
           mainPanel(#
               p("This software allows you to browse and analyze public transcriptomics data. To proceed, click \'Search for datasets\', above"),#
               img(src="overview.png"),#
               p("Spicy jalapeno bacon ipsum dolor amet brisket ribeye tri-tip tail meatloaf ground round salami fatback. Ball tip flank pork turkey prosciutto. Venison burgdoggen beef pork hamburger tongue shankle rump frankfurter kielbasa pastrami pork belly. T-bone fatback venison tenderloin salami biltong turkey chuck.",style="color:#D8BFD8"),#
#
p("Turkey tenderloin buffalo frankfurter, strip steak capicola filet mignon ribeye cow t-bone biltong. Tri-tip hamburger ham hock, shank landjaeger kielbasa pork loin spare ribs pastrami salami shoulder alcatra. Biltong tail brisket, turkey beef ribs hamburger prosciutto bacon tenderloin pancetta shank venison picanha cupim. Frankfurter porchetta turkey biltong corned beef, burgdoggen prosciutto jerky tail. Capicola beef ribs burgdoggen pancetta, frankfurter leberkas pig. Filet mignon jerky ground round cow burgdoggen, shoulder boudin ham hock pancetta.",style="color:#D8BFD8"),#
#
p("Sirloin salami strip steak burgdoggen pork chop ribeye, pastrami fatback short ribs corned beef. Beef shank shoulder, leberkas pancetta ground round jowl tenderloin ribeye hamburger shankle flank. Strip steak short loin kevin pork belly meatball swine sausage ham jowl pig tongue venison fatback t-bone beef. Spare ribs shoulder ham hock strip steak pastrami.",style="color:#D8BFD8")#
               ))#
        ),#
#
# Search for GSE  ------------------------------------------------------------------------------#
#
    tabPanel("Search for datasets",#
       h3("Organize publicly available expression data"),#
       hr(),#
       sidebarLayout(#
       sidebarPanel(#
           # style = "position:fixed;width:30%",#
           h4("Search for datasets"),#
           p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
           hr(),#
           conditionalPanel(condition="input.searchpanel==1",#
           h4("Find expression data from publicly available datasets to begin defining your own experiment."),#
           p("Begin by searching for ",span("G",style="font-weight:bold"),"EO data ",span("se",style="font-weight:bold"),"ries (GSE) containing expression data for your cell or tissue type of interest."),#
           radioButtons("gplSelection", "Choose species:", choices = c("Mouse (GPL1261)" = "mouse", "Human (GPL570)" = "human")),#
           tagAppendAttributes(textInput("Key", "Enter search terms, separated by commas", value = ""),`data-proxy-click` = "Search"),#
           actionButton("Search", "Search"),#
           hr(),#
           p("When you have selected the appropriate datasets, click \'Retrieve GSM\' to collect sample information and then click on the \'Assign samples\' tab above."),#
           actionButton("getGSM", "Retrieve GSM")),#
           conditionalPanel(condition="input.searchpanel==2",#
           h4("Define the categories that you wish to assign each sample (GSM) for comparison."),#
           splitLayout(cellWidths=c("10%","90%"), icon("circle",style="color:red"),textInput("cat1", label=NULL, placeholder="Category 1")),#
           textInput("cat2", label=NULL, placeholder="Category 2"),#
           textInput("cat3", label=NULL, placeholder="Category 3 (optional)"),#
           ### https://www.aridhia.com/blog/the-sky-is-not-the-limit-embedding-raw-html-and-javascript-to-create-dynamic-ui-elements-in-shiny-applications/   #
           ### ^ this should help with dynamically adding/subtracting categories#
           hr(),#
           h4("Highlight samples, then click to Assign them to the specificed category."),#
           uiOutput("categorySelect"),#
           actionButton("Assign", "Assign GSM to Category")),#
           conditionalPanel(condition="input.searchpanel==3",#
               h4("Thank you for using receptoR!"),#
               p(" Please enter your name and any comments/bugs/questions/requests in the box below, then click the \'Download and Process\' button to retrieve the raw files from the NCBI server and process them based on their assigned categories."),#
               textAreaInput("comments","Comments",width="100%",height="100px",resize="vertical"),#
               textInput("downloadId","Download ID"),#
               actionButton("downloadCEL","Download and Process"))#
       ),#
       mainPanel(#
           # Search GSE based on species#
        tabsetPanel(#
        tabPanel("Search", value=1,#
            h4("GEO data series (\'GSE\') matching search query"), # return search here!#
            DT::dataTableOutput("filteredgse")#
        ),#
        # Assign samples to categories ------------------------------------------------------#
        tabPanel("Assign", value=2,#
            h4("From the selected series' (GSE) assign individual samples (GSM) to categories of your choosing."),#
            DT::dataTableOutput("gsm_table")#
        ),#
        # This will be where the CEL files are downloaded (confirmation, etc) ------------#
        tabPanel("Process", value=3,#
        h4("Please confirm samples are properly categorized."),#
        p("Expression samples annotated:"),#
                DT::dataTableOutput("finishedtable")#
        ),#
        id = "searchpanel"#
        )#
        )#
        )#
    ),#
    # Load Gene Expression Data tab -------------------------------------#
    tabPanel("Load expression data",#
        h3("Pick from user-defined experiments to perform analyses"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Load expression data"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            hr(),#
            selectInput(inputId="user_data",label="Select user data for analysis",choices=c("none"="none","Photoreceptors v RPE"="2018-04-13_app_data.rda"),selected="none"),#
            br(),#
            uiOutput("geneListsUI"),#
            br(),#
            uiOutput("geneUI")#
        ),#
        mainPanel(#
            tabsetPanel(type="tabs",selected="Gene-level expression",#
            tabPanel("Experimental design",h4("Category definitions and contrasts"),p("Coming soon!")),#
            tabPanel("Gene-level expression",#
                fluidRow(#
                column(6, h4("Average Expression"), DT::dataTableOutput("genes")),#
                column(6, h4("Gene Boxplot"), plotOutput("singleGenePlot"))#
            )))#
        )#
        )#
    ),#
    # Magnitude expression tab ------------------------------------------------------------------------------#
#
    tabPanel("Absolute expression",#
        h3("Compare genes based on absolute expression"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Absolute expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            # style = "position:fixed",#
            checkboxGroupInput("tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            br(),#
            checkboxInput("de_state", label = "Show differential expressed only", value = TRUE),#
            uiOutput("de_choices"),#
            br(),#
            conditionalPanel(condition="input.absexpanel==1",#
                h3("Heatmap parameters"),#
                checkboxInput("hm_probes", "Show probe-level", value = FALSE),#
                checkboxInput("hm_gsm", "Show GSM (column names)", value = TRUE),#
                checkboxInput("hm_rownames", "Show rownames", value = TRUE),#
                checkboxInput("hm_col_cluster", "Cluster columns", value = TRUE),#
                checkboxInput("hm_row_cluster", "Cluster rows", value = TRUE),#
                h4("Select plot dimensions (px)"),#
                numericInput("hm_width", "Width", value = 900, min = 100, max = 2400, step = 10),#
                numericInput("hm_height", "Height", value = 1200, min = 100, max = 2400, step = 10))#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("Heatmap", value=1, uiOutput("heatmap_ui")),#
            tabPanel("Summary boxplots", plotOutput("overallPlot", height = 600)),#
            tabPanel("By-gene boxplots", plotOutput("byGenePlot", height = 600)),#
            id = "absexpanel"#
        )#
        )#
        )#
    ),#
#
    # Mixomics tab ---------------------------------------------#
    tabPanel("Relative expression",#
        h3("Compare genes based on relative expression between experimental groups"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Relative expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            checkboxGroupInput("pls_tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            checkboxInput("pls_probe", "Perform PLS-DA at probe level", value = FALSE),#
            br(),#
            h4("Gene contribution plot"),#
            uiOutput("numGenesUI"),#
            radioButtons("pls_ncomp", "Select component for gene contribution plot", choices = c(1,2)),#
            br()#
            # downloadButton("pls_download", "Download gene contribution data")#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("PCA Analysis", plotOutput("indPlot", height = 800)),#
            tabPanel("Circle variance", plotOutput("varPlot", height = 800)),#
            tabPanel("Loadings plot", plotOutput("contribPlot", height = 800))#
        ),#
        position = c("right","left"),#
        fluid = TRUE#
        )#
        )#
    )#
)#
)
ui <- fluidPage(#
tags$head(tags$script(HTML(jscode))),#
# tags$script(HTML("$('body').addClass('fixed);")),#
shinyjs::useShinyjs(),#
navbarPage("receptoR",#
    theme = shinytheme("spacelab"),#
#
# Start page  ------------------------------------------------------------------------------#
#
    tabPanel("Start here",#
       h3("Welcome to receptoR!"),#
       hr(),#
       sidebarLayout(#
           sidebarPanel(#
               h4("receptoR is an automated hypothesis generation software to identify cellular signaling pathways from transcriptomics data."),#
               p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky. Andouille t-bone biltong bacon beef ribs boudin frankfurter ham hock pork loin capicola tail ground round brisket tenderloin tri-tip. Ham pork bacon strip steak, ball tip leberkas meatball capicola pork loin. Ribeye turducken tri-tip jowl filet mignon drumstick shank corned beef prosciutto spare ribs sausage leberkas cupim burgdoggen bacon.",style="color:#D8BFD8"),#
               hr(),#
               p("(C) 2019 Derek Toms")),#
           mainPanel(#
               p("This software allows you to browse and analyze public transcriptomics data. To proceed, click \'Search for datasets\', above"),#
               img(src="overview.png"),#
               p("Spicy jalapeno bacon ipsum dolor amet brisket ribeye tri-tip tail meatloaf ground round salami fatback. Ball tip flank pork turkey prosciutto. Venison burgdoggen beef pork hamburger tongue shankle rump frankfurter kielbasa pastrami pork belly. T-bone fatback venison tenderloin salami biltong turkey chuck.",style="color:#D8BFD8"),#
#
p("Turkey tenderloin buffalo frankfurter, strip steak capicola filet mignon ribeye cow t-bone biltong. Tri-tip hamburger ham hock, shank landjaeger kielbasa pork loin spare ribs pastrami salami shoulder alcatra. Biltong tail brisket, turkey beef ribs hamburger prosciutto bacon tenderloin pancetta shank venison picanha cupim. Frankfurter porchetta turkey biltong corned beef, burgdoggen prosciutto jerky tail. Capicola beef ribs burgdoggen pancetta, frankfurter leberkas pig. Filet mignon jerky ground round cow burgdoggen, shoulder boudin ham hock pancetta.",style="color:#D8BFD8"),#
#
p("Sirloin salami strip steak burgdoggen pork chop ribeye, pastrami fatback short ribs corned beef. Beef shank shoulder, leberkas pancetta ground round jowl tenderloin ribeye hamburger shankle flank. Strip steak short loin kevin pork belly meatball swine sausage ham jowl pig tongue venison fatback t-bone beef. Spare ribs shoulder ham hock strip steak pastrami.",style="color:#D8BFD8")#
               ))#
        ),#
#
# Search for GSE  ------------------------------------------------------------------------------#
#
    tabPanel("Search for datasets",#
       h3("Organize publicly available expression data"),#
       hr(),#
       sidebarLayout(#
       sidebarPanel(#
           # style = "position:fixed;width:30%",#
           h4("Search for datasets"),#
           p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
           hr(),#
           conditionalPanel(condition="input.searchpanel==1",#
           h4("Find expression data from publicly available datasets to begin defining your own experiment."),#
           p("Begin by searching for ",span("G",style="font-weight:bold"),"EO data ",span("se",style="font-weight:bold"),"ries (GSE) containing expression data for your cell or tissue type of interest."),#
           radioButtons("gplSelection", "Choose species:", choices = c("Mouse (GPL1261)" = "mouse", "Human (GPL570)" = "human")),#
           tagAppendAttributes(textInput("Key", "Enter search terms, separated by commas", value = ""),`data-proxy-click` = "Search"),#
           actionButton("Search", "Search"),#
           hr(),#
           p("When you have selected the appropriate datasets, click \'Retrieve GSM\' to collect sample information and then click on the \'Assign samples\' tab above."),#
           actionButton("getGSM", "Retrieve GSM")),#
           conditionalPanel(condition="input.searchpanel==2",#
           h4("Define the categories that you wish to assign each sample (GSM) for comparison."),#
           splitLayout(cellWidths=c("10%","90%"), i(class="circle" style="color:red"),textInput("cat1", label=NULL, placeholder="Category 1")),#
           textInput("cat2", label=NULL, placeholder="Category 2"),#
           textInput("cat3", label=NULL, placeholder="Category 3 (optional)"),#
           ### https://www.aridhia.com/blog/the-sky-is-not-the-limit-embedding-raw-html-and-javascript-to-create-dynamic-ui-elements-in-shiny-applications/   #
           ### ^ this should help with dynamically adding/subtracting categories#
           hr(),#
           h4("Highlight samples, then click to Assign them to the specificed category."),#
           uiOutput("categorySelect"),#
           actionButton("Assign", "Assign GSM to Category")),#
           conditionalPanel(condition="input.searchpanel==3",#
               h4("Thank you for using receptoR!"),#
               p(" Please enter your name and any comments/bugs/questions/requests in the box below, then click the \'Download and Process\' button to retrieve the raw files from the NCBI server and process them based on their assigned categories."),#
               textAreaInput("comments","Comments",width="100%",height="100px",resize="vertical"),#
               textInput("downloadId","Download ID"),#
               actionButton("downloadCEL","Download and Process"))#
       ),#
       mainPanel(#
           # Search GSE based on species#
        tabsetPanel(#
        tabPanel("Search", value=1,#
            h4("GEO data series (\'GSE\') matching search query"), # return search here!#
            DT::dataTableOutput("filteredgse")#
        ),#
        # Assign samples to categories ------------------------------------------------------#
        tabPanel("Assign", value=2,#
            h4("From the selected series' (GSE) assign individual samples (GSM) to categories of your choosing."),#
            DT::dataTableOutput("gsm_table")#
        ),#
        # This will be where the CEL files are downloaded (confirmation, etc) ------------#
        tabPanel("Process", value=3,#
        h4("Please confirm samples are properly categorized."),#
        p("Expression samples annotated:"),#
                DT::dataTableOutput("finishedtable")#
        ),#
        id = "searchpanel"#
        )#
        )#
        )#
    ),#
    # Load Gene Expression Data tab -------------------------------------#
    tabPanel("Load expression data",#
        h3("Pick from user-defined experiments to perform analyses"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Load expression data"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            hr(),#
            selectInput(inputId="user_data",label="Select user data for analysis",choices=c("none"="none","Photoreceptors v RPE"="2018-04-13_app_data.rda"),selected="none"),#
            br(),#
            uiOutput("geneListsUI"),#
            br(),#
            uiOutput("geneUI")#
        ),#
        mainPanel(#
            tabsetPanel(type="tabs",selected="Gene-level expression",#
            tabPanel("Experimental design",h4("Category definitions and contrasts"),p("Coming soon!")),#
            tabPanel("Gene-level expression",#
                fluidRow(#
                column(6, h4("Average Expression"), DT::dataTableOutput("genes")),#
                column(6, h4("Gene Boxplot"), plotOutput("singleGenePlot"))#
            )))#
        )#
        )#
    ),#
    # Magnitude expression tab ------------------------------------------------------------------------------#
#
    tabPanel("Absolute expression",#
        h3("Compare genes based on absolute expression"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Absolute expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            # style = "position:fixed",#
            checkboxGroupInput("tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            br(),#
            checkboxInput("de_state", label = "Show differential expressed only", value = TRUE),#
            uiOutput("de_choices"),#
            br(),#
            conditionalPanel(condition="input.absexpanel==1",#
                h3("Heatmap parameters"),#
                checkboxInput("hm_probes", "Show probe-level", value = FALSE),#
                checkboxInput("hm_gsm", "Show GSM (column names)", value = TRUE),#
                checkboxInput("hm_rownames", "Show rownames", value = TRUE),#
                checkboxInput("hm_col_cluster", "Cluster columns", value = TRUE),#
                checkboxInput("hm_row_cluster", "Cluster rows", value = TRUE),#
                h4("Select plot dimensions (px)"),#
                numericInput("hm_width", "Width", value = 900, min = 100, max = 2400, step = 10),#
                numericInput("hm_height", "Height", value = 1200, min = 100, max = 2400, step = 10))#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("Heatmap", value=1, uiOutput("heatmap_ui")),#
            tabPanel("Summary boxplots", plotOutput("overallPlot", height = 600)),#
            tabPanel("By-gene boxplots", plotOutput("byGenePlot", height = 600)),#
            id = "absexpanel"#
        )#
        )#
        )#
    ),#
#
    # Mixomics tab ---------------------------------------------#
    tabPanel("Relative expression",#
        h3("Compare genes based on relative expression between experimental groups"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Relative expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            checkboxGroupInput("pls_tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            checkboxInput("pls_probe", "Perform PLS-DA at probe level", value = FALSE),#
            br(),#
            h4("Gene contribution plot"),#
            uiOutput("numGenesUI"),#
            radioButtons("pls_ncomp", "Select component for gene contribution plot", choices = c(1,2)),#
            br()#
            # downloadButton("pls_download", "Download gene contribution data")#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("PCA Analysis", plotOutput("indPlot", height = 800)),#
            tabPanel("Circle variance", plotOutput("varPlot", height = 800)),#
            tabPanel("Loadings plot", plotOutput("contribPlot", height = 800))#
        ),#
        position = c("right","left"),#
        fluid = TRUE#
        )#
        )#
    )#
)#
)
ui <- fluidPage(#
tags$head(tags$script(HTML(jscode))),#
# tags$script(HTML("$('body').addClass('fixed);")),#
shinyjs::useShinyjs(),#
navbarPage("receptoR",#
    theme = shinytheme("spacelab"),#
#
# Start page  ------------------------------------------------------------------------------#
#
    tabPanel("Start here",#
       h3("Welcome to receptoR!"),#
       hr(),#
       sidebarLayout(#
           sidebarPanel(#
               h4("receptoR is an automated hypothesis generation software to identify cellular signaling pathways from transcriptomics data."),#
               p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky. Andouille t-bone biltong bacon beef ribs boudin frankfurter ham hock pork loin capicola tail ground round brisket tenderloin tri-tip. Ham pork bacon strip steak, ball tip leberkas meatball capicola pork loin. Ribeye turducken tri-tip jowl filet mignon drumstick shank corned beef prosciutto spare ribs sausage leberkas cupim burgdoggen bacon.",style="color:#D8BFD8"),#
               hr(),#
               p("(C) 2019 Derek Toms")),#
           mainPanel(#
               p("This software allows you to browse and analyze public transcriptomics data. To proceed, click \'Search for datasets\', above"),#
               img(src="overview.png"),#
               p("Spicy jalapeno bacon ipsum dolor amet brisket ribeye tri-tip tail meatloaf ground round salami fatback. Ball tip flank pork turkey prosciutto. Venison burgdoggen beef pork hamburger tongue shankle rump frankfurter kielbasa pastrami pork belly. T-bone fatback venison tenderloin salami biltong turkey chuck.",style="color:#D8BFD8"),#
#
p("Turkey tenderloin buffalo frankfurter, strip steak capicola filet mignon ribeye cow t-bone biltong. Tri-tip hamburger ham hock, shank landjaeger kielbasa pork loin spare ribs pastrami salami shoulder alcatra. Biltong tail brisket, turkey beef ribs hamburger prosciutto bacon tenderloin pancetta shank venison picanha cupim. Frankfurter porchetta turkey biltong corned beef, burgdoggen prosciutto jerky tail. Capicola beef ribs burgdoggen pancetta, frankfurter leberkas pig. Filet mignon jerky ground round cow burgdoggen, shoulder boudin ham hock pancetta.",style="color:#D8BFD8"),#
#
p("Sirloin salami strip steak burgdoggen pork chop ribeye, pastrami fatback short ribs corned beef. Beef shank shoulder, leberkas pancetta ground round jowl tenderloin ribeye hamburger shankle flank. Strip steak short loin kevin pork belly meatball swine sausage ham jowl pig tongue venison fatback t-bone beef. Spare ribs shoulder ham hock strip steak pastrami.",style="color:#D8BFD8")#
               ))#
        ),#
#
# Search for GSE  ------------------------------------------------------------------------------#
#
    tabPanel("Search for datasets",#
       h3("Organize publicly available expression data"),#
       hr(),#
       sidebarLayout(#
       sidebarPanel(#
           # style = "position:fixed;width:30%",#
           h4("Search for datasets"),#
           p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
           hr(),#
           conditionalPanel(condition="input.searchpanel==1",#
           h4("Find expression data from publicly available datasets to begin defining your own experiment."),#
           p("Begin by searching for ",span("G",style="font-weight:bold"),"EO data ",span("se",style="font-weight:bold"),"ries (GSE) containing expression data for your cell or tissue type of interest."),#
           radioButtons("gplSelection", "Choose species:", choices = c("Mouse (GPL1261)" = "mouse", "Human (GPL570)" = "human")),#
           tagAppendAttributes(textInput("Key", "Enter search terms, separated by commas", value = ""),`data-proxy-click` = "Search"),#
           actionButton("Search", "Search"),#
           hr(),#
           p("When you have selected the appropriate datasets, click \'Retrieve GSM\' to collect sample information and then click on the \'Assign samples\' tab above."),#
           actionButton("getGSM", "Retrieve GSM")),#
           conditionalPanel(condition="input.searchpanel==2",#
           h4("Define the categories that you wish to assign each sample (GSM) for comparison."),#
           splitLayout(cellWidths=c("10%","90%"), i(class="circle", style="color:red"),textInput("cat1", label=NULL, placeholder="Category 1")),#
           textInput("cat2", label=NULL, placeholder="Category 2"),#
           textInput("cat3", label=NULL, placeholder="Category 3 (optional)"),#
           ### https://www.aridhia.com/blog/the-sky-is-not-the-limit-embedding-raw-html-and-javascript-to-create-dynamic-ui-elements-in-shiny-applications/   #
           ### ^ this should help with dynamically adding/subtracting categories#
           hr(),#
           h4("Highlight samples, then click to Assign them to the specificed category."),#
           uiOutput("categorySelect"),#
           actionButton("Assign", "Assign GSM to Category")),#
           conditionalPanel(condition="input.searchpanel==3",#
               h4("Thank you for using receptoR!"),#
               p(" Please enter your name and any comments/bugs/questions/requests in the box below, then click the \'Download and Process\' button to retrieve the raw files from the NCBI server and process them based on their assigned categories."),#
               textAreaInput("comments","Comments",width="100%",height="100px",resize="vertical"),#
               textInput("downloadId","Download ID"),#
               actionButton("downloadCEL","Download and Process"))#
       ),#
       mainPanel(#
           # Search GSE based on species#
        tabsetPanel(#
        tabPanel("Search", value=1,#
            h4("GEO data series (\'GSE\') matching search query"), # return search here!#
            DT::dataTableOutput("filteredgse")#
        ),#
        # Assign samples to categories ------------------------------------------------------#
        tabPanel("Assign", value=2,#
            h4("From the selected series' (GSE) assign individual samples (GSM) to categories of your choosing."),#
            DT::dataTableOutput("gsm_table")#
        ),#
        # This will be where the CEL files are downloaded (confirmation, etc) ------------#
        tabPanel("Process", value=3,#
        h4("Please confirm samples are properly categorized."),#
        p("Expression samples annotated:"),#
                DT::dataTableOutput("finishedtable")#
        ),#
        id = "searchpanel"#
        )#
        )#
        )#
    ),#
    # Load Gene Expression Data tab -------------------------------------#
    tabPanel("Load expression data",#
        h3("Pick from user-defined experiments to perform analyses"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Load expression data"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            hr(),#
            selectInput(inputId="user_data",label="Select user data for analysis",choices=c("none"="none","Photoreceptors v RPE"="2018-04-13_app_data.rda"),selected="none"),#
            br(),#
            uiOutput("geneListsUI"),#
            br(),#
            uiOutput("geneUI")#
        ),#
        mainPanel(#
            tabsetPanel(type="tabs",selected="Gene-level expression",#
            tabPanel("Experimental design",h4("Category definitions and contrasts"),p("Coming soon!")),#
            tabPanel("Gene-level expression",#
                fluidRow(#
                column(6, h4("Average Expression"), DT::dataTableOutput("genes")),#
                column(6, h4("Gene Boxplot"), plotOutput("singleGenePlot"))#
            )))#
        )#
        )#
    ),#
    # Magnitude expression tab ------------------------------------------------------------------------------#
#
    tabPanel("Absolute expression",#
        h3("Compare genes based on absolute expression"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Absolute expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            # style = "position:fixed",#
            checkboxGroupInput("tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            br(),#
            checkboxInput("de_state", label = "Show differential expressed only", value = TRUE),#
            uiOutput("de_choices"),#
            br(),#
            conditionalPanel(condition="input.absexpanel==1",#
                h3("Heatmap parameters"),#
                checkboxInput("hm_probes", "Show probe-level", value = FALSE),#
                checkboxInput("hm_gsm", "Show GSM (column names)", value = TRUE),#
                checkboxInput("hm_rownames", "Show rownames", value = TRUE),#
                checkboxInput("hm_col_cluster", "Cluster columns", value = TRUE),#
                checkboxInput("hm_row_cluster", "Cluster rows", value = TRUE),#
                h4("Select plot dimensions (px)"),#
                numericInput("hm_width", "Width", value = 900, min = 100, max = 2400, step = 10),#
                numericInput("hm_height", "Height", value = 1200, min = 100, max = 2400, step = 10))#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("Heatmap", value=1, uiOutput("heatmap_ui")),#
            tabPanel("Summary boxplots", plotOutput("overallPlot", height = 600)),#
            tabPanel("By-gene boxplots", plotOutput("byGenePlot", height = 600)),#
            id = "absexpanel"#
        )#
        )#
        )#
    ),#
#
    # Mixomics tab ---------------------------------------------#
    tabPanel("Relative expression",#
        h3("Compare genes based on relative expression between experimental groups"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Relative expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            checkboxGroupInput("pls_tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            checkboxInput("pls_probe", "Perform PLS-DA at probe level", value = FALSE),#
            br(),#
            h4("Gene contribution plot"),#
            uiOutput("numGenesUI"),#
            radioButtons("pls_ncomp", "Select component for gene contribution plot", choices = c(1,2)),#
            br()#
            # downloadButton("pls_download", "Download gene contribution data")#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("PCA Analysis", plotOutput("indPlot", height = 800)),#
            tabPanel("Circle variance", plotOutput("varPlot", height = 800)),#
            tabPanel("Loadings plot", plotOutput("contribPlot", height = 800))#
        ),#
        position = c("right","left"),#
        fluid = TRUE#
        )#
        )#
    )#
)#
)
ui <- fluidPage(#
tags$head(tags$script(HTML(jscode))),#
# tags$script(HTML("$('body').addClass('fixed);")),#
shinyjs::useShinyjs(),#
navbarPage("receptoR",#
    theme = shinytheme("spacelab"),#
#
# Start page  ------------------------------------------------------------------------------#
#
    tabPanel("Start here",#
       h3("Welcome to receptoR!"),#
       hr(),#
       sidebarLayout(#
           sidebarPanel(#
               h4("receptoR is an automated hypothesis generation software to identify cellular signaling pathways from transcriptomics data."),#
               p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky. Andouille t-bone biltong bacon beef ribs boudin frankfurter ham hock pork loin capicola tail ground round brisket tenderloin tri-tip. Ham pork bacon strip steak, ball tip leberkas meatball capicola pork loin. Ribeye turducken tri-tip jowl filet mignon drumstick shank corned beef prosciutto spare ribs sausage leberkas cupim burgdoggen bacon.",style="color:#D8BFD8"),#
               hr(),#
               p("(C) 2019 Derek Toms")),#
           mainPanel(#
               p("This software allows you to browse and analyze public transcriptomics data. To proceed, click \'Search for datasets\', above"),#
               img(src="overview.png"),#
               p("Spicy jalapeno bacon ipsum dolor amet brisket ribeye tri-tip tail meatloaf ground round salami fatback. Ball tip flank pork turkey prosciutto. Venison burgdoggen beef pork hamburger tongue shankle rump frankfurter kielbasa pastrami pork belly. T-bone fatback venison tenderloin salami biltong turkey chuck.",style="color:#D8BFD8"),#
#
p("Turkey tenderloin buffalo frankfurter, strip steak capicola filet mignon ribeye cow t-bone biltong. Tri-tip hamburger ham hock, shank landjaeger kielbasa pork loin spare ribs pastrami salami shoulder alcatra. Biltong tail brisket, turkey beef ribs hamburger prosciutto bacon tenderloin pancetta shank venison picanha cupim. Frankfurter porchetta turkey biltong corned beef, burgdoggen prosciutto jerky tail. Capicola beef ribs burgdoggen pancetta, frankfurter leberkas pig. Filet mignon jerky ground round cow burgdoggen, shoulder boudin ham hock pancetta.",style="color:#D8BFD8"),#
#
p("Sirloin salami strip steak burgdoggen pork chop ribeye, pastrami fatback short ribs corned beef. Beef shank shoulder, leberkas pancetta ground round jowl tenderloin ribeye hamburger shankle flank. Strip steak short loin kevin pork belly meatball swine sausage ham jowl pig tongue venison fatback t-bone beef. Spare ribs shoulder ham hock strip steak pastrami.",style="color:#D8BFD8")#
               ))#
        ),#
#
# Search for GSE  ------------------------------------------------------------------------------#
#
    tabPanel("Search for datasets",#
       h3("Organize publicly available expression data"),#
       hr(),#
       sidebarLayout(#
       sidebarPanel(#
           # style = "position:fixed;width:30%",#
           h4("Search for datasets"),#
           p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
           hr(),#
           conditionalPanel(condition="input.searchpanel==1",#
           h4("Find expression data from publicly available datasets to begin defining your own experiment."),#
           p("Begin by searching for ",span("G",style="font-weight:bold"),"EO data ",span("se",style="font-weight:bold"),"ries (GSE) containing expression data for your cell or tissue type of interest."),#
           radioButtons("gplSelection", "Choose species:", choices = c("Mouse (GPL1261)" = "mouse", "Human (GPL570)" = "human")),#
           tagAppendAttributes(textInput("Key", "Enter search terms, separated by commas", value = ""),`data-proxy-click` = "Search"),#
           actionButton("Search", "Search"),#
           hr(),#
           p("When you have selected the appropriate datasets, click \'Retrieve GSM\' to collect sample information and then click on the \'Assign samples\' tab above."),#
           actionButton("getGSM", "Retrieve GSM")),#
           conditionalPanel(condition="input.searchpanel==2",#
           h4("Define the categories that you wish to assign each sample (GSM) for comparison."),#
           splitLayout(cellWidths=c("10%","90%"), tags$i(class="circle", style="color:red"),textInput("cat1", label=NULL, placeholder="Category 1")),#
           textInput("cat2", label=NULL, placeholder="Category 2"),#
           textInput("cat3", label=NULL, placeholder="Category 3 (optional)"),#
           ### https://www.aridhia.com/blog/the-sky-is-not-the-limit-embedding-raw-html-and-javascript-to-create-dynamic-ui-elements-in-shiny-applications/   #
           ### ^ this should help with dynamically adding/subtracting categories#
           hr(),#
           h4("Highlight samples, then click to Assign them to the specificed category."),#
           uiOutput("categorySelect"),#
           actionButton("Assign", "Assign GSM to Category")),#
           conditionalPanel(condition="input.searchpanel==3",#
               h4("Thank you for using receptoR!"),#
               p(" Please enter your name and any comments/bugs/questions/requests in the box below, then click the \'Download and Process\' button to retrieve the raw files from the NCBI server and process them based on their assigned categories."),#
               textAreaInput("comments","Comments",width="100%",height="100px",resize="vertical"),#
               textInput("downloadId","Download ID"),#
               actionButton("downloadCEL","Download and Process"))#
       ),#
       mainPanel(#
           # Search GSE based on species#
        tabsetPanel(#
        tabPanel("Search", value=1,#
            h4("GEO data series (\'GSE\') matching search query"), # return search here!#
            DT::dataTableOutput("filteredgse")#
        ),#
        # Assign samples to categories ------------------------------------------------------#
        tabPanel("Assign", value=2,#
            h4("From the selected series' (GSE) assign individual samples (GSM) to categories of your choosing."),#
            DT::dataTableOutput("gsm_table")#
        ),#
        # This will be where the CEL files are downloaded (confirmation, etc) ------------#
        tabPanel("Process", value=3,#
        h4("Please confirm samples are properly categorized."),#
        p("Expression samples annotated:"),#
                DT::dataTableOutput("finishedtable")#
        ),#
        id = "searchpanel"#
        )#
        )#
        )#
    ),#
    # Load Gene Expression Data tab -------------------------------------#
    tabPanel("Load expression data",#
        h3("Pick from user-defined experiments to perform analyses"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Load expression data"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            hr(),#
            selectInput(inputId="user_data",label="Select user data for analysis",choices=c("none"="none","Photoreceptors v RPE"="2018-04-13_app_data.rda"),selected="none"),#
            br(),#
            uiOutput("geneListsUI"),#
            br(),#
            uiOutput("geneUI")#
        ),#
        mainPanel(#
            tabsetPanel(type="tabs",selected="Gene-level expression",#
            tabPanel("Experimental design",h4("Category definitions and contrasts"),p("Coming soon!")),#
            tabPanel("Gene-level expression",#
                fluidRow(#
                column(6, h4("Average Expression"), DT::dataTableOutput("genes")),#
                column(6, h4("Gene Boxplot"), plotOutput("singleGenePlot"))#
            )))#
        )#
        )#
    ),#
    # Magnitude expression tab ------------------------------------------------------------------------------#
#
    tabPanel("Absolute expression",#
        h3("Compare genes based on absolute expression"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Absolute expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            # style = "position:fixed",#
            checkboxGroupInput("tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            br(),#
            checkboxInput("de_state", label = "Show differential expressed only", value = TRUE),#
            uiOutput("de_choices"),#
            br(),#
            conditionalPanel(condition="input.absexpanel==1",#
                h3("Heatmap parameters"),#
                checkboxInput("hm_probes", "Show probe-level", value = FALSE),#
                checkboxInput("hm_gsm", "Show GSM (column names)", value = TRUE),#
                checkboxInput("hm_rownames", "Show rownames", value = TRUE),#
                checkboxInput("hm_col_cluster", "Cluster columns", value = TRUE),#
                checkboxInput("hm_row_cluster", "Cluster rows", value = TRUE),#
                h4("Select plot dimensions (px)"),#
                numericInput("hm_width", "Width", value = 900, min = 100, max = 2400, step = 10),#
                numericInput("hm_height", "Height", value = 1200, min = 100, max = 2400, step = 10))#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("Heatmap", value=1, uiOutput("heatmap_ui")),#
            tabPanel("Summary boxplots", plotOutput("overallPlot", height = 600)),#
            tabPanel("By-gene boxplots", plotOutput("byGenePlot", height = 600)),#
            id = "absexpanel"#
        )#
        )#
        )#
    ),#
#
    # Mixomics tab ---------------------------------------------#
    tabPanel("Relative expression",#
        h3("Compare genes based on relative expression between experimental groups"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Relative expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            checkboxGroupInput("pls_tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            checkboxInput("pls_probe", "Perform PLS-DA at probe level", value = FALSE),#
            br(),#
            h4("Gene contribution plot"),#
            uiOutput("numGenesUI"),#
            radioButtons("pls_ncomp", "Select component for gene contribution plot", choices = c(1,2)),#
            br()#
            # downloadButton("pls_download", "Download gene contribution data")#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("PCA Analysis", plotOutput("indPlot", height = 800)),#
            tabPanel("Circle variance", plotOutput("varPlot", height = 800)),#
            tabPanel("Loadings plot", plotOutput("contribPlot", height = 800))#
        ),#
        position = c("right","left"),#
        fluid = TRUE#
        )#
        )#
    )#
)#
)
test()
ui <- fluidPage(#
tags$head(tags$script(HTML(jscode))),#
# tags$script(HTML("$('body').addClass('fixed);")),#
shinyjs::useShinyjs(),#
navbarPage("receptoR",#
    theme = shinytheme("spacelab"),#
#
# Start page  ------------------------------------------------------------------------------#
#
    tabPanel("Start here",#
       h3("Welcome to receptoR!"),#
       hr(),#
       sidebarLayout(#
           sidebarPanel(#
               h4("receptoR is an automated hypothesis generation software to identify cellular signaling pathways from transcriptomics data."),#
               p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky. Andouille t-bone biltong bacon beef ribs boudin frankfurter ham hock pork loin capicola tail ground round brisket tenderloin tri-tip. Ham pork bacon strip steak, ball tip leberkas meatball capicola pork loin. Ribeye turducken tri-tip jowl filet mignon drumstick shank corned beef prosciutto spare ribs sausage leberkas cupim burgdoggen bacon.",style="color:#D8BFD8"),#
               hr(),#
               p("(C) 2019 Derek Toms")),#
           mainPanel(#
               p("This software allows you to browse and analyze public transcriptomics data. To proceed, click \'Search for datasets\', above"),#
               img(src="overview.png"),#
               p("Spicy jalapeno bacon ipsum dolor amet brisket ribeye tri-tip tail meatloaf ground round salami fatback. Ball tip flank pork turkey prosciutto. Venison burgdoggen beef pork hamburger tongue shankle rump frankfurter kielbasa pastrami pork belly. T-bone fatback venison tenderloin salami biltong turkey chuck.",style="color:#D8BFD8"),#
#
p("Turkey tenderloin buffalo frankfurter, strip steak capicola filet mignon ribeye cow t-bone biltong. Tri-tip hamburger ham hock, shank landjaeger kielbasa pork loin spare ribs pastrami salami shoulder alcatra. Biltong tail brisket, turkey beef ribs hamburger prosciutto bacon tenderloin pancetta shank venison picanha cupim. Frankfurter porchetta turkey biltong corned beef, burgdoggen prosciutto jerky tail. Capicola beef ribs burgdoggen pancetta, frankfurter leberkas pig. Filet mignon jerky ground round cow burgdoggen, shoulder boudin ham hock pancetta.",style="color:#D8BFD8"),#
#
p("Sirloin salami strip steak burgdoggen pork chop ribeye, pastrami fatback short ribs corned beef. Beef shank shoulder, leberkas pancetta ground round jowl tenderloin ribeye hamburger shankle flank. Strip steak short loin kevin pork belly meatball swine sausage ham jowl pig tongue venison fatback t-bone beef. Spare ribs shoulder ham hock strip steak pastrami.",style="color:#D8BFD8")#
               ))#
        ),#
#
# Search for GSE  ------------------------------------------------------------------------------#
#
    tabPanel("Search for datasets",#
       h3("Organize publicly available expression data"),#
       hr(),#
       sidebarLayout(#
       sidebarPanel(#
           # style = "position:fixed;width:30%",#
           h4("Search for datasets"),#
           p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
           hr(),#
           conditionalPanel(condition="input.searchpanel==1",#
           h4("Find expression data from publicly available datasets to begin defining your own experiment."),#
           p("Begin by searching for ",span("G",style="font-weight:bold"),"EO data ",span("se",style="font-weight:bold"),"ries (GSE) containing expression data for your cell or tissue type of interest."),#
           radioButtons("gplSelection", "Choose species:", choices = c("Mouse (GPL1261)" = "mouse", "Human (GPL570)" = "human")),#
           tagAppendAttributes(textInput("Key", "Enter search terms, separated by commas", value = ""),`data-proxy-click` = "Search"),#
           actionButton("Search", "Search"),#
           hr(),#
           p("When you have selected the appropriate datasets, click \'Retrieve GSM\' to collect sample information and then click on the \'Assign samples\' tab above."),#
           actionButton("getGSM", "Retrieve GSM")),#
           conditionalPanel(condition="input.searchpanel==2",#
           h4("Define the categories that you wish to assign each sample (GSM) for comparison."),#
           splitLayout(cellWidths=c("10%","90%"), tags$i(class="fa-circle", style="color:red"),textInput("cat1", label=NULL, placeholder="Category 1")),#
           textInput("cat2", label=NULL, placeholder="Category 2"),#
           textInput("cat3", label=NULL, placeholder="Category 3 (optional)"),#
           ### https://www.aridhia.com/blog/the-sky-is-not-the-limit-embedding-raw-html-and-javascript-to-create-dynamic-ui-elements-in-shiny-applications/   #
           ### ^ this should help with dynamically adding/subtracting categories#
           hr(),#
           h4("Highlight samples, then click to Assign them to the specificed category."),#
           uiOutput("categorySelect"),#
           actionButton("Assign", "Assign GSM to Category")),#
           conditionalPanel(condition="input.searchpanel==3",#
               h4("Thank you for using receptoR!"),#
               p(" Please enter your name and any comments/bugs/questions/requests in the box below, then click the \'Download and Process\' button to retrieve the raw files from the NCBI server and process them based on their assigned categories."),#
               textAreaInput("comments","Comments",width="100%",height="100px",resize="vertical"),#
               textInput("downloadId","Download ID"),#
               actionButton("downloadCEL","Download and Process"))#
       ),#
       mainPanel(#
           # Search GSE based on species#
        tabsetPanel(#
        tabPanel("Search", value=1,#
            h4("GEO data series (\'GSE\') matching search query"), # return search here!#
            DT::dataTableOutput("filteredgse")#
        ),#
        # Assign samples to categories ------------------------------------------------------#
        tabPanel("Assign", value=2,#
            h4("From the selected series' (GSE) assign individual samples (GSM) to categories of your choosing."),#
            DT::dataTableOutput("gsm_table")#
        ),#
        # This will be where the CEL files are downloaded (confirmation, etc) ------------#
        tabPanel("Process", value=3,#
        h4("Please confirm samples are properly categorized."),#
        p("Expression samples annotated:"),#
                DT::dataTableOutput("finishedtable")#
        ),#
        id = "searchpanel"#
        )#
        )#
        )#
    ),#
    # Load Gene Expression Data tab -------------------------------------#
    tabPanel("Load expression data",#
        h3("Pick from user-defined experiments to perform analyses"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Load expression data"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            hr(),#
            selectInput(inputId="user_data",label="Select user data for analysis",choices=c("none"="none","Photoreceptors v RPE"="2018-04-13_app_data.rda"),selected="none"),#
            br(),#
            uiOutput("geneListsUI"),#
            br(),#
            uiOutput("geneUI")#
        ),#
        mainPanel(#
            tabsetPanel(type="tabs",selected="Gene-level expression",#
            tabPanel("Experimental design",h4("Category definitions and contrasts"),p("Coming soon!")),#
            tabPanel("Gene-level expression",#
                fluidRow(#
                column(6, h4("Average Expression"), DT::dataTableOutput("genes")),#
                column(6, h4("Gene Boxplot"), plotOutput("singleGenePlot"))#
            )))#
        )#
        )#
    ),#
    # Magnitude expression tab ------------------------------------------------------------------------------#
#
    tabPanel("Absolute expression",#
        h3("Compare genes based on absolute expression"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Absolute expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            # style = "position:fixed",#
            checkboxGroupInput("tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            br(),#
            checkboxInput("de_state", label = "Show differential expressed only", value = TRUE),#
            uiOutput("de_choices"),#
            br(),#
            conditionalPanel(condition="input.absexpanel==1",#
                h3("Heatmap parameters"),#
                checkboxInput("hm_probes", "Show probe-level", value = FALSE),#
                checkboxInput("hm_gsm", "Show GSM (column names)", value = TRUE),#
                checkboxInput("hm_rownames", "Show rownames", value = TRUE),#
                checkboxInput("hm_col_cluster", "Cluster columns", value = TRUE),#
                checkboxInput("hm_row_cluster", "Cluster rows", value = TRUE),#
                h4("Select plot dimensions (px)"),#
                numericInput("hm_width", "Width", value = 900, min = 100, max = 2400, step = 10),#
                numericInput("hm_height", "Height", value = 1200, min = 100, max = 2400, step = 10))#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("Heatmap", value=1, uiOutput("heatmap_ui")),#
            tabPanel("Summary boxplots", plotOutput("overallPlot", height = 600)),#
            tabPanel("By-gene boxplots", plotOutput("byGenePlot", height = 600)),#
            id = "absexpanel"#
        )#
        )#
        )#
    ),#
#
    # Mixomics tab ---------------------------------------------#
    tabPanel("Relative expression",#
        h3("Compare genes based on relative expression between experimental groups"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Relative expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            checkboxGroupInput("pls_tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            checkboxInput("pls_probe", "Perform PLS-DA at probe level", value = FALSE),#
            br(),#
            h4("Gene contribution plot"),#
            uiOutput("numGenesUI"),#
            radioButtons("pls_ncomp", "Select component for gene contribution plot", choices = c(1,2)),#
            br()#
            # downloadButton("pls_download", "Download gene contribution data")#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("PCA Analysis", plotOutput("indPlot", height = 800)),#
            tabPanel("Circle variance", plotOutput("varPlot", height = 800)),#
            tabPanel("Loadings plot", plotOutput("contribPlot", height = 800))#
        ),#
        position = c("right","left"),#
        fluid = TRUE#
        )#
        )#
    )#
)#
)
test()
ui <- fluidPage(#
tags$head(tags$script(HTML(jscode))),#
# tags$script(HTML("$('body').addClass('fixed);")),#
shinyjs::useShinyjs(),#
navbarPage("receptoR",#
    theme = shinytheme("spacelab"),#
#
# Start page  ------------------------------------------------------------------------------#
#
    tabPanel("Start here",#
       h3("Welcome to receptoR!"),#
       hr(),#
       sidebarLayout(#
           sidebarPanel(#
               h4("receptoR is an automated hypothesis generation software to identify cellular signaling pathways from transcriptomics data."),#
               p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky. Andouille t-bone biltong bacon beef ribs boudin frankfurter ham hock pork loin capicola tail ground round brisket tenderloin tri-tip. Ham pork bacon strip steak, ball tip leberkas meatball capicola pork loin. Ribeye turducken tri-tip jowl filet mignon drumstick shank corned beef prosciutto spare ribs sausage leberkas cupim burgdoggen bacon.",style="color:#D8BFD8"),#
               hr(),#
               p("(C) 2019 Derek Toms")),#
           mainPanel(#
               p("This software allows you to browse and analyze public transcriptomics data. To proceed, click \'Search for datasets\', above"),#
               img(src="overview.png"),#
               p("Spicy jalapeno bacon ipsum dolor amet brisket ribeye tri-tip tail meatloaf ground round salami fatback. Ball tip flank pork turkey prosciutto. Venison burgdoggen beef pork hamburger tongue shankle rump frankfurter kielbasa pastrami pork belly. T-bone fatback venison tenderloin salami biltong turkey chuck.",style="color:#D8BFD8"),#
#
p("Turkey tenderloin buffalo frankfurter, strip steak capicola filet mignon ribeye cow t-bone biltong. Tri-tip hamburger ham hock, shank landjaeger kielbasa pork loin spare ribs pastrami salami shoulder alcatra. Biltong tail brisket, turkey beef ribs hamburger prosciutto bacon tenderloin pancetta shank venison picanha cupim. Frankfurter porchetta turkey biltong corned beef, burgdoggen prosciutto jerky tail. Capicola beef ribs burgdoggen pancetta, frankfurter leberkas pig. Filet mignon jerky ground round cow burgdoggen, shoulder boudin ham hock pancetta.",style="color:#D8BFD8"),#
#
p("Sirloin salami strip steak burgdoggen pork chop ribeye, pastrami fatback short ribs corned beef. Beef shank shoulder, leberkas pancetta ground round jowl tenderloin ribeye hamburger shankle flank. Strip steak short loin kevin pork belly meatball swine sausage ham jowl pig tongue venison fatback t-bone beef. Spare ribs shoulder ham hock strip steak pastrami.",style="color:#D8BFD8")#
               ))#
        ),#
#
# Search for GSE  ------------------------------------------------------------------------------#
#
    tabPanel("Search for datasets",#
       h3("Organize publicly available expression data"),#
       hr(),#
       sidebarLayout(#
       sidebarPanel(#
           # style = "position:fixed;width:30%",#
           h4("Search for datasets"),#
           p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
           hr(),#
           conditionalPanel(condition="input.searchpanel==1",#
           h4("Find expression data from publicly available datasets to begin defining your own experiment."),#
           p("Begin by searching for ",span("G",style="font-weight:bold"),"EO data ",span("se",style="font-weight:bold"),"ries (GSE) containing expression data for your cell or tissue type of interest."),#
           radioButtons("gplSelection", "Choose species:", choices = c("Mouse (GPL1261)" = "mouse", "Human (GPL570)" = "human")),#
           tagAppendAttributes(textInput("Key", "Enter search terms, separated by commas", value = ""),`data-proxy-click` = "Search"),#
           actionButton("Search", "Search"),#
           hr(),#
           p("When you have selected the appropriate datasets, click \'Retrieve GSM\' to collect sample information and then click on the \'Assign samples\' tab above."),#
           actionButton("getGSM", "Retrieve GSM")),#
           conditionalPanel(condition="input.searchpanel==2",#
           h4("Define the categories that you wish to assign each sample (GSM) for comparison."),#
           splitLayout(cellWidths=c("10%","90%"), icon("circle"),textInput("cat1", label=NULL, placeholder="Category 1")),#
           textInput("cat2", label=NULL, placeholder="Category 2"),#
           textInput("cat3", label=NULL, placeholder="Category 3 (optional)"),#
           ### https://www.aridhia.com/blog/the-sky-is-not-the-limit-embedding-raw-html-and-javascript-to-create-dynamic-ui-elements-in-shiny-applications/   #
           ### ^ this should help with dynamically adding/subtracting categories#
           hr(),#
           h4("Highlight samples, then click to Assign them to the specificed category."),#
           uiOutput("categorySelect"),#
           actionButton("Assign", "Assign GSM to Category")),#
           conditionalPanel(condition="input.searchpanel==3",#
               h4("Thank you for using receptoR!"),#
               p(" Please enter your name and any comments/bugs/questions/requests in the box below, then click the \'Download and Process\' button to retrieve the raw files from the NCBI server and process them based on their assigned categories."),#
               textAreaInput("comments","Comments",width="100%",height="100px",resize="vertical"),#
               textInput("downloadId","Download ID"),#
               actionButton("downloadCEL","Download and Process"))#
       ),#
       mainPanel(#
           # Search GSE based on species#
        tabsetPanel(#
        tabPanel("Search", value=1,#
            h4("GEO data series (\'GSE\') matching search query"), # return search here!#
            DT::dataTableOutput("filteredgse")#
        ),#
        # Assign samples to categories ------------------------------------------------------#
        tabPanel("Assign", value=2,#
            h4("From the selected series' (GSE) assign individual samples (GSM) to categories of your choosing."),#
            DT::dataTableOutput("gsm_table")#
        ),#
        # This will be where the CEL files are downloaded (confirmation, etc) ------------#
        tabPanel("Process", value=3,#
        h4("Please confirm samples are properly categorized."),#
        p("Expression samples annotated:"),#
                DT::dataTableOutput("finishedtable")#
        ),#
        id = "searchpanel"#
        )#
        )#
        )#
    ),#
    # Load Gene Expression Data tab -------------------------------------#
    tabPanel("Load expression data",#
        h3("Pick from user-defined experiments to perform analyses"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Load expression data"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            hr(),#
            selectInput(inputId="user_data",label="Select user data for analysis",choices=c("none"="none","Photoreceptors v RPE"="2018-04-13_app_data.rda"),selected="none"),#
            br(),#
            uiOutput("geneListsUI"),#
            br(),#
            uiOutput("geneUI")#
        ),#
        mainPanel(#
            tabsetPanel(type="tabs",selected="Gene-level expression",#
            tabPanel("Experimental design",h4("Category definitions and contrasts"),p("Coming soon!")),#
            tabPanel("Gene-level expression",#
                fluidRow(#
                column(6, h4("Average Expression"), DT::dataTableOutput("genes")),#
                column(6, h4("Gene Boxplot"), plotOutput("singleGenePlot"))#
            )))#
        )#
        )#
    ),#
    # Magnitude expression tab ------------------------------------------------------------------------------#
#
    tabPanel("Absolute expression",#
        h3("Compare genes based on absolute expression"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Absolute expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            # style = "position:fixed",#
            checkboxGroupInput("tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            br(),#
            checkboxInput("de_state", label = "Show differential expressed only", value = TRUE),#
            uiOutput("de_choices"),#
            br(),#
            conditionalPanel(condition="input.absexpanel==1",#
                h3("Heatmap parameters"),#
                checkboxInput("hm_probes", "Show probe-level", value = FALSE),#
                checkboxInput("hm_gsm", "Show GSM (column names)", value = TRUE),#
                checkboxInput("hm_rownames", "Show rownames", value = TRUE),#
                checkboxInput("hm_col_cluster", "Cluster columns", value = TRUE),#
                checkboxInput("hm_row_cluster", "Cluster rows", value = TRUE),#
                h4("Select plot dimensions (px)"),#
                numericInput("hm_width", "Width", value = 900, min = 100, max = 2400, step = 10),#
                numericInput("hm_height", "Height", value = 1200, min = 100, max = 2400, step = 10))#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("Heatmap", value=1, uiOutput("heatmap_ui")),#
            tabPanel("Summary boxplots", plotOutput("overallPlot", height = 600)),#
            tabPanel("By-gene boxplots", plotOutput("byGenePlot", height = 600)),#
            id = "absexpanel"#
        )#
        )#
        )#
    ),#
#
    # Mixomics tab ---------------------------------------------#
    tabPanel("Relative expression",#
        h3("Compare genes based on relative expression between experimental groups"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Relative expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            checkboxGroupInput("pls_tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            checkboxInput("pls_probe", "Perform PLS-DA at probe level", value = FALSE),#
            br(),#
            h4("Gene contribution plot"),#
            uiOutput("numGenesUI"),#
            radioButtons("pls_ncomp", "Select component for gene contribution plot", choices = c(1,2)),#
            br()#
            # downloadButton("pls_download", "Download gene contribution data")#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("PCA Analysis", plotOutput("indPlot", height = 800)),#
            tabPanel("Circle variance", plotOutput("varPlot", height = 800)),#
            tabPanel("Loadings plot", plotOutput("contribPlot", height = 800))#
        ),#
        position = c("right","left"),#
        fluid = TRUE#
        )#
        )#
    )#
)#
)
test()
ui <- fluidPage(#
tags$head(tags$script(HTML(jscode))),#
# tags$script(HTML("$('body').addClass('fixed);")),#
shinyjs::useShinyjs(),#
navbarPage("receptoR",#
    theme = shinytheme("spacelab"),#
#
# Start page  ------------------------------------------------------------------------------#
#
    tabPanel("Start here",#
       h3("Welcome to receptoR!"),#
       hr(),#
       sidebarLayout(#
           sidebarPanel(#
               h4("receptoR is an automated hypothesis generation software to identify cellular signaling pathways from transcriptomics data."),#
               p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky. Andouille t-bone biltong bacon beef ribs boudin frankfurter ham hock pork loin capicola tail ground round brisket tenderloin tri-tip. Ham pork bacon strip steak, ball tip leberkas meatball capicola pork loin. Ribeye turducken tri-tip jowl filet mignon drumstick shank corned beef prosciutto spare ribs sausage leberkas cupim burgdoggen bacon.",style="color:#D8BFD8"),#
               hr(),#
               p("(C) 2019 Derek Toms")),#
           mainPanel(#
               p("This software allows you to browse and analyze public transcriptomics data. To proceed, click \'Search for datasets\', above"),#
               img(src="overview.png"),#
               p("Spicy jalapeno bacon ipsum dolor amet brisket ribeye tri-tip tail meatloaf ground round salami fatback. Ball tip flank pork turkey prosciutto. Venison burgdoggen beef pork hamburger tongue shankle rump frankfurter kielbasa pastrami pork belly. T-bone fatback venison tenderloin salami biltong turkey chuck.",style="color:#D8BFD8"),#
#
p("Turkey tenderloin buffalo frankfurter, strip steak capicola filet mignon ribeye cow t-bone biltong. Tri-tip hamburger ham hock, shank landjaeger kielbasa pork loin spare ribs pastrami salami shoulder alcatra. Biltong tail brisket, turkey beef ribs hamburger prosciutto bacon tenderloin pancetta shank venison picanha cupim. Frankfurter porchetta turkey biltong corned beef, burgdoggen prosciutto jerky tail. Capicola beef ribs burgdoggen pancetta, frankfurter leberkas pig. Filet mignon jerky ground round cow burgdoggen, shoulder boudin ham hock pancetta.",style="color:#D8BFD8"),#
#
p("Sirloin salami strip steak burgdoggen pork chop ribeye, pastrami fatback short ribs corned beef. Beef shank shoulder, leberkas pancetta ground round jowl tenderloin ribeye hamburger shankle flank. Strip steak short loin kevin pork belly meatball swine sausage ham jowl pig tongue venison fatback t-bone beef. Spare ribs shoulder ham hock strip steak pastrami.",style="color:#D8BFD8")#
               ))#
        ),#
#
# Search for GSE  ------------------------------------------------------------------------------#
#
    tabPanel("Search for datasets",#
       h3("Organize publicly available expression data"),#
       hr(),#
       sidebarLayout(#
       sidebarPanel(#
           # style = "position:fixed;width:30%",#
           h4("Search for datasets"),#
           p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
           hr(),#
           conditionalPanel(condition="input.searchpanel==1",#
           h4("Find expression data from publicly available datasets to begin defining your own experiment."),#
           p("Begin by searching for ",span("G",style="font-weight:bold"),"EO data ",span("se",style="font-weight:bold"),"ries (GSE) containing expression data for your cell or tissue type of interest."),#
           radioButtons("gplSelection", "Choose species:", choices = c("Mouse (GPL1261)" = "mouse", "Human (GPL570)" = "human")),#
           tagAppendAttributes(textInput("Key", "Enter search terms, separated by commas", value = ""),`data-proxy-click` = "Search"),#
           actionButton("Search", "Search"),#
           hr(),#
           p("When you have selected the appropriate datasets, click \'Retrieve GSM\' to collect sample information and then click on the \'Assign samples\' tab above."),#
           actionButton("getGSM", "Retrieve GSM")),#
           conditionalPanel(condition="input.searchpanel==2",#
           h4("Define the categories that you wish to assign each sample (GSM) for comparison."),#
           splitLayout(cellWidths=c("10%","90%"), icon("skull"),textInput("cat1", label=NULL, placeholder="Category 1")),#
           textInput("cat2", label=NULL, placeholder="Category 2"),#
           textInput("cat3", label=NULL, placeholder="Category 3 (optional)"),#
           ### https://www.aridhia.com/blog/the-sky-is-not-the-limit-embedding-raw-html-and-javascript-to-create-dynamic-ui-elements-in-shiny-applications/   #
           ### ^ this should help with dynamically adding/subtracting categories#
           hr(),#
           h4("Highlight samples, then click to Assign them to the specificed category."),#
           uiOutput("categorySelect"),#
           actionButton("Assign", "Assign GSM to Category")),#
           conditionalPanel(condition="input.searchpanel==3",#
               h4("Thank you for using receptoR!"),#
               p(" Please enter your name and any comments/bugs/questions/requests in the box below, then click the \'Download and Process\' button to retrieve the raw files from the NCBI server and process them based on their assigned categories."),#
               textAreaInput("comments","Comments",width="100%",height="100px",resize="vertical"),#
               textInput("downloadId","Download ID"),#
               actionButton("downloadCEL","Download and Process"))#
       ),#
       mainPanel(#
           # Search GSE based on species#
        tabsetPanel(#
        tabPanel("Search", value=1,#
            h4("GEO data series (\'GSE\') matching search query"), # return search here!#
            DT::dataTableOutput("filteredgse")#
        ),#
        # Assign samples to categories ------------------------------------------------------#
        tabPanel("Assign", value=2,#
            h4("From the selected series' (GSE) assign individual samples (GSM) to categories of your choosing."),#
            DT::dataTableOutput("gsm_table")#
        ),#
        # This will be where the CEL files are downloaded (confirmation, etc) ------------#
        tabPanel("Process", value=3,#
        h4("Please confirm samples are properly categorized."),#
        p("Expression samples annotated:"),#
                DT::dataTableOutput("finishedtable")#
        ),#
        id = "searchpanel"#
        )#
        )#
        )#
    ),#
    # Load Gene Expression Data tab -------------------------------------#
    tabPanel("Load expression data",#
        h3("Pick from user-defined experiments to perform analyses"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Load expression data"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            hr(),#
            selectInput(inputId="user_data",label="Select user data for analysis",choices=c("none"="none","Photoreceptors v RPE"="2018-04-13_app_data.rda"),selected="none"),#
            br(),#
            uiOutput("geneListsUI"),#
            br(),#
            uiOutput("geneUI")#
        ),#
        mainPanel(#
            tabsetPanel(type="tabs",selected="Gene-level expression",#
            tabPanel("Experimental design",h4("Category definitions and contrasts"),p("Coming soon!")),#
            tabPanel("Gene-level expression",#
                fluidRow(#
                column(6, h4("Average Expression"), DT::dataTableOutput("genes")),#
                column(6, h4("Gene Boxplot"), plotOutput("singleGenePlot"))#
            )))#
        )#
        )#
    ),#
    # Magnitude expression tab ------------------------------------------------------------------------------#
#
    tabPanel("Absolute expression",#
        h3("Compare genes based on absolute expression"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Absolute expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            # style = "position:fixed",#
            checkboxGroupInput("tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            br(),#
            checkboxInput("de_state", label = "Show differential expressed only", value = TRUE),#
            uiOutput("de_choices"),#
            br(),#
            conditionalPanel(condition="input.absexpanel==1",#
                h3("Heatmap parameters"),#
                checkboxInput("hm_probes", "Show probe-level", value = FALSE),#
                checkboxInput("hm_gsm", "Show GSM (column names)", value = TRUE),#
                checkboxInput("hm_rownames", "Show rownames", value = TRUE),#
                checkboxInput("hm_col_cluster", "Cluster columns", value = TRUE),#
                checkboxInput("hm_row_cluster", "Cluster rows", value = TRUE),#
                h4("Select plot dimensions (px)"),#
                numericInput("hm_width", "Width", value = 900, min = 100, max = 2400, step = 10),#
                numericInput("hm_height", "Height", value = 1200, min = 100, max = 2400, step = 10))#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("Heatmap", value=1, uiOutput("heatmap_ui")),#
            tabPanel("Summary boxplots", plotOutput("overallPlot", height = 600)),#
            tabPanel("By-gene boxplots", plotOutput("byGenePlot", height = 600)),#
            id = "absexpanel"#
        )#
        )#
        )#
    ),#
#
    # Mixomics tab ---------------------------------------------#
    tabPanel("Relative expression",#
        h3("Compare genes based on relative expression between experimental groups"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Relative expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            checkboxGroupInput("pls_tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            checkboxInput("pls_probe", "Perform PLS-DA at probe level", value = FALSE),#
            br(),#
            h4("Gene contribution plot"),#
            uiOutput("numGenesUI"),#
            radioButtons("pls_ncomp", "Select component for gene contribution plot", choices = c(1,2)),#
            br()#
            # downloadButton("pls_download", "Download gene contribution data")#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("PCA Analysis", plotOutput("indPlot", height = 800)),#
            tabPanel("Circle variance", plotOutput("varPlot", height = 800)),#
            tabPanel("Loadings plot", plotOutput("contribPlot", height = 800))#
        ),#
        position = c("right","left"),#
        fluid = TRUE#
        )#
        )#
    )#
)#
)
test()
ui <- fluidPage(#
tags$head(tags$script(HTML(jscode))),#
# tags$script(HTML("$('body').addClass('fixed);")),#
shinyjs::useShinyjs(),#
navbarPage("receptoR",#
    theme = shinytheme("spacelab"),#
#
# Start page  ------------------------------------------------------------------------------#
#
    tabPanel("Start here",#
       h3("Welcome to receptoR!"),#
       hr(),#
       sidebarLayout(#
           sidebarPanel(#
               h4("receptoR is an automated hypothesis generation software to identify cellular signaling pathways from transcriptomics data."),#
               p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky. Andouille t-bone biltong bacon beef ribs boudin frankfurter ham hock pork loin capicola tail ground round brisket tenderloin tri-tip. Ham pork bacon strip steak, ball tip leberkas meatball capicola pork loin. Ribeye turducken tri-tip jowl filet mignon drumstick shank corned beef prosciutto spare ribs sausage leberkas cupim burgdoggen bacon.",style="color:#D8BFD8"),#
               hr(),#
               p("(C) 2019 Derek Toms")),#
           mainPanel(#
               p("This software allows you to browse and analyze public transcriptomics data. To proceed, click \'Search for datasets\', above"),#
               img(src="overview.png"),#
               p("Spicy jalapeno bacon ipsum dolor amet brisket ribeye tri-tip tail meatloaf ground round salami fatback. Ball tip flank pork turkey prosciutto. Venison burgdoggen beef pork hamburger tongue shankle rump frankfurter kielbasa pastrami pork belly. T-bone fatback venison tenderloin salami biltong turkey chuck.",style="color:#D8BFD8"),#
#
p("Turkey tenderloin buffalo frankfurter, strip steak capicola filet mignon ribeye cow t-bone biltong. Tri-tip hamburger ham hock, shank landjaeger kielbasa pork loin spare ribs pastrami salami shoulder alcatra. Biltong tail brisket, turkey beef ribs hamburger prosciutto bacon tenderloin pancetta shank venison picanha cupim. Frankfurter porchetta turkey biltong corned beef, burgdoggen prosciutto jerky tail. Capicola beef ribs burgdoggen pancetta, frankfurter leberkas pig. Filet mignon jerky ground round cow burgdoggen, shoulder boudin ham hock pancetta.",style="color:#D8BFD8"),#
#
p("Sirloin salami strip steak burgdoggen pork chop ribeye, pastrami fatback short ribs corned beef. Beef shank shoulder, leberkas pancetta ground round jowl tenderloin ribeye hamburger shankle flank. Strip steak short loin kevin pork belly meatball swine sausage ham jowl pig tongue venison fatback t-bone beef. Spare ribs shoulder ham hock strip steak pastrami.",style="color:#D8BFD8")#
               ))#
        ),#
#
# Search for GSE  ------------------------------------------------------------------------------#
#
    tabPanel("Search for datasets",#
       h3("Organize publicly available expression data"),#
       hr(),#
       sidebarLayout(#
       sidebarPanel(#
           # style = "position:fixed;width:30%",#
           h4("Search for datasets"),#
           p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
           hr(),#
           conditionalPanel(condition="input.searchpanel==1",#
           h4("Find expression data from publicly available datasets to begin defining your own experiment."),#
           p("Begin by searching for ",span("G",style="font-weight:bold"),"EO data ",span("se",style="font-weight:bold"),"ries (GSE) containing expression data for your cell or tissue type of interest."),#
           radioButtons("gplSelection", "Choose species:", choices = c("Mouse (GPL1261)" = "mouse", "Human (GPL570)" = "human")),#
           tagAppendAttributes(textInput("Key", "Enter search terms, separated by commas", value = ""),`data-proxy-click` = "Search"),#
           actionButton("Search", "Search"),#
           hr(),#
           p("When you have selected the appropriate datasets, click \'Retrieve GSM\' to collect sample information and then click on the \'Assign samples\' tab above."),#
           actionButton("getGSM", "Retrieve GSM")),#
           conditionalPanel(condition="input.searchpanel==2",#
           h4("Define the categories that you wish to assign each sample (GSM) for comparison."),#
           splitLayout(cellWidths=c("10%","90%"), icon("arrow-alt-circle-right"),textInput("cat1", label=NULL, placeholder="Category 1")),#
           textInput("cat2", label=NULL, placeholder="Category 2"),#
           textInput("cat3", label=NULL, placeholder="Category 3 (optional)"),#
           ### https://www.aridhia.com/blog/the-sky-is-not-the-limit-embedding-raw-html-and-javascript-to-create-dynamic-ui-elements-in-shiny-applications/   #
           ### ^ this should help with dynamically adding/subtracting categories#
           hr(),#
           h4("Highlight samples, then click to Assign them to the specificed category."),#
           uiOutput("categorySelect"),#
           actionButton("Assign", "Assign GSM to Category")),#
           conditionalPanel(condition="input.searchpanel==3",#
               h4("Thank you for using receptoR!"),#
               p(" Please enter your name and any comments/bugs/questions/requests in the box below, then click the \'Download and Process\' button to retrieve the raw files from the NCBI server and process them based on their assigned categories."),#
               textAreaInput("comments","Comments",width="100%",height="100px",resize="vertical"),#
               textInput("downloadId","Download ID"),#
               actionButton("downloadCEL","Download and Process"))#
       ),#
       mainPanel(#
           # Search GSE based on species#
        tabsetPanel(#
        tabPanel("Search", value=1,#
            h4("GEO data series (\'GSE\') matching search query"), # return search here!#
            DT::dataTableOutput("filteredgse")#
        ),#
        # Assign samples to categories ------------------------------------------------------#
        tabPanel("Assign", value=2,#
            h4("From the selected series' (GSE) assign individual samples (GSM) to categories of your choosing."),#
            DT::dataTableOutput("gsm_table")#
        ),#
        # This will be where the CEL files are downloaded (confirmation, etc) ------------#
        tabPanel("Process", value=3,#
        h4("Please confirm samples are properly categorized."),#
        p("Expression samples annotated:"),#
                DT::dataTableOutput("finishedtable")#
        ),#
        id = "searchpanel"#
        )#
        )#
        )#
    ),#
    # Load Gene Expression Data tab -------------------------------------#
    tabPanel("Load expression data",#
        h3("Pick from user-defined experiments to perform analyses"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Load expression data"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            hr(),#
            selectInput(inputId="user_data",label="Select user data for analysis",choices=c("none"="none","Photoreceptors v RPE"="2018-04-13_app_data.rda"),selected="none"),#
            br(),#
            uiOutput("geneListsUI"),#
            br(),#
            uiOutput("geneUI")#
        ),#
        mainPanel(#
            tabsetPanel(type="tabs",selected="Gene-level expression",#
            tabPanel("Experimental design",h4("Category definitions and contrasts"),p("Coming soon!")),#
            tabPanel("Gene-level expression",#
                fluidRow(#
                column(6, h4("Average Expression"), DT::dataTableOutput("genes")),#
                column(6, h4("Gene Boxplot"), plotOutput("singleGenePlot"))#
            )))#
        )#
        )#
    ),#
    # Magnitude expression tab ------------------------------------------------------------------------------#
#
    tabPanel("Absolute expression",#
        h3("Compare genes based on absolute expression"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Absolute expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            # style = "position:fixed",#
            checkboxGroupInput("tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            br(),#
            checkboxInput("de_state", label = "Show differential expressed only", value = TRUE),#
            uiOutput("de_choices"),#
            br(),#
            conditionalPanel(condition="input.absexpanel==1",#
                h3("Heatmap parameters"),#
                checkboxInput("hm_probes", "Show probe-level", value = FALSE),#
                checkboxInput("hm_gsm", "Show GSM (column names)", value = TRUE),#
                checkboxInput("hm_rownames", "Show rownames", value = TRUE),#
                checkboxInput("hm_col_cluster", "Cluster columns", value = TRUE),#
                checkboxInput("hm_row_cluster", "Cluster rows", value = TRUE),#
                h4("Select plot dimensions (px)"),#
                numericInput("hm_width", "Width", value = 900, min = 100, max = 2400, step = 10),#
                numericInput("hm_height", "Height", value = 1200, min = 100, max = 2400, step = 10))#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("Heatmap", value=1, uiOutput("heatmap_ui")),#
            tabPanel("Summary boxplots", plotOutput("overallPlot", height = 600)),#
            tabPanel("By-gene boxplots", plotOutput("byGenePlot", height = 600)),#
            id = "absexpanel"#
        )#
        )#
        )#
    ),#
#
    # Mixomics tab ---------------------------------------------#
    tabPanel("Relative expression",#
        h3("Compare genes based on relative expression between experimental groups"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Relative expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            checkboxGroupInput("pls_tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            checkboxInput("pls_probe", "Perform PLS-DA at probe level", value = FALSE),#
            br(),#
            h4("Gene contribution plot"),#
            uiOutput("numGenesUI"),#
            radioButtons("pls_ncomp", "Select component for gene contribution plot", choices = c(1,2)),#
            br()#
            # downloadButton("pls_download", "Download gene contribution data")#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("PCA Analysis", plotOutput("indPlot", height = 800)),#
            tabPanel("Circle variance", plotOutput("varPlot", height = 800)),#
            tabPanel("Loadings plot", plotOutput("contribPlot", height = 800))#
        ),#
        position = c("right","left"),#
        fluid = TRUE#
        )#
        )#
    )#
)#
)
test()
ui <- fluidPage(#
tags$head(tags$script(HTML(jscode))),#
# tags$script(HTML("$('body').addClass('fixed);")),#
shinyjs::useShinyjs(),#
navbarPage("receptoR",#
    theme = shinytheme("spacelab"),#
#
# Start page  ------------------------------------------------------------------------------#
#
    tabPanel("Start here",#
       h3("Welcome to receptoR!"),#
       hr(),#
       sidebarLayout(#
           sidebarPanel(#
               h4("receptoR is an automated hypothesis generation software to identify cellular signaling pathways from transcriptomics data."),#
               p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky. Andouille t-bone biltong bacon beef ribs boudin frankfurter ham hock pork loin capicola tail ground round brisket tenderloin tri-tip. Ham pork bacon strip steak, ball tip leberkas meatball capicola pork loin. Ribeye turducken tri-tip jowl filet mignon drumstick shank corned beef prosciutto spare ribs sausage leberkas cupim burgdoggen bacon.",style="color:#D8BFD8"),#
               hr(),#
               p("(C) 2019 Derek Toms")),#
           mainPanel(#
               p("This software allows you to browse and analyze public transcriptomics data. To proceed, click \'Search for datasets\', above"),#
               img(src="overview.png"),#
               p("Spicy jalapeno bacon ipsum dolor amet brisket ribeye tri-tip tail meatloaf ground round salami fatback. Ball tip flank pork turkey prosciutto. Venison burgdoggen beef pork hamburger tongue shankle rump frankfurter kielbasa pastrami pork belly. T-bone fatback venison tenderloin salami biltong turkey chuck.",style="color:#D8BFD8"),#
#
p("Turkey tenderloin buffalo frankfurter, strip steak capicola filet mignon ribeye cow t-bone biltong. Tri-tip hamburger ham hock, shank landjaeger kielbasa pork loin spare ribs pastrami salami shoulder alcatra. Biltong tail brisket, turkey beef ribs hamburger prosciutto bacon tenderloin pancetta shank venison picanha cupim. Frankfurter porchetta turkey biltong corned beef, burgdoggen prosciutto jerky tail. Capicola beef ribs burgdoggen pancetta, frankfurter leberkas pig. Filet mignon jerky ground round cow burgdoggen, shoulder boudin ham hock pancetta.",style="color:#D8BFD8"),#
#
p("Sirloin salami strip steak burgdoggen pork chop ribeye, pastrami fatback short ribs corned beef. Beef shank shoulder, leberkas pancetta ground round jowl tenderloin ribeye hamburger shankle flank. Strip steak short loin kevin pork belly meatball swine sausage ham jowl pig tongue venison fatback t-bone beef. Spare ribs shoulder ham hock strip steak pastrami.",style="color:#D8BFD8")#
               ))#
        ),#
#
# Search for GSE  ------------------------------------------------------------------------------#
#
    tabPanel("Search for datasets",#
       h3("Organize publicly available expression data"),#
       hr(),#
       sidebarLayout(#
       sidebarPanel(#
           # style = "position:fixed;width:30%",#
           h4("Search for datasets"),#
           p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
           hr(),#
           conditionalPanel(condition="input.searchpanel==1",#
           h4("Find expression data from publicly available datasets to begin defining your own experiment."),#
           p("Begin by searching for ",span("G",style="font-weight:bold"),"EO data ",span("se",style="font-weight:bold"),"ries (GSE) containing expression data for your cell or tissue type of interest."),#
           radioButtons("gplSelection", "Choose species:", choices = c("Mouse (GPL1261)" = "mouse", "Human (GPL570)" = "human")),#
           tagAppendAttributes(textInput("Key", "Enter search terms, separated by commas", value = ""),`data-proxy-click` = "Search"),#
           actionButton("Search", "Search"),#
           hr(),#
           p("When you have selected the appropriate datasets, click \'Retrieve GSM\' to collect sample information and then click on the \'Assign samples\' tab above."),#
           actionButton("getGSM", "Retrieve GSM")),#
           conditionalPanel(condition="input.searchpanel==2",#
           h4("Define the categories that you wish to assign each sample (GSM) for comparison."),#
           splitLayout(cellWidths=c("90%","10%"), textInput("cat1", label=NULL, placeholder="Category 1"),icon("circle")),#
           textInput("cat2", label=NULL, placeholder="Category 2"),#
           textInput("cat3", label=NULL, placeholder="Category 3 (optional)"),#
           ### https://www.aridhia.com/blog/the-sky-is-not-the-limit-embedding-raw-html-and-javascript-to-create-dynamic-ui-elements-in-shiny-applications/   #
           ### ^ this should help with dynamically adding/subtracting categories#
           hr(),#
           h4("Highlight samples, then click to Assign them to the specificed category."),#
           uiOutput("categorySelect"),#
           actionButton("Assign", "Assign GSM to Category")),#
           conditionalPanel(condition="input.searchpanel==3",#
               h4("Thank you for using receptoR!"),#
               p(" Please enter your name and any comments/bugs/questions/requests in the box below, then click the \'Download and Process\' button to retrieve the raw files from the NCBI server and process them based on their assigned categories."),#
               textAreaInput("comments","Comments",width="100%",height="100px",resize="vertical"),#
               textInput("downloadId","Download ID"),#
               actionButton("downloadCEL","Download and Process"))#
       ),#
       mainPanel(#
           # Search GSE based on species#
        tabsetPanel(#
        tabPanel("Search", value=1,#
            h4("GEO data series (\'GSE\') matching search query"), # return search here!#
            DT::dataTableOutput("filteredgse")#
        ),#
        # Assign samples to categories ------------------------------------------------------#
        tabPanel("Assign", value=2,#
            h4("From the selected series' (GSE) assign individual samples (GSM) to categories of your choosing."),#
            DT::dataTableOutput("gsm_table")#
        ),#
        # This will be where the CEL files are downloaded (confirmation, etc) ------------#
        tabPanel("Process", value=3,#
        h4("Please confirm samples are properly categorized."),#
        p("Expression samples annotated:"),#
                DT::dataTableOutput("finishedtable")#
        ),#
        id = "searchpanel"#
        )#
        )#
        )#
    ),#
    # Load Gene Expression Data tab -------------------------------------#
    tabPanel("Load expression data",#
        h3("Pick from user-defined experiments to perform analyses"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Load expression data"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            hr(),#
            selectInput(inputId="user_data",label="Select user data for analysis",choices=c("none"="none","Photoreceptors v RPE"="2018-04-13_app_data.rda"),selected="none"),#
            br(),#
            uiOutput("geneListsUI"),#
            br(),#
            uiOutput("geneUI")#
        ),#
        mainPanel(#
            tabsetPanel(type="tabs",selected="Gene-level expression",#
            tabPanel("Experimental design",h4("Category definitions and contrasts"),p("Coming soon!")),#
            tabPanel("Gene-level expression",#
                fluidRow(#
                column(6, h4("Average Expression"), DT::dataTableOutput("genes")),#
                column(6, h4("Gene Boxplot"), plotOutput("singleGenePlot"))#
            )))#
        )#
        )#
    ),#
    # Magnitude expression tab ------------------------------------------------------------------------------#
#
    tabPanel("Absolute expression",#
        h3("Compare genes based on absolute expression"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Absolute expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            # style = "position:fixed",#
            checkboxGroupInput("tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            br(),#
            checkboxInput("de_state", label = "Show differential expressed only", value = TRUE),#
            uiOutput("de_choices"),#
            br(),#
            conditionalPanel(condition="input.absexpanel==1",#
                h3("Heatmap parameters"),#
                checkboxInput("hm_probes", "Show probe-level", value = FALSE),#
                checkboxInput("hm_gsm", "Show GSM (column names)", value = TRUE),#
                checkboxInput("hm_rownames", "Show rownames", value = TRUE),#
                checkboxInput("hm_col_cluster", "Cluster columns", value = TRUE),#
                checkboxInput("hm_row_cluster", "Cluster rows", value = TRUE),#
                h4("Select plot dimensions (px)"),#
                numericInput("hm_width", "Width", value = 900, min = 100, max = 2400, step = 10),#
                numericInput("hm_height", "Height", value = 1200, min = 100, max = 2400, step = 10))#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("Heatmap", value=1, uiOutput("heatmap_ui")),#
            tabPanel("Summary boxplots", plotOutput("overallPlot", height = 600)),#
            tabPanel("By-gene boxplots", plotOutput("byGenePlot", height = 600)),#
            id = "absexpanel"#
        )#
        )#
        )#
    ),#
#
    # Mixomics tab ---------------------------------------------#
    tabPanel("Relative expression",#
        h3("Compare genes based on relative expression between experimental groups"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Relative expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            checkboxGroupInput("pls_tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            checkboxInput("pls_probe", "Perform PLS-DA at probe level", value = FALSE),#
            br(),#
            h4("Gene contribution plot"),#
            uiOutput("numGenesUI"),#
            radioButtons("pls_ncomp", "Select component for gene contribution plot", choices = c(1,2)),#
            br()#
            # downloadButton("pls_download", "Download gene contribution data")#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("PCA Analysis", plotOutput("indPlot", height = 800)),#
            tabPanel("Circle variance", plotOutput("varPlot", height = 800)),#
            tabPanel("Loadings plot", plotOutput("contribPlot", height = 800))#
        ),#
        position = c("right","left"),#
        fluid = TRUE#
        )#
        )#
    )#
)#
)
test()
ui <- fluidPage(#
tags$head(tags$script(HTML(jscode))),#
# tags$script(HTML("$('body').addClass('fixed);")),#
shinyjs::useShinyjs(),#
navbarPage("receptoR",#
    theme = shinytheme("spacelab"),#
#
# Start page  ------------------------------------------------------------------------------#
#
    tabPanel("Start here",#
       h3("Welcome to receptoR!"),#
       hr(),#
       sidebarLayout(#
           sidebarPanel(#
               h4("receptoR is an automated hypothesis generation software to identify cellular signaling pathways from transcriptomics data."),#
               p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky. Andouille t-bone biltong bacon beef ribs boudin frankfurter ham hock pork loin capicola tail ground round brisket tenderloin tri-tip. Ham pork bacon strip steak, ball tip leberkas meatball capicola pork loin. Ribeye turducken tri-tip jowl filet mignon drumstick shank corned beef prosciutto spare ribs sausage leberkas cupim burgdoggen bacon.",style="color:#D8BFD8"),#
               hr(),#
               p("(C) 2019 Derek Toms")),#
           mainPanel(#
               p("This software allows you to browse and analyze public transcriptomics data. To proceed, click \'Search for datasets\', above"),#
               img(src="overview.png"),#
               p("Spicy jalapeno bacon ipsum dolor amet brisket ribeye tri-tip tail meatloaf ground round salami fatback. Ball tip flank pork turkey prosciutto. Venison burgdoggen beef pork hamburger tongue shankle rump frankfurter kielbasa pastrami pork belly. T-bone fatback venison tenderloin salami biltong turkey chuck.",style="color:#D8BFD8"),#
#
p("Turkey tenderloin buffalo frankfurter, strip steak capicola filet mignon ribeye cow t-bone biltong. Tri-tip hamburger ham hock, shank landjaeger kielbasa pork loin spare ribs pastrami salami shoulder alcatra. Biltong tail brisket, turkey beef ribs hamburger prosciutto bacon tenderloin pancetta shank venison picanha cupim. Frankfurter porchetta turkey biltong corned beef, burgdoggen prosciutto jerky tail. Capicola beef ribs burgdoggen pancetta, frankfurter leberkas pig. Filet mignon jerky ground round cow burgdoggen, shoulder boudin ham hock pancetta.",style="color:#D8BFD8"),#
#
p("Sirloin salami strip steak burgdoggen pork chop ribeye, pastrami fatback short ribs corned beef. Beef shank shoulder, leberkas pancetta ground round jowl tenderloin ribeye hamburger shankle flank. Strip steak short loin kevin pork belly meatball swine sausage ham jowl pig tongue venison fatback t-bone beef. Spare ribs shoulder ham hock strip steak pastrami.",style="color:#D8BFD8")#
               ))#
        ),#
#
# Search for GSE  ------------------------------------------------------------------------------#
#
    tabPanel("Search for datasets",#
       h3("Organize publicly available expression data"),#
       hr(),#
       sidebarLayout(#
       sidebarPanel(#
           # style = "position:fixed;width:30%",#
           h4("Search for datasets"),#
           p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
           hr(),#
           conditionalPanel(condition="input.searchpanel==1",#
           h4("Find expression data from publicly available datasets to begin defining your own experiment."),#
           p("Begin by searching for ",span("G",style="font-weight:bold"),"EO data ",span("se",style="font-weight:bold"),"ries (GSE) containing expression data for your cell or tissue type of interest."),#
           radioButtons("gplSelection", "Choose species:", choices = c("Mouse (GPL1261)" = "mouse", "Human (GPL570)" = "human")),#
           tagAppendAttributes(textInput("Key", "Enter search terms, separated by commas", value = ""),`data-proxy-click` = "Search"),#
           actionButton("Search", "Search"),#
           hr(),#
           p("When you have selected the appropriate datasets, click \'Retrieve GSM\' to collect sample information and then click on the \'Assign samples\' tab above."),#
           actionButton("getGSM", "Retrieve GSM")),#
           conditionalPanel(condition="input.searchpanel==2",#
           h4("Define the categories that you wish to assign each sample (GSM) for comparison."),#
           splitLayout(cellWidths=c("90%","10%"), textInput("cat1", label=NULL, placeholder="Category 1"),icon("circle",class="style:color=blue")),#
           textInput("cat2", label=NULL, placeholder="Category 2"),#
           textInput("cat3", label=NULL, placeholder="Category 3 (optional)"),#
           ### https://www.aridhia.com/blog/the-sky-is-not-the-limit-embedding-raw-html-and-javascript-to-create-dynamic-ui-elements-in-shiny-applications/   #
           ### ^ this should help with dynamically adding/subtracting categories#
           hr(),#
           h4("Highlight samples, then click to Assign them to the specificed category."),#
           uiOutput("categorySelect"),#
           actionButton("Assign", "Assign GSM to Category")),#
           conditionalPanel(condition="input.searchpanel==3",#
               h4("Thank you for using receptoR!"),#
               p(" Please enter your name and any comments/bugs/questions/requests in the box below, then click the \'Download and Process\' button to retrieve the raw files from the NCBI server and process them based on their assigned categories."),#
               textAreaInput("comments","Comments",width="100%",height="100px",resize="vertical"),#
               textInput("downloadId","Download ID"),#
               actionButton("downloadCEL","Download and Process"))#
       ),#
       mainPanel(#
           # Search GSE based on species#
        tabsetPanel(#
        tabPanel("Search", value=1,#
            h4("GEO data series (\'GSE\') matching search query"), # return search here!#
            DT::dataTableOutput("filteredgse")#
        ),#
        # Assign samples to categories ------------------------------------------------------#
        tabPanel("Assign", value=2,#
            h4("From the selected series' (GSE) assign individual samples (GSM) to categories of your choosing."),#
            DT::dataTableOutput("gsm_table")#
        ),#
        # This will be where the CEL files are downloaded (confirmation, etc) ------------#
        tabPanel("Process", value=3,#
        h4("Please confirm samples are properly categorized."),#
        p("Expression samples annotated:"),#
                DT::dataTableOutput("finishedtable")#
        ),#
        id = "searchpanel"#
        )#
        )#
        )#
    ),#
    # Load Gene Expression Data tab -------------------------------------#
    tabPanel("Load expression data",#
        h3("Pick from user-defined experiments to perform analyses"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Load expression data"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            hr(),#
            selectInput(inputId="user_data",label="Select user data for analysis",choices=c("none"="none","Photoreceptors v RPE"="2018-04-13_app_data.rda"),selected="none"),#
            br(),#
            uiOutput("geneListsUI"),#
            br(),#
            uiOutput("geneUI")#
        ),#
        mainPanel(#
            tabsetPanel(type="tabs",selected="Gene-level expression",#
            tabPanel("Experimental design",h4("Category definitions and contrasts"),p("Coming soon!")),#
            tabPanel("Gene-level expression",#
                fluidRow(#
                column(6, h4("Average Expression"), DT::dataTableOutput("genes")),#
                column(6, h4("Gene Boxplot"), plotOutput("singleGenePlot"))#
            )))#
        )#
        )#
    ),#
    # Magnitude expression tab ------------------------------------------------------------------------------#
#
    tabPanel("Absolute expression",#
        h3("Compare genes based on absolute expression"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Absolute expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            # style = "position:fixed",#
            checkboxGroupInput("tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            br(),#
            checkboxInput("de_state", label = "Show differential expressed only", value = TRUE),#
            uiOutput("de_choices"),#
            br(),#
            conditionalPanel(condition="input.absexpanel==1",#
                h3("Heatmap parameters"),#
                checkboxInput("hm_probes", "Show probe-level", value = FALSE),#
                checkboxInput("hm_gsm", "Show GSM (column names)", value = TRUE),#
                checkboxInput("hm_rownames", "Show rownames", value = TRUE),#
                checkboxInput("hm_col_cluster", "Cluster columns", value = TRUE),#
                checkboxInput("hm_row_cluster", "Cluster rows", value = TRUE),#
                h4("Select plot dimensions (px)"),#
                numericInput("hm_width", "Width", value = 900, min = 100, max = 2400, step = 10),#
                numericInput("hm_height", "Height", value = 1200, min = 100, max = 2400, step = 10))#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("Heatmap", value=1, uiOutput("heatmap_ui")),#
            tabPanel("Summary boxplots", plotOutput("overallPlot", height = 600)),#
            tabPanel("By-gene boxplots", plotOutput("byGenePlot", height = 600)),#
            id = "absexpanel"#
        )#
        )#
        )#
    ),#
#
    # Mixomics tab ---------------------------------------------#
    tabPanel("Relative expression",#
        h3("Compare genes based on relative expression between experimental groups"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Relative expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            checkboxGroupInput("pls_tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            checkboxInput("pls_probe", "Perform PLS-DA at probe level", value = FALSE),#
            br(),#
            h4("Gene contribution plot"),#
            uiOutput("numGenesUI"),#
            radioButtons("pls_ncomp", "Select component for gene contribution plot", choices = c(1,2)),#
            br()#
            # downloadButton("pls_download", "Download gene contribution data")#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("PCA Analysis", plotOutput("indPlot", height = 800)),#
            tabPanel("Circle variance", plotOutput("varPlot", height = 800)),#
            tabPanel("Loadings plot", plotOutput("contribPlot", height = 800))#
        ),#
        position = c("right","left"),#
        fluid = TRUE#
        )#
        )#
    )#
)#
)
test()
ui <- fluidPage(#
tags$head(tags$script(HTML(jscode))),#
# tags$script(HTML("$('body').addClass('fixed);")),#
shinyjs::useShinyjs(),#
navbarPage("receptoR",#
    theme = shinytheme("spacelab"),#
#
# Start page  ------------------------------------------------------------------------------#
#
    tabPanel("Start here",#
       h3("Welcome to receptoR!"),#
       hr(),#
       sidebarLayout(#
           sidebarPanel(#
               h4("receptoR is an automated hypothesis generation software to identify cellular signaling pathways from transcriptomics data."),#
               p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky. Andouille t-bone biltong bacon beef ribs boudin frankfurter ham hock pork loin capicola tail ground round brisket tenderloin tri-tip. Ham pork bacon strip steak, ball tip leberkas meatball capicola pork loin. Ribeye turducken tri-tip jowl filet mignon drumstick shank corned beef prosciutto spare ribs sausage leberkas cupim burgdoggen bacon.",style="color:#D8BFD8"),#
               hr(),#
               p("(C) 2019 Derek Toms")),#
           mainPanel(#
               p("This software allows you to browse and analyze public transcriptomics data. To proceed, click \'Search for datasets\', above"),#
               img(src="overview.png"),#
               p("Spicy jalapeno bacon ipsum dolor amet brisket ribeye tri-tip tail meatloaf ground round salami fatback. Ball tip flank pork turkey prosciutto. Venison burgdoggen beef pork hamburger tongue shankle rump frankfurter kielbasa pastrami pork belly. T-bone fatback venison tenderloin salami biltong turkey chuck.",style="color:#D8BFD8"),#
#
p("Turkey tenderloin buffalo frankfurter, strip steak capicola filet mignon ribeye cow t-bone biltong. Tri-tip hamburger ham hock, shank landjaeger kielbasa pork loin spare ribs pastrami salami shoulder alcatra. Biltong tail brisket, turkey beef ribs hamburger prosciutto bacon tenderloin pancetta shank venison picanha cupim. Frankfurter porchetta turkey biltong corned beef, burgdoggen prosciutto jerky tail. Capicola beef ribs burgdoggen pancetta, frankfurter leberkas pig. Filet mignon jerky ground round cow burgdoggen, shoulder boudin ham hock pancetta.",style="color:#D8BFD8"),#
#
p("Sirloin salami strip steak burgdoggen pork chop ribeye, pastrami fatback short ribs corned beef. Beef shank shoulder, leberkas pancetta ground round jowl tenderloin ribeye hamburger shankle flank. Strip steak short loin kevin pork belly meatball swine sausage ham jowl pig tongue venison fatback t-bone beef. Spare ribs shoulder ham hock strip steak pastrami.",style="color:#D8BFD8")#
               ))#
        ),#
#
# Search for GSE  ------------------------------------------------------------------------------#
#
    tabPanel("Search for datasets",#
       h3("Organize publicly available expression data"),#
       hr(),#
       sidebarLayout(#
       sidebarPanel(#
           # style = "position:fixed;width:30%",#
           h4("Search for datasets"),#
           p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
           hr(),#
           conditionalPanel(condition="input.searchpanel==1",#
           h4("Find expression data from publicly available datasets to begin defining your own experiment."),#
           p("Begin by searching for ",span("G",style="font-weight:bold"),"EO data ",span("se",style="font-weight:bold"),"ries (GSE) containing expression data for your cell or tissue type of interest."),#
           radioButtons("gplSelection", "Choose species:", choices = c("Mouse (GPL1261)" = "mouse", "Human (GPL570)" = "human")),#
           tagAppendAttributes(textInput("Key", "Enter search terms, separated by commas", value = ""),`data-proxy-click` = "Search"),#
           actionButton("Search", "Search"),#
           hr(),#
           p("When you have selected the appropriate datasets, click \'Retrieve GSM\' to collect sample information and then click on the \'Assign samples\' tab above."),#
           actionButton("getGSM", "Retrieve GSM")),#
           conditionalPanel(condition="input.searchpanel==2",#
           h4("Define the categories that you wish to assign each sample (GSM) for comparison."),#
           splitLayout(cellWidths=c("90%","10%"), textInput("cat1", label=NULL, placeholder="Category 1"),icon("skull"),#
           textInput("cat2", label=NULL, placeholder="Category 2"),#
           textInput("cat3", label=NULL, placeholder="Category 3 (optional)"),#
           ### https://www.aridhia.com/blog/the-sky-is-not-the-limit-embedding-raw-html-and-javascript-to-create-dynamic-ui-elements-in-shiny-applications/   #
           ### ^ this should help with dynamically adding/subtracting categories#
           hr(),#
           h4("Highlight samples, then click to Assign them to the specificed category."),#
           uiOutput("categorySelect"),#
           actionButton("Assign", "Assign GSM to Category")),#
           conditionalPanel(condition="input.searchpanel==3",#
               h4("Thank you for using receptoR!"),#
               p(" Please enter your name and any comments/bugs/questions/requests in the box below, then click the \'Download and Process\' button to retrieve the raw files from the NCBI server and process them based on their assigned categories."),#
               textAreaInput("comments","Comments",width="100%",height="100px",resize="vertical"),#
               textInput("downloadId","Download ID"),#
               actionButton("downloadCEL","Download and Process"))#
       ),#
       mainPanel(#
           # Search GSE based on species#
        tabsetPanel(#
        tabPanel("Search", value=1,#
            h4("GEO data series (\'GSE\') matching search query"), # return search here!#
            DT::dataTableOutput("filteredgse")#
        ),#
        # Assign samples to categories ------------------------------------------------------#
        tabPanel("Assign", value=2,#
            h4("From the selected series' (GSE) assign individual samples (GSM) to categories of your choosing."),#
            DT::dataTableOutput("gsm_table")#
        ),#
        # This will be where the CEL files are downloaded (confirmation, etc) ------------#
        tabPanel("Process", value=3,#
        h4("Please confirm samples are properly categorized."),#
        p("Expression samples annotated:"),#
                DT::dataTableOutput("finishedtable")#
        ),#
        id = "searchpanel"#
        )#
        )#
        )#
    ),#
    # Load Gene Expression Data tab -------------------------------------#
    tabPanel("Load expression data",#
        h3("Pick from user-defined experiments to perform analyses"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Load expression data"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            hr(),#
            selectInput(inputId="user_data",label="Select user data for analysis",choices=c("none"="none","Photoreceptors v RPE"="2018-04-13_app_data.rda"),selected="none"),#
            br(),#
            uiOutput("geneListsUI"),#
            br(),#
            uiOutput("geneUI")#
        ),#
        mainPanel(#
            tabsetPanel(type="tabs",selected="Gene-level expression",#
            tabPanel("Experimental design",h4("Category definitions and contrasts"),p("Coming soon!")),#
            tabPanel("Gene-level expression",#
                fluidRow(#
                column(6, h4("Average Expression"), DT::dataTableOutput("genes")),#
                column(6, h4("Gene Boxplot"), plotOutput("singleGenePlot"))#
            )))#
        )#
        )#
    ),#
    # Magnitude expression tab ------------------------------------------------------------------------------#
#
    tabPanel("Absolute expression",#
        h3("Compare genes based on absolute expression"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Absolute expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            # style = "position:fixed",#
            checkboxGroupInput("tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            br(),#
            checkboxInput("de_state", label = "Show differential expressed only", value = TRUE),#
            uiOutput("de_choices"),#
            br(),#
            conditionalPanel(condition="input.absexpanel==1",#
                h3("Heatmap parameters"),#
                checkboxInput("hm_probes", "Show probe-level", value = FALSE),#
                checkboxInput("hm_gsm", "Show GSM (column names)", value = TRUE),#
                checkboxInput("hm_rownames", "Show rownames", value = TRUE),#
                checkboxInput("hm_col_cluster", "Cluster columns", value = TRUE),#
                checkboxInput("hm_row_cluster", "Cluster rows", value = TRUE),#
                h4("Select plot dimensions (px)"),#
                numericInput("hm_width", "Width", value = 900, min = 100, max = 2400, step = 10),#
                numericInput("hm_height", "Height", value = 1200, min = 100, max = 2400, step = 10))#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("Heatmap", value=1, uiOutput("heatmap_ui")),#
            tabPanel("Summary boxplots", plotOutput("overallPlot", height = 600)),#
            tabPanel("By-gene boxplots", plotOutput("byGenePlot", height = 600)),#
            id = "absexpanel"#
        )#
        )#
        )#
    ),#
#
    # Mixomics tab ---------------------------------------------#
    tabPanel("Relative expression",#
        h3("Compare genes based on relative expression between experimental groups"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Relative expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            checkboxGroupInput("pls_tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            checkboxInput("pls_probe", "Perform PLS-DA at probe level", value = FALSE),#
            br(),#
            h4("Gene contribution plot"),#
            uiOutput("numGenesUI"),#
            radioButtons("pls_ncomp", "Select component for gene contribution plot", choices = c(1,2)),#
            br()#
            # downloadButton("pls_download", "Download gene contribution data")#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("PCA Analysis", plotOutput("indPlot", height = 800)),#
            tabPanel("Circle variance", plotOutput("varPlot", height = 800)),#
            tabPanel("Loadings plot", plotOutput("contribPlot", height = 800))#
        ),#
        position = c("right","left"),#
        fluid = TRUE#
        )#
        )#
    )#
)#
)
ui <- fluidPage(#
tags$head(tags$script(HTML(jscode))),#
# tags$script(HTML("$('body').addClass('fixed);")),#
shinyjs::useShinyjs(),#
navbarPage("receptoR",#
    theme = shinytheme("spacelab"),#
#
# Start page  ------------------------------------------------------------------------------#
#
    tabPanel("Start here",#
       h3("Welcome to receptoR!"),#
       hr(),#
       sidebarLayout(#
           sidebarPanel(#
               h4("receptoR is an automated hypothesis generation software to identify cellular signaling pathways from transcriptomics data."),#
               p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky. Andouille t-bone biltong bacon beef ribs boudin frankfurter ham hock pork loin capicola tail ground round brisket tenderloin tri-tip. Ham pork bacon strip steak, ball tip leberkas meatball capicola pork loin. Ribeye turducken tri-tip jowl filet mignon drumstick shank corned beef prosciutto spare ribs sausage leberkas cupim burgdoggen bacon.",style="color:#D8BFD8"),#
               hr(),#
               p("(C) 2019 Derek Toms")),#
           mainPanel(#
               p("This software allows you to browse and analyze public transcriptomics data. To proceed, click \'Search for datasets\', above"),#
               img(src="overview.png"),#
               p("Spicy jalapeno bacon ipsum dolor amet brisket ribeye tri-tip tail meatloaf ground round salami fatback. Ball tip flank pork turkey prosciutto. Venison burgdoggen beef pork hamburger tongue shankle rump frankfurter kielbasa pastrami pork belly. T-bone fatback venison tenderloin salami biltong turkey chuck.",style="color:#D8BFD8"),#
#
p("Turkey tenderloin buffalo frankfurter, strip steak capicola filet mignon ribeye cow t-bone biltong. Tri-tip hamburger ham hock, shank landjaeger kielbasa pork loin spare ribs pastrami salami shoulder alcatra. Biltong tail brisket, turkey beef ribs hamburger prosciutto bacon tenderloin pancetta shank venison picanha cupim. Frankfurter porchetta turkey biltong corned beef, burgdoggen prosciutto jerky tail. Capicola beef ribs burgdoggen pancetta, frankfurter leberkas pig. Filet mignon jerky ground round cow burgdoggen, shoulder boudin ham hock pancetta.",style="color:#D8BFD8"),#
#
p("Sirloin salami strip steak burgdoggen pork chop ribeye, pastrami fatback short ribs corned beef. Beef shank shoulder, leberkas pancetta ground round jowl tenderloin ribeye hamburger shankle flank. Strip steak short loin kevin pork belly meatball swine sausage ham jowl pig tongue venison fatback t-bone beef. Spare ribs shoulder ham hock strip steak pastrami.",style="color:#D8BFD8")#
               ))#
        ),#
#
# Search for GSE  ------------------------------------------------------------------------------#
#
    tabPanel("Search for datasets",#
       h3("Organize publicly available expression data"),#
       hr(),#
       sidebarLayout(#
       sidebarPanel(#
           # style = "position:fixed;width:30%",#
           h4("Search for datasets"),#
           p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
           hr(),#
           conditionalPanel(condition="input.searchpanel==1",#
           h4("Find expression data from publicly available datasets to begin defining your own experiment."),#
           p("Begin by searching for ",span("G",style="font-weight:bold"),"EO data ",span("se",style="font-weight:bold"),"ries (GSE) containing expression data for your cell or tissue type of interest."),#
           radioButtons("gplSelection", "Choose species:", choices = c("Mouse (GPL1261)" = "mouse", "Human (GPL570)" = "human")),#
           tagAppendAttributes(textInput("Key", "Enter search terms, separated by commas", value = ""),`data-proxy-click` = "Search"),#
           actionButton("Search", "Search"),#
           hr(),#
           p("When you have selected the appropriate datasets, click \'Retrieve GSM\' to collect sample information and then click on the \'Assign samples\' tab above."),#
           actionButton("getGSM", "Retrieve GSM")),#
           conditionalPanel(condition="input.searchpanel==2",#
           h4("Define the categories that you wish to assign each sample (GSM) for comparison."),#
           splitLayout(cellWidths=c("90%","10%"), textInput("cat1", label=NULL, placeholder="Category 1"),icon("skull")),#
           textInput("cat2", label=NULL, placeholder="Category 2"),#
           textInput("cat3", label=NULL, placeholder="Category 3 (optional)"),#
           ### https://www.aridhia.com/blog/the-sky-is-not-the-limit-embedding-raw-html-and-javascript-to-create-dynamic-ui-elements-in-shiny-applications/   #
           ### ^ this should help with dynamically adding/subtracting categories#
           hr(),#
           h4("Highlight samples, then click to Assign them to the specificed category."),#
           uiOutput("categorySelect"),#
           actionButton("Assign", "Assign GSM to Category")),#
           conditionalPanel(condition="input.searchpanel==3",#
               h4("Thank you for using receptoR!"),#
               p(" Please enter your name and any comments/bugs/questions/requests in the box below, then click the \'Download and Process\' button to retrieve the raw files from the NCBI server and process them based on their assigned categories."),#
               textAreaInput("comments","Comments",width="100%",height="100px",resize="vertical"),#
               textInput("downloadId","Download ID"),#
               actionButton("downloadCEL","Download and Process"))#
       ),#
       mainPanel(#
           # Search GSE based on species#
        tabsetPanel(#
        tabPanel("Search", value=1,#
            h4("GEO data series (\'GSE\') matching search query"), # return search here!#
            DT::dataTableOutput("filteredgse")#
        ),#
        # Assign samples to categories ------------------------------------------------------#
        tabPanel("Assign", value=2,#
            h4("From the selected series' (GSE) assign individual samples (GSM) to categories of your choosing."),#
            DT::dataTableOutput("gsm_table")#
        ),#
        # This will be where the CEL files are downloaded (confirmation, etc) ------------#
        tabPanel("Process", value=3,#
        h4("Please confirm samples are properly categorized."),#
        p("Expression samples annotated:"),#
                DT::dataTableOutput("finishedtable")#
        ),#
        id = "searchpanel"#
        )#
        )#
        )#
    ),#
    # Load Gene Expression Data tab -------------------------------------#
    tabPanel("Load expression data",#
        h3("Pick from user-defined experiments to perform analyses"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Load expression data"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            hr(),#
            selectInput(inputId="user_data",label="Select user data for analysis",choices=c("none"="none","Photoreceptors v RPE"="2018-04-13_app_data.rda"),selected="none"),#
            br(),#
            uiOutput("geneListsUI"),#
            br(),#
            uiOutput("geneUI")#
        ),#
        mainPanel(#
            tabsetPanel(type="tabs",selected="Gene-level expression",#
            tabPanel("Experimental design",h4("Category definitions and contrasts"),p("Coming soon!")),#
            tabPanel("Gene-level expression",#
                fluidRow(#
                column(6, h4("Average Expression"), DT::dataTableOutput("genes")),#
                column(6, h4("Gene Boxplot"), plotOutput("singleGenePlot"))#
            )))#
        )#
        )#
    ),#
    # Magnitude expression tab ------------------------------------------------------------------------------#
#
    tabPanel("Absolute expression",#
        h3("Compare genes based on absolute expression"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Absolute expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            # style = "position:fixed",#
            checkboxGroupInput("tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            br(),#
            checkboxInput("de_state", label = "Show differential expressed only", value = TRUE),#
            uiOutput("de_choices"),#
            br(),#
            conditionalPanel(condition="input.absexpanel==1",#
                h3("Heatmap parameters"),#
                checkboxInput("hm_probes", "Show probe-level", value = FALSE),#
                checkboxInput("hm_gsm", "Show GSM (column names)", value = TRUE),#
                checkboxInput("hm_rownames", "Show rownames", value = TRUE),#
                checkboxInput("hm_col_cluster", "Cluster columns", value = TRUE),#
                checkboxInput("hm_row_cluster", "Cluster rows", value = TRUE),#
                h4("Select plot dimensions (px)"),#
                numericInput("hm_width", "Width", value = 900, min = 100, max = 2400, step = 10),#
                numericInput("hm_height", "Height", value = 1200, min = 100, max = 2400, step = 10))#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("Heatmap", value=1, uiOutput("heatmap_ui")),#
            tabPanel("Summary boxplots", plotOutput("overallPlot", height = 600)),#
            tabPanel("By-gene boxplots", plotOutput("byGenePlot", height = 600)),#
            id = "absexpanel"#
        )#
        )#
        )#
    ),#
#
    # Mixomics tab ---------------------------------------------#
    tabPanel("Relative expression",#
        h3("Compare genes based on relative expression between experimental groups"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Relative expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            checkboxGroupInput("pls_tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            checkboxInput("pls_probe", "Perform PLS-DA at probe level", value = FALSE),#
            br(),#
            h4("Gene contribution plot"),#
            uiOutput("numGenesUI"),#
            radioButtons("pls_ncomp", "Select component for gene contribution plot", choices = c(1,2)),#
            br()#
            # downloadButton("pls_download", "Download gene contribution data")#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("PCA Analysis", plotOutput("indPlot", height = 800)),#
            tabPanel("Circle variance", plotOutput("varPlot", height = 800)),#
            tabPanel("Loadings plot", plotOutput("contribPlot", height = 800))#
        ),#
        position = c("right","left"),#
        fluid = TRUE#
        )#
        )#
    )#
)#
)
test()
i(class="fas fa-skull")
icon(skull class="fas")
icon("skull", class="fas")
tags$i(class="fas fa-skull")
ui <- fluidPage(#
tags$head(tags$script(HTML(jscode))),#
# tags$script(HTML("$('body').addClass('fixed);")),#
shinyjs::useShinyjs(),#
navbarPage("receptoR",#
    theme = shinytheme("spacelab"),#
#
# Start page  ------------------------------------------------------------------------------#
#
    tabPanel("Start here",#
       h3("Welcome to receptoR!"),#
       hr(),#
       sidebarLayout(#
           sidebarPanel(#
               h4("receptoR is an automated hypothesis generation software to identify cellular signaling pathways from transcriptomics data."),#
               p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky. Andouille t-bone biltong bacon beef ribs boudin frankfurter ham hock pork loin capicola tail ground round brisket tenderloin tri-tip. Ham pork bacon strip steak, ball tip leberkas meatball capicola pork loin. Ribeye turducken tri-tip jowl filet mignon drumstick shank corned beef prosciutto spare ribs sausage leberkas cupim burgdoggen bacon.",style="color:#D8BFD8"),#
               hr(),#
               p("(C) 2019 Derek Toms")),#
           mainPanel(#
               p("This software allows you to browse and analyze public transcriptomics data. To proceed, click \'Search for datasets\', above"),#
               img(src="overview.png"),#
               p("Spicy jalapeno bacon ipsum dolor amet brisket ribeye tri-tip tail meatloaf ground round salami fatback. Ball tip flank pork turkey prosciutto. Venison burgdoggen beef pork hamburger tongue shankle rump frankfurter kielbasa pastrami pork belly. T-bone fatback venison tenderloin salami biltong turkey chuck.",style="color:#D8BFD8"),#
#
p("Turkey tenderloin buffalo frankfurter, strip steak capicola filet mignon ribeye cow t-bone biltong. Tri-tip hamburger ham hock, shank landjaeger kielbasa pork loin spare ribs pastrami salami shoulder alcatra. Biltong tail brisket, turkey beef ribs hamburger prosciutto bacon tenderloin pancetta shank venison picanha cupim. Frankfurter porchetta turkey biltong corned beef, burgdoggen prosciutto jerky tail. Capicola beef ribs burgdoggen pancetta, frankfurter leberkas pig. Filet mignon jerky ground round cow burgdoggen, shoulder boudin ham hock pancetta.",style="color:#D8BFD8"),#
#
p("Sirloin salami strip steak burgdoggen pork chop ribeye, pastrami fatback short ribs corned beef. Beef shank shoulder, leberkas pancetta ground round jowl tenderloin ribeye hamburger shankle flank. Strip steak short loin kevin pork belly meatball swine sausage ham jowl pig tongue venison fatback t-bone beef. Spare ribs shoulder ham hock strip steak pastrami.",style="color:#D8BFD8")#
               ))#
        ),#
#
# Search for GSE  ------------------------------------------------------------------------------#
#
    tabPanel("Search for datasets",#
       h3("Organize publicly available expression data"),#
       hr(),#
       sidebarLayout(#
       sidebarPanel(#
           # style = "position:fixed;width:30%",#
           h4("Search for datasets"),#
           p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
           hr(),#
           conditionalPanel(condition="input.searchpanel==1",#
           h4("Find expression data from publicly available datasets to begin defining your own experiment."),#
           p("Begin by searching for ",span("G",style="font-weight:bold"),"EO data ",span("se",style="font-weight:bold"),"ries (GSE) containing expression data for your cell or tissue type of interest."),#
           radioButtons("gplSelection", "Choose species:", choices = c("Mouse (GPL1261)" = "mouse", "Human (GPL570)" = "human")),#
           tagAppendAttributes(textInput("Key", "Enter search terms, separated by commas", value = ""),`data-proxy-click` = "Search"),#
           actionButton("Search", "Search"),#
           hr(),#
           p("When you have selected the appropriate datasets, click \'Retrieve GSM\' to collect sample information and then click on the \'Assign samples\' tab above."),#
           actionButton("getGSM", "Retrieve GSM")),#
           conditionalPanel(condition="input.searchpanel==2",#
           h4("Define the categories that you wish to assign each sample (GSM) for comparison."),#
           splitLayout(cellWidths=c("90%","10%"), textInput("cat1", label=NULL, placeholder="Category 1"),tags$i(class="fas fa-skull")),#
           textInput("cat2", label=NULL, placeholder="Category 2"),#
           textInput("cat3", label=NULL, placeholder="Category 3 (optional)"),#
           ### https://www.aridhia.com/blog/the-sky-is-not-the-limit-embedding-raw-html-and-javascript-to-create-dynamic-ui-elements-in-shiny-applications/   #
           ### ^ this should help with dynamically adding/subtracting categories#
           hr(),#
           h4("Highlight samples, then click to Assign them to the specificed category."),#
           uiOutput("categorySelect"),#
           actionButton("Assign", "Assign GSM to Category")),#
           conditionalPanel(condition="input.searchpanel==3",#
               h4("Thank you for using receptoR!"),#
               p(" Please enter your name and any comments/bugs/questions/requests in the box below, then click the \'Download and Process\' button to retrieve the raw files from the NCBI server and process them based on their assigned categories."),#
               textAreaInput("comments","Comments",width="100%",height="100px",resize="vertical"),#
               textInput("downloadId","Download ID"),#
               actionButton("downloadCEL","Download and Process"))#
       ),#
       mainPanel(#
           # Search GSE based on species#
        tabsetPanel(#
        tabPanel("Search", value=1,#
            h4("GEO data series (\'GSE\') matching search query"), # return search here!#
            DT::dataTableOutput("filteredgse")#
        ),#
        # Assign samples to categories ------------------------------------------------------#
        tabPanel("Assign", value=2,#
            h4("From the selected series' (GSE) assign individual samples (GSM) to categories of your choosing."),#
            DT::dataTableOutput("gsm_table")#
        ),#
        # This will be where the CEL files are downloaded (confirmation, etc) ------------#
        tabPanel("Process", value=3,#
        h4("Please confirm samples are properly categorized."),#
        p("Expression samples annotated:"),#
                DT::dataTableOutput("finishedtable")#
        ),#
        id = "searchpanel"#
        )#
        )#
        )#
    ),#
    # Load Gene Expression Data tab -------------------------------------#
    tabPanel("Load expression data",#
        h3("Pick from user-defined experiments to perform analyses"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Load expression data"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            hr(),#
            selectInput(inputId="user_data",label="Select user data for analysis",choices=c("none"="none","Photoreceptors v RPE"="2018-04-13_app_data.rda"),selected="none"),#
            br(),#
            uiOutput("geneListsUI"),#
            br(),#
            uiOutput("geneUI")#
        ),#
        mainPanel(#
            tabsetPanel(type="tabs",selected="Gene-level expression",#
            tabPanel("Experimental design",h4("Category definitions and contrasts"),p("Coming soon!")),#
            tabPanel("Gene-level expression",#
                fluidRow(#
                column(6, h4("Average Expression"), DT::dataTableOutput("genes")),#
                column(6, h4("Gene Boxplot"), plotOutput("singleGenePlot"))#
            )))#
        )#
        )#
    ),#
    # Magnitude expression tab ------------------------------------------------------------------------------#
#
    tabPanel("Absolute expression",#
        h3("Compare genes based on absolute expression"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Absolute expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            # style = "position:fixed",#
            checkboxGroupInput("tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            br(),#
            checkboxInput("de_state", label = "Show differential expressed only", value = TRUE),#
            uiOutput("de_choices"),#
            br(),#
            conditionalPanel(condition="input.absexpanel==1",#
                h3("Heatmap parameters"),#
                checkboxInput("hm_probes", "Show probe-level", value = FALSE),#
                checkboxInput("hm_gsm", "Show GSM (column names)", value = TRUE),#
                checkboxInput("hm_rownames", "Show rownames", value = TRUE),#
                checkboxInput("hm_col_cluster", "Cluster columns", value = TRUE),#
                checkboxInput("hm_row_cluster", "Cluster rows", value = TRUE),#
                h4("Select plot dimensions (px)"),#
                numericInput("hm_width", "Width", value = 900, min = 100, max = 2400, step = 10),#
                numericInput("hm_height", "Height", value = 1200, min = 100, max = 2400, step = 10))#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("Heatmap", value=1, uiOutput("heatmap_ui")),#
            tabPanel("Summary boxplots", plotOutput("overallPlot", height = 600)),#
            tabPanel("By-gene boxplots", plotOutput("byGenePlot", height = 600)),#
            id = "absexpanel"#
        )#
        )#
        )#
    ),#
#
    # Mixomics tab ---------------------------------------------#
    tabPanel("Relative expression",#
        h3("Compare genes based on relative expression between experimental groups"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Relative expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            checkboxGroupInput("pls_tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            checkboxInput("pls_probe", "Perform PLS-DA at probe level", value = FALSE),#
            br(),#
            h4("Gene contribution plot"),#
            uiOutput("numGenesUI"),#
            radioButtons("pls_ncomp", "Select component for gene contribution plot", choices = c(1,2)),#
            br()#
            # downloadButton("pls_download", "Download gene contribution data")#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("PCA Analysis", plotOutput("indPlot", height = 800)),#
            tabPanel("Circle variance", plotOutput("varPlot", height = 800)),#
            tabPanel("Loadings plot", plotOutput("contribPlot", height = 800))#
        ),#
        position = c("right","left"),#
        fluid = TRUE#
        )#
        )#
    )#
)#
)
test()
tags$i(class="fas fa-skull")
tags$span(style=color: red, tags$i(class="fas fa-skull"))
tags$span(style="color: red", tags$i(class="fas fa-skull"))
ui <- fluidPage(#
tags$head(tags$script(HTML(jscode))),#
# tags$script(HTML("$('body').addClass('fixed);")),#
shinyjs::useShinyjs(),#
navbarPage("receptoR",#
    theme = shinytheme("spacelab"),#
#
# Start page  ------------------------------------------------------------------------------#
#
    tabPanel("Start here",#
       h3("Welcome to receptoR!"),#
       hr(),#
       sidebarLayout(#
           sidebarPanel(#
               h4("receptoR is an automated hypothesis generation software to identify cellular signaling pathways from transcriptomics data."),#
               p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky. Andouille t-bone biltong bacon beef ribs boudin frankfurter ham hock pork loin capicola tail ground round brisket tenderloin tri-tip. Ham pork bacon strip steak, ball tip leberkas meatball capicola pork loin. Ribeye turducken tri-tip jowl filet mignon drumstick shank corned beef prosciutto spare ribs sausage leberkas cupim burgdoggen bacon.",style="color:#D8BFD8"),#
               hr(),#
               p("(C) 2019 Derek Toms")),#
           mainPanel(#
               p("This software allows you to browse and analyze public transcriptomics data. To proceed, click \'Search for datasets\', above"),#
               img(src="overview.png"),#
               p("Spicy jalapeno bacon ipsum dolor amet brisket ribeye tri-tip tail meatloaf ground round salami fatback. Ball tip flank pork turkey prosciutto. Venison burgdoggen beef pork hamburger tongue shankle rump frankfurter kielbasa pastrami pork belly. T-bone fatback venison tenderloin salami biltong turkey chuck.",style="color:#D8BFD8"),#
#
p("Turkey tenderloin buffalo frankfurter, strip steak capicola filet mignon ribeye cow t-bone biltong. Tri-tip hamburger ham hock, shank landjaeger kielbasa pork loin spare ribs pastrami salami shoulder alcatra. Biltong tail brisket, turkey beef ribs hamburger prosciutto bacon tenderloin pancetta shank venison picanha cupim. Frankfurter porchetta turkey biltong corned beef, burgdoggen prosciutto jerky tail. Capicola beef ribs burgdoggen pancetta, frankfurter leberkas pig. Filet mignon jerky ground round cow burgdoggen, shoulder boudin ham hock pancetta.",style="color:#D8BFD8"),#
#
p("Sirloin salami strip steak burgdoggen pork chop ribeye, pastrami fatback short ribs corned beef. Beef shank shoulder, leberkas pancetta ground round jowl tenderloin ribeye hamburger shankle flank. Strip steak short loin kevin pork belly meatball swine sausage ham jowl pig tongue venison fatback t-bone beef. Spare ribs shoulder ham hock strip steak pastrami.",style="color:#D8BFD8")#
               ))#
        ),#
#
# Search for GSE  ------------------------------------------------------------------------------#
#
    tabPanel("Search for datasets",#
       h3("Organize publicly available expression data"),#
       hr(),#
       sidebarLayout(#
       sidebarPanel(#
           # style = "position:fixed;width:30%",#
           h4("Search for datasets"),#
           p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
           hr(),#
           conditionalPanel(condition="input.searchpanel==1",#
           h4("Find expression data from publicly available datasets to begin defining your own experiment."),#
           p("Begin by searching for ",span("G",style="font-weight:bold"),"EO data ",span("se",style="font-weight:bold"),"ries (GSE) containing expression data for your cell or tissue type of interest."),#
           radioButtons("gplSelection", "Choose species:", choices = c("Mouse (GPL1261)" = "mouse", "Human (GPL570)" = "human")),#
           tagAppendAttributes(textInput("Key", "Enter search terms, separated by commas", value = ""),`data-proxy-click` = "Search"),#
           actionButton("Search", "Search"),#
           hr(),#
           p("When you have selected the appropriate datasets, click \'Retrieve GSM\' to collect sample information and then click on the \'Assign samples\' tab above."),#
           actionButton("getGSM", "Retrieve GSM")),#
           conditionalPanel(condition="input.searchpanel==2",#
           h4("Define the categories that you wish to assign each sample (GSM) for comparison."),#
           splitLayout(cellWidths=c("90%","10%"), textInput("cat1", label=NULL, placeholder="Category 1"),tags$span(style="color: red", tags$i(class="fas fa-circle"))),#
           textInput("cat2", label=NULL, placeholder="Category 2"),#
           textInput("cat3", label=NULL, placeholder="Category 3 (optional)"),#
           ### https://www.aridhia.com/blog/the-sky-is-not-the-limit-embedding-raw-html-and-javascript-to-create-dynamic-ui-elements-in-shiny-applications/   #
           ### ^ this should help with dynamically adding/subtracting categories#
           hr(),#
           h4("Highlight samples, then click to Assign them to the specificed category."),#
           uiOutput("categorySelect"),#
           actionButton("Assign", "Assign GSM to Category")),#
           conditionalPanel(condition="input.searchpanel==3",#
               h4("Thank you for using receptoR!"),#
               p(" Please enter your name and any comments/bugs/questions/requests in the box below, then click the \'Download and Process\' button to retrieve the raw files from the NCBI server and process them based on their assigned categories."),#
               textAreaInput("comments","Comments",width="100%",height="100px",resize="vertical"),#
               textInput("downloadId","Download ID"),#
               actionButton("downloadCEL","Download and Process"))#
       ),#
       mainPanel(#
           # Search GSE based on species#
        tabsetPanel(#
        tabPanel("Search", value=1,#
            h4("GEO data series (\'GSE\') matching search query"), # return search here!#
            DT::dataTableOutput("filteredgse")#
        ),#
        # Assign samples to categories ------------------------------------------------------#
        tabPanel("Assign", value=2,#
            h4("From the selected series' (GSE) assign individual samples (GSM) to categories of your choosing."),#
            DT::dataTableOutput("gsm_table")#
        ),#
        # This will be where the CEL files are downloaded (confirmation, etc) ------------#
        tabPanel("Process", value=3,#
        h4("Please confirm samples are properly categorized."),#
        p("Expression samples annotated:"),#
                DT::dataTableOutput("finishedtable")#
        ),#
        id = "searchpanel"#
        )#
        )#
        )#
    ),#
    # Load Gene Expression Data tab -------------------------------------#
    tabPanel("Load expression data",#
        h3("Pick from user-defined experiments to perform analyses"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Load expression data"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            hr(),#
            selectInput(inputId="user_data",label="Select user data for analysis",choices=c("none"="none","Photoreceptors v RPE"="2018-04-13_app_data.rda"),selected="none"),#
            br(),#
            uiOutput("geneListsUI"),#
            br(),#
            uiOutput("geneUI")#
        ),#
        mainPanel(#
            tabsetPanel(type="tabs",selected="Gene-level expression",#
            tabPanel("Experimental design",h4("Category definitions and contrasts"),p("Coming soon!")),#
            tabPanel("Gene-level expression",#
                fluidRow(#
                column(6, h4("Average Expression"), DT::dataTableOutput("genes")),#
                column(6, h4("Gene Boxplot"), plotOutput("singleGenePlot"))#
            )))#
        )#
        )#
    ),#
    # Magnitude expression tab ------------------------------------------------------------------------------#
#
    tabPanel("Absolute expression",#
        h3("Compare genes based on absolute expression"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Absolute expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            # style = "position:fixed",#
            checkboxGroupInput("tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            br(),#
            checkboxInput("de_state", label = "Show differential expressed only", value = TRUE),#
            uiOutput("de_choices"),#
            br(),#
            conditionalPanel(condition="input.absexpanel==1",#
                h3("Heatmap parameters"),#
                checkboxInput("hm_probes", "Show probe-level", value = FALSE),#
                checkboxInput("hm_gsm", "Show GSM (column names)", value = TRUE),#
                checkboxInput("hm_rownames", "Show rownames", value = TRUE),#
                checkboxInput("hm_col_cluster", "Cluster columns", value = TRUE),#
                checkboxInput("hm_row_cluster", "Cluster rows", value = TRUE),#
                h4("Select plot dimensions (px)"),#
                numericInput("hm_width", "Width", value = 900, min = 100, max = 2400, step = 10),#
                numericInput("hm_height", "Height", value = 1200, min = 100, max = 2400, step = 10))#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("Heatmap", value=1, uiOutput("heatmap_ui")),#
            tabPanel("Summary boxplots", plotOutput("overallPlot", height = 600)),#
            tabPanel("By-gene boxplots", plotOutput("byGenePlot", height = 600)),#
            id = "absexpanel"#
        )#
        )#
        )#
    ),#
#
    # Mixomics tab ---------------------------------------------#
    tabPanel("Relative expression",#
        h3("Compare genes based on relative expression between experimental groups"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Relative expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            checkboxGroupInput("pls_tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            checkboxInput("pls_probe", "Perform PLS-DA at probe level", value = FALSE),#
            br(),#
            h4("Gene contribution plot"),#
            uiOutput("numGenesUI"),#
            radioButtons("pls_ncomp", "Select component for gene contribution plot", choices = c(1,2)),#
            br()#
            # downloadButton("pls_download", "Download gene contribution data")#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("PCA Analysis", plotOutput("indPlot", height = 800)),#
            tabPanel("Circle variance", plotOutput("varPlot", height = 800)),#
            tabPanel("Loadings plot", plotOutput("contribPlot", height = 800))#
        ),#
        position = c("right","left"),#
        fluid = TRUE#
        )#
        )#
    )#
)#
)
test()
tags$span(style="color: red", tags$i(class="fas fa-skull"))
ui <- fluidPage(#
tags$head(tags$script(HTML(jscode))),#
# tags$script(HTML("$('body').addClass('fixed);")),#
shinyjs::useShinyjs(),#
navbarPage("receptoR",#
    theme = shinytheme("spacelab"),#
#
# Start page  ------------------------------------------------------------------------------#
#
    tabPanel("Start here",#
       h3("Welcome to receptoR!"),#
       hr(),#
       sidebarLayout(#
           sidebarPanel(#
               h4("receptoR is an automated hypothesis generation software to identify cellular signaling pathways from transcriptomics data."),#
               p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky. Andouille t-bone biltong bacon beef ribs boudin frankfurter ham hock pork loin capicola tail ground round brisket tenderloin tri-tip. Ham pork bacon strip steak, ball tip leberkas meatball capicola pork loin. Ribeye turducken tri-tip jowl filet mignon drumstick shank corned beef prosciutto spare ribs sausage leberkas cupim burgdoggen bacon.",style="color:#D8BFD8"),#
               hr(),#
               p("(C) 2019 Derek Toms")),#
           mainPanel(#
               p("This software allows you to browse and analyze public transcriptomics data. To proceed, click \'Search for datasets\', above"),#
               img(src="overview.png"),#
               p("Spicy jalapeno bacon ipsum dolor amet brisket ribeye tri-tip tail meatloaf ground round salami fatback. Ball tip flank pork turkey prosciutto. Venison burgdoggen beef pork hamburger tongue shankle rump frankfurter kielbasa pastrami pork belly. T-bone fatback venison tenderloin salami biltong turkey chuck.",style="color:#D8BFD8"),#
#
p("Turkey tenderloin buffalo frankfurter, strip steak capicola filet mignon ribeye cow t-bone biltong. Tri-tip hamburger ham hock, shank landjaeger kielbasa pork loin spare ribs pastrami salami shoulder alcatra. Biltong tail brisket, turkey beef ribs hamburger prosciutto bacon tenderloin pancetta shank venison picanha cupim. Frankfurter porchetta turkey biltong corned beef, burgdoggen prosciutto jerky tail. Capicola beef ribs burgdoggen pancetta, frankfurter leberkas pig. Filet mignon jerky ground round cow burgdoggen, shoulder boudin ham hock pancetta.",style="color:#D8BFD8"),#
#
p("Sirloin salami strip steak burgdoggen pork chop ribeye, pastrami fatback short ribs corned beef. Beef shank shoulder, leberkas pancetta ground round jowl tenderloin ribeye hamburger shankle flank. Strip steak short loin kevin pork belly meatball swine sausage ham jowl pig tongue venison fatback t-bone beef. Spare ribs shoulder ham hock strip steak pastrami.",style="color:#D8BFD8")#
               ))#
        ),#
#
# Search for GSE  ------------------------------------------------------------------------------#
#
    tabPanel("Search for datasets",#
       h3("Organize publicly available expression data"),#
       hr(),#
       sidebarLayout(#
       sidebarPanel(#
           # style = "position:fixed;width:30%",#
           h4("Search for datasets"),#
           p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
           hr(),#
           conditionalPanel(condition="input.searchpanel==1",#
           h4("Find expression data from publicly available datasets to begin defining your own experiment."),#
           p("Begin by searching for ",span("G",style="font-weight:bold"),"EO data ",span("se",style="font-weight:bold"),"ries (GSE) containing expression data for your cell or tissue type of interest."),#
           radioButtons("gplSelection", "Choose species:", choices = c("Mouse (GPL1261)" = "mouse", "Human (GPL570)" = "human")),#
           tagAppendAttributes(textInput("Key", "Enter search terms, separated by commas", value = ""),`data-proxy-click` = "Search"),#
           actionButton("Search", "Search"),#
           hr(),#
           p("When you have selected the appropriate datasets, click \'Retrieve GSM\' to collect sample information and then click on the \'Assign samples\' tab above."),#
           tags$span(style="color: red", tags$i(class="fas fa-circle")),#
           actionButton("getGSM", "Retrieve GSM")),#
           conditionalPanel(condition="input.searchpanel==2",#
           h4("Define the categories that you wish to assign each sample (GSM) for comparison."),#
           splitLayout(cellWidths=c("90%","10%"), textInput("cat1", label=NULL, placeholder="Category 1")),#
           textInput("cat2", label=NULL, placeholder="Category 2"),#
           textInput("cat3", label=NULL, placeholder="Category 3 (optional)"),#
           ### https://www.aridhia.com/blog/the-sky-is-not-the-limit-embedding-raw-html-and-javascript-to-create-dynamic-ui-elements-in-shiny-applications/   #
           ### ^ this should help with dynamically adding/subtracting categories#
           hr(),#
           h4("Highlight samples, then click to Assign them to the specificed category."),#
           uiOutput("categorySelect"),#
           actionButton("Assign", "Assign GSM to Category")),#
           conditionalPanel(condition="input.searchpanel==3",#
               h4("Thank you for using receptoR!"),#
               p(" Please enter your name and any comments/bugs/questions/requests in the box below, then click the \'Download and Process\' button to retrieve the raw files from the NCBI server and process them based on their assigned categories."),#
               textAreaInput("comments","Comments",width="100%",height="100px",resize="vertical"),#
               textInput("downloadId","Download ID"),#
               actionButton("downloadCEL","Download and Process"))#
       ),#
       mainPanel(#
           # Search GSE based on species#
        tabsetPanel(#
        tabPanel("Search", value=1,#
            h4("GEO data series (\'GSE\') matching search query"), # return search here!#
            DT::dataTableOutput("filteredgse")#
        ),#
        # Assign samples to categories ------------------------------------------------------#
        tabPanel("Assign", value=2,#
            h4("From the selected series' (GSE) assign individual samples (GSM) to categories of your choosing."),#
            DT::dataTableOutput("gsm_table")#
        ),#
        # This will be where the CEL files are downloaded (confirmation, etc) ------------#
        tabPanel("Process", value=3,#
        h4("Please confirm samples are properly categorized."),#
        p("Expression samples annotated:"),#
                DT::dataTableOutput("finishedtable")#
        ),#
        id = "searchpanel"#
        )#
        )#
        )#
    ),#
    # Load Gene Expression Data tab -------------------------------------#
    tabPanel("Load expression data",#
        h3("Pick from user-defined experiments to perform analyses"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Load expression data"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            hr(),#
            selectInput(inputId="user_data",label="Select user data for analysis",choices=c("none"="none","Photoreceptors v RPE"="2018-04-13_app_data.rda"),selected="none"),#
            br(),#
            uiOutput("geneListsUI"),#
            br(),#
            uiOutput("geneUI")#
        ),#
        mainPanel(#
            tabsetPanel(type="tabs",selected="Gene-level expression",#
            tabPanel("Experimental design",h4("Category definitions and contrasts"),p("Coming soon!")),#
            tabPanel("Gene-level expression",#
                fluidRow(#
                column(6, h4("Average Expression"), DT::dataTableOutput("genes")),#
                column(6, h4("Gene Boxplot"), plotOutput("singleGenePlot"))#
            )))#
        )#
        )#
    ),#
    # Magnitude expression tab ------------------------------------------------------------------------------#
#
    tabPanel("Absolute expression",#
        h3("Compare genes based on absolute expression"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Absolute expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            # style = "position:fixed",#
            checkboxGroupInput("tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            br(),#
            checkboxInput("de_state", label = "Show differential expressed only", value = TRUE),#
            uiOutput("de_choices"),#
            br(),#
            conditionalPanel(condition="input.absexpanel==1",#
                h3("Heatmap parameters"),#
                checkboxInput("hm_probes", "Show probe-level", value = FALSE),#
                checkboxInput("hm_gsm", "Show GSM (column names)", value = TRUE),#
                checkboxInput("hm_rownames", "Show rownames", value = TRUE),#
                checkboxInput("hm_col_cluster", "Cluster columns", value = TRUE),#
                checkboxInput("hm_row_cluster", "Cluster rows", value = TRUE),#
                h4("Select plot dimensions (px)"),#
                numericInput("hm_width", "Width", value = 900, min = 100, max = 2400, step = 10),#
                numericInput("hm_height", "Height", value = 1200, min = 100, max = 2400, step = 10))#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("Heatmap", value=1, uiOutput("heatmap_ui")),#
            tabPanel("Summary boxplots", plotOutput("overallPlot", height = 600)),#
            tabPanel("By-gene boxplots", plotOutput("byGenePlot", height = 600)),#
            id = "absexpanel"#
        )#
        )#
        )#
    ),#
#
    # Mixomics tab ---------------------------------------------#
    tabPanel("Relative expression",#
        h3("Compare genes based on relative expression between experimental groups"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Relative expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            checkboxGroupInput("pls_tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            checkboxInput("pls_probe", "Perform PLS-DA at probe level", value = FALSE),#
            br(),#
            h4("Gene contribution plot"),#
            uiOutput("numGenesUI"),#
            radioButtons("pls_ncomp", "Select component for gene contribution plot", choices = c(1,2)),#
            br()#
            # downloadButton("pls_download", "Download gene contribution data")#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("PCA Analysis", plotOutput("indPlot", height = 800)),#
            tabPanel("Circle variance", plotOutput("varPlot", height = 800)),#
            tabPanel("Loadings plot", plotOutput("contribPlot", height = 800))#
        ),#
        position = c("right","left"),#
        fluid = TRUE#
        )#
        )#
    )#
)#
)
test()
ui <- fluidPage(#
tags$head(tags$script(HTML(jscode))),#
# tags$script(HTML("$('body').addClass('fixed);")),#
shinyjs::useShinyjs(),#
navbarPage("receptoR",#
    theme = shinytheme("spacelab"),#
#
# Start page  ------------------------------------------------------------------------------#
#
    tabPanel("Start here",#
       h3("Welcome to receptoR!"),#
       hr(),#
       sidebarLayout(#
           sidebarPanel(#
               h4("receptoR is an automated hypothesis generation software to identify cellular signaling pathways from transcriptomics data."),#
               p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky. Andouille t-bone biltong bacon beef ribs boudin frankfurter ham hock pork loin capicola tail ground round brisket tenderloin tri-tip. Ham pork bacon strip steak, ball tip leberkas meatball capicola pork loin. Ribeye turducken tri-tip jowl filet mignon drumstick shank corned beef prosciutto spare ribs sausage leberkas cupim burgdoggen bacon.",style="color:#D8BFD8"),#
               hr(),#
               p("(C) 2019 Derek Toms")),#
           mainPanel(#
               p("This software allows you to browse and analyze public transcriptomics data. To proceed, click \'Search for datasets\', above"),#
               img(src="overview.png"),#
               p("Spicy jalapeno bacon ipsum dolor amet brisket ribeye tri-tip tail meatloaf ground round salami fatback. Ball tip flank pork turkey prosciutto. Venison burgdoggen beef pork hamburger tongue shankle rump frankfurter kielbasa pastrami pork belly. T-bone fatback venison tenderloin salami biltong turkey chuck.",style="color:#D8BFD8"),#
#
p("Turkey tenderloin buffalo frankfurter, strip steak capicola filet mignon ribeye cow t-bone biltong. Tri-tip hamburger ham hock, shank landjaeger kielbasa pork loin spare ribs pastrami salami shoulder alcatra. Biltong tail brisket, turkey beef ribs hamburger prosciutto bacon tenderloin pancetta shank venison picanha cupim. Frankfurter porchetta turkey biltong corned beef, burgdoggen prosciutto jerky tail. Capicola beef ribs burgdoggen pancetta, frankfurter leberkas pig. Filet mignon jerky ground round cow burgdoggen, shoulder boudin ham hock pancetta.",style="color:#D8BFD8"),#
#
p("Sirloin salami strip steak burgdoggen pork chop ribeye, pastrami fatback short ribs corned beef. Beef shank shoulder, leberkas pancetta ground round jowl tenderloin ribeye hamburger shankle flank. Strip steak short loin kevin pork belly meatball swine sausage ham jowl pig tongue venison fatback t-bone beef. Spare ribs shoulder ham hock strip steak pastrami.",style="color:#D8BFD8")#
               ))#
        ),#
#
# Search for GSE  ------------------------------------------------------------------------------#
#
    tabPanel("Search for datasets",#
       h3("Organize publicly available expression data"),#
       hr(),#
       sidebarLayout(#
       sidebarPanel(#
           # style = "position:fixed;width:30%",#
           h4("Search for datasets"),#
           p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
           hr(),#
           conditionalPanel(condition="input.searchpanel==1",#
           h4("Find expression data from publicly available datasets to begin defining your own experiment."),#
           p("Begin by searching for ",span("G",style="font-weight:bold"),"EO data ",span("se",style="font-weight:bold"),"ries (GSE) containing expression data for your cell or tissue type of interest."),#
           radioButtons("gplSelection", "Choose species:", choices = c("Mouse (GPL1261)" = "mouse", "Human (GPL570)" = "human")),#
           tagAppendAttributes(textInput("Key", "Enter search terms, separated by commas", value = ""),`data-proxy-click` = "Search"),#
           actionButton("Search", "Search"),#
           hr(),#
           p("When you have selected the appropriate datasets, click \'Retrieve GSM\' to collect sample information and then click on the \'Assign samples\' tab above."),#
           tags$span(style="color: red", tags$i(class="fas fa-circle")),#
           tags$i(class="fas fa-circle"),#
           actionButton("getGSM", "Retrieve GSM")),#
           conditionalPanel(condition="input.searchpanel==2",#
           h4("Define the categories that you wish to assign each sample (GSM) for comparison."),#
           splitLayout(cellWidths=c("90%","10%"), textInput("cat1", label=NULL, placeholder="Category 1")),#
           textInput("cat2", label=NULL, placeholder="Category 2"),#
           textInput("cat3", label=NULL, placeholder="Category 3 (optional)"),#
           ### https://www.aridhia.com/blog/the-sky-is-not-the-limit-embedding-raw-html-and-javascript-to-create-dynamic-ui-elements-in-shiny-applications/   #
           ### ^ this should help with dynamically adding/subtracting categories#
           hr(),#
           h4("Highlight samples, then click to Assign them to the specificed category."),#
           uiOutput("categorySelect"),#
           actionButton("Assign", "Assign GSM to Category")),#
           conditionalPanel(condition="input.searchpanel==3",#
               h4("Thank you for using receptoR!"),#
               p(" Please enter your name and any comments/bugs/questions/requests in the box below, then click the \'Download and Process\' button to retrieve the raw files from the NCBI server and process them based on their assigned categories."),#
               textAreaInput("comments","Comments",width="100%",height="100px",resize="vertical"),#
               textInput("downloadId","Download ID"),#
               actionButton("downloadCEL","Download and Process"))#
       ),#
       mainPanel(#
           # Search GSE based on species#
        tabsetPanel(#
        tabPanel("Search", value=1,#
            h4("GEO data series (\'GSE\') matching search query"), # return search here!#
            DT::dataTableOutput("filteredgse")#
        ),#
        # Assign samples to categories ------------------------------------------------------#
        tabPanel("Assign", value=2,#
            h4("From the selected series' (GSE) assign individual samples (GSM) to categories of your choosing."),#
            DT::dataTableOutput("gsm_table")#
        ),#
        # This will be where the CEL files are downloaded (confirmation, etc) ------------#
        tabPanel("Process", value=3,#
        h4("Please confirm samples are properly categorized."),#
        p("Expression samples annotated:"),#
                DT::dataTableOutput("finishedtable")#
        ),#
        id = "searchpanel"#
        )#
        )#
        )#
    ),#
    # Load Gene Expression Data tab -------------------------------------#
    tabPanel("Load expression data",#
        h3("Pick from user-defined experiments to perform analyses"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Load expression data"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            hr(),#
            selectInput(inputId="user_data",label="Select user data for analysis",choices=c("none"="none","Photoreceptors v RPE"="2018-04-13_app_data.rda"),selected="none"),#
            br(),#
            uiOutput("geneListsUI"),#
            br(),#
            uiOutput("geneUI")#
        ),#
        mainPanel(#
            tabsetPanel(type="tabs",selected="Gene-level expression",#
            tabPanel("Experimental design",h4("Category definitions and contrasts"),p("Coming soon!")),#
            tabPanel("Gene-level expression",#
                fluidRow(#
                column(6, h4("Average Expression"), DT::dataTableOutput("genes")),#
                column(6, h4("Gene Boxplot"), plotOutput("singleGenePlot"))#
            )))#
        )#
        )#
    ),#
    # Magnitude expression tab ------------------------------------------------------------------------------#
#
    tabPanel("Absolute expression",#
        h3("Compare genes based on absolute expression"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Absolute expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            # style = "position:fixed",#
            checkboxGroupInput("tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            br(),#
            checkboxInput("de_state", label = "Show differential expressed only", value = TRUE),#
            uiOutput("de_choices"),#
            br(),#
            conditionalPanel(condition="input.absexpanel==1",#
                h3("Heatmap parameters"),#
                checkboxInput("hm_probes", "Show probe-level", value = FALSE),#
                checkboxInput("hm_gsm", "Show GSM (column names)", value = TRUE),#
                checkboxInput("hm_rownames", "Show rownames", value = TRUE),#
                checkboxInput("hm_col_cluster", "Cluster columns", value = TRUE),#
                checkboxInput("hm_row_cluster", "Cluster rows", value = TRUE),#
                h4("Select plot dimensions (px)"),#
                numericInput("hm_width", "Width", value = 900, min = 100, max = 2400, step = 10),#
                numericInput("hm_height", "Height", value = 1200, min = 100, max = 2400, step = 10))#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("Heatmap", value=1, uiOutput("heatmap_ui")),#
            tabPanel("Summary boxplots", plotOutput("overallPlot", height = 600)),#
            tabPanel("By-gene boxplots", plotOutput("byGenePlot", height = 600)),#
            id = "absexpanel"#
        )#
        )#
        )#
    ),#
#
    # Mixomics tab ---------------------------------------------#
    tabPanel("Relative expression",#
        h3("Compare genes based on relative expression between experimental groups"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Relative expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            checkboxGroupInput("pls_tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            checkboxInput("pls_probe", "Perform PLS-DA at probe level", value = FALSE),#
            br(),#
            h4("Gene contribution plot"),#
            uiOutput("numGenesUI"),#
            radioButtons("pls_ncomp", "Select component for gene contribution plot", choices = c(1,2)),#
            br()#
            # downloadButton("pls_download", "Download gene contribution data")#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("PCA Analysis", plotOutput("indPlot", height = 800)),#
            tabPanel("Circle variance", plotOutput("varPlot", height = 800)),#
            tabPanel("Loadings plot", plotOutput("contribPlot", height = 800))#
        ),#
        position = c("right","left"),#
        fluid = TRUE#
        )#
        )#
    )#
)#
)
test()
ui <- fluidPage(#
tags$head(tags$script(HTML(jscode))),#
# tags$script(HTML("$('body').addClass('fixed);")),#
shinyjs::useShinyjs(),#
navbarPage("receptoR",#
    theme = shinytheme("spacelab"),#
#
# Start page  ------------------------------------------------------------------------------#
#
    tabPanel("Start here",#
       h3("Welcome to receptoR!"),#
       hr(),#
       sidebarLayout(#
           sidebarPanel(#
               h4("receptoR is an automated hypothesis generation software to identify cellular signaling pathways from transcriptomics data."),#
               p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky. Andouille t-bone biltong bacon beef ribs boudin frankfurter ham hock pork loin capicola tail ground round brisket tenderloin tri-tip. Ham pork bacon strip steak, ball tip leberkas meatball capicola pork loin. Ribeye turducken tri-tip jowl filet mignon drumstick shank corned beef prosciutto spare ribs sausage leberkas cupim burgdoggen bacon.",style="color:#D8BFD8"),#
               hr(),#
               p("(C) 2019 Derek Toms")),#
           mainPanel(#
               p("This software allows you to browse and analyze public transcriptomics data. To proceed, click \'Search for datasets\', above"),#
               img(src="overview.png"),#
               p("Spicy jalapeno bacon ipsum dolor amet brisket ribeye tri-tip tail meatloaf ground round salami fatback. Ball tip flank pork turkey prosciutto. Venison burgdoggen beef pork hamburger tongue shankle rump frankfurter kielbasa pastrami pork belly. T-bone fatback venison tenderloin salami biltong turkey chuck.",style="color:#D8BFD8"),#
#
p("Turkey tenderloin buffalo frankfurter, strip steak capicola filet mignon ribeye cow t-bone biltong. Tri-tip hamburger ham hock, shank landjaeger kielbasa pork loin spare ribs pastrami salami shoulder alcatra. Biltong tail brisket, turkey beef ribs hamburger prosciutto bacon tenderloin pancetta shank venison picanha cupim. Frankfurter porchetta turkey biltong corned beef, burgdoggen prosciutto jerky tail. Capicola beef ribs burgdoggen pancetta, frankfurter leberkas pig. Filet mignon jerky ground round cow burgdoggen, shoulder boudin ham hock pancetta.",style="color:#D8BFD8"),#
#
p("Sirloin salami strip steak burgdoggen pork chop ribeye, pastrami fatback short ribs corned beef. Beef shank shoulder, leberkas pancetta ground round jowl tenderloin ribeye hamburger shankle flank. Strip steak short loin kevin pork belly meatball swine sausage ham jowl pig tongue venison fatback t-bone beef. Spare ribs shoulder ham hock strip steak pastrami.",style="color:#D8BFD8")#
               ))#
        ),#
#
# Search for GSE  ------------------------------------------------------------------------------#
#
    tabPanel("Search for datasets",#
       h3("Organize publicly available expression data"),#
       hr(),#
       sidebarLayout(#
       sidebarPanel(#
           # style = "position:fixed;width:30%",#
           h4("Search for datasets"),#
           p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
           hr(),#
           conditionalPanel(condition="input.searchpanel==1",#
           h4("Find expression data from publicly available datasets to begin defining your own experiment."),#
           p("Begin by searching for ",span("G",style="font-weight:bold"),"EO data ",span("se",style="font-weight:bold"),"ries (GSE) containing expression data for your cell or tissue type of interest."),#
           radioButtons("gplSelection", "Choose species:", choices = c("Mouse (GPL1261)" = "mouse", "Human (GPL570)" = "human")),#
           tagAppendAttributes(textInput("Key", "Enter search terms, separated by commas", value = ""),`data-proxy-click` = "Search"),#
           actionButton("Search", "Search"),#
           hr(),#
           p("When you have selected the appropriate datasets, click \'Retrieve GSM\' to collect sample information and then click on the \'Assign samples\' tab above."),#
           # tags$span(style="color: red", tags$i(class="fas fa-circle")),#
           icon("circle"),#
           actionButton("getGSM", "Retrieve GSM")),#
           conditionalPanel(condition="input.searchpanel==2",#
           h4("Define the categories that you wish to assign each sample (GSM) for comparison."),#
           splitLayout(cellWidths=c("90%","10%"), textInput("cat1", label=NULL, placeholder="Category 1")),#
           textInput("cat2", label=NULL, placeholder="Category 2"),#
           textInput("cat3", label=NULL, placeholder="Category 3 (optional)"),#
           ### https://www.aridhia.com/blog/the-sky-is-not-the-limit-embedding-raw-html-and-javascript-to-create-dynamic-ui-elements-in-shiny-applications/   #
           ### ^ this should help with dynamically adding/subtracting categories#
           hr(),#
           h4("Highlight samples, then click to Assign them to the specificed category."),#
           uiOutput("categorySelect"),#
           actionButton("Assign", "Assign GSM to Category")),#
           conditionalPanel(condition="input.searchpanel==3",#
               h4("Thank you for using receptoR!"),#
               p(" Please enter your name and any comments/bugs/questions/requests in the box below, then click the \'Download and Process\' button to retrieve the raw files from the NCBI server and process them based on their assigned categories."),#
               textAreaInput("comments","Comments",width="100%",height="100px",resize="vertical"),#
               textInput("downloadId","Download ID"),#
               actionButton("downloadCEL","Download and Process"))#
       ),#
       mainPanel(#
           # Search GSE based on species#
        tabsetPanel(#
        tabPanel("Search", value=1,#
            h4("GEO data series (\'GSE\') matching search query"), # return search here!#
            DT::dataTableOutput("filteredgse")#
        ),#
        # Assign samples to categories ------------------------------------------------------#
        tabPanel("Assign", value=2,#
            h4("From the selected series' (GSE) assign individual samples (GSM) to categories of your choosing."),#
            DT::dataTableOutput("gsm_table")#
        ),#
        # This will be where the CEL files are downloaded (confirmation, etc) ------------#
        tabPanel("Process", value=3,#
        h4("Please confirm samples are properly categorized."),#
        p("Expression samples annotated:"),#
                DT::dataTableOutput("finishedtable")#
        ),#
        id = "searchpanel"#
        )#
        )#
        )#
    ),#
    # Load Gene Expression Data tab -------------------------------------#
    tabPanel("Load expression data",#
        h3("Pick from user-defined experiments to perform analyses"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Load expression data"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            hr(),#
            selectInput(inputId="user_data",label="Select user data for analysis",choices=c("none"="none","Photoreceptors v RPE"="2018-04-13_app_data.rda"),selected="none"),#
            br(),#
            uiOutput("geneListsUI"),#
            br(),#
            uiOutput("geneUI")#
        ),#
        mainPanel(#
            tabsetPanel(type="tabs",selected="Gene-level expression",#
            tabPanel("Experimental design",h4("Category definitions and contrasts"),p("Coming soon!")),#
            tabPanel("Gene-level expression",#
                fluidRow(#
                column(6, h4("Average Expression"), DT::dataTableOutput("genes")),#
                column(6, h4("Gene Boxplot"), plotOutput("singleGenePlot"))#
            )))#
        )#
        )#
    ),#
    # Magnitude expression tab ------------------------------------------------------------------------------#
#
    tabPanel("Absolute expression",#
        h3("Compare genes based on absolute expression"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Absolute expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            # style = "position:fixed",#
            checkboxGroupInput("tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            br(),#
            checkboxInput("de_state", label = "Show differential expressed only", value = TRUE),#
            uiOutput("de_choices"),#
            br(),#
            conditionalPanel(condition="input.absexpanel==1",#
                h3("Heatmap parameters"),#
                checkboxInput("hm_probes", "Show probe-level", value = FALSE),#
                checkboxInput("hm_gsm", "Show GSM (column names)", value = TRUE),#
                checkboxInput("hm_rownames", "Show rownames", value = TRUE),#
                checkboxInput("hm_col_cluster", "Cluster columns", value = TRUE),#
                checkboxInput("hm_row_cluster", "Cluster rows", value = TRUE),#
                h4("Select plot dimensions (px)"),#
                numericInput("hm_width", "Width", value = 900, min = 100, max = 2400, step = 10),#
                numericInput("hm_height", "Height", value = 1200, min = 100, max = 2400, step = 10))#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("Heatmap", value=1, uiOutput("heatmap_ui")),#
            tabPanel("Summary boxplots", plotOutput("overallPlot", height = 600)),#
            tabPanel("By-gene boxplots", plotOutput("byGenePlot", height = 600)),#
            id = "absexpanel"#
        )#
        )#
        )#
    ),#
#
    # Mixomics tab ---------------------------------------------#
    tabPanel("Relative expression",#
        h3("Compare genes based on relative expression between experimental groups"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Relative expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            checkboxGroupInput("pls_tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            checkboxInput("pls_probe", "Perform PLS-DA at probe level", value = FALSE),#
            br(),#
            h4("Gene contribution plot"),#
            uiOutput("numGenesUI"),#
            radioButtons("pls_ncomp", "Select component for gene contribution plot", choices = c(1,2)),#
            br()#
            # downloadButton("pls_download", "Download gene contribution data")#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("PCA Analysis", plotOutput("indPlot", height = 800)),#
            tabPanel("Circle variance", plotOutput("varPlot", height = 800)),#
            tabPanel("Loadings plot", plotOutput("contribPlot", height = 800))#
        ),#
        position = c("right","left"),#
        fluid = TRUE#
        )#
        )#
    )#
)#
)
test()
ui <- fluidPage(#
tags$head(tags$script(HTML(jscode))),#
# tags$script(HTML("$('body').addClass('fixed);")),#
shinyjs::useShinyjs(),#
navbarPage("receptoR",#
    theme = shinytheme("spacelab"),#
#
# Start page  ------------------------------------------------------------------------------#
#
    tabPanel("Start here",#
       h3("Welcome to receptoR!"),#
       hr(),#
       sidebarLayout(#
           sidebarPanel(#
               h4("receptoR is an automated hypothesis generation software to identify cellular signaling pathways from transcriptomics data."),#
               p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky. Andouille t-bone biltong bacon beef ribs boudin frankfurter ham hock pork loin capicola tail ground round brisket tenderloin tri-tip. Ham pork bacon strip steak, ball tip leberkas meatball capicola pork loin. Ribeye turducken tri-tip jowl filet mignon drumstick shank corned beef prosciutto spare ribs sausage leberkas cupim burgdoggen bacon.",style="color:#D8BFD8"),#
               hr(),#
               p("(C) 2019 Derek Toms")),#
           mainPanel(#
               p("This software allows you to browse and analyze public transcriptomics data. To proceed, click \'Search for datasets\', above"),#
               img(src="overview.png"),#
               p("Spicy jalapeno bacon ipsum dolor amet brisket ribeye tri-tip tail meatloaf ground round salami fatback. Ball tip flank pork turkey prosciutto. Venison burgdoggen beef pork hamburger tongue shankle rump frankfurter kielbasa pastrami pork belly. T-bone fatback venison tenderloin salami biltong turkey chuck.",style="color:#D8BFD8"),#
#
p("Turkey tenderloin buffalo frankfurter, strip steak capicola filet mignon ribeye cow t-bone biltong. Tri-tip hamburger ham hock, shank landjaeger kielbasa pork loin spare ribs pastrami salami shoulder alcatra. Biltong tail brisket, turkey beef ribs hamburger prosciutto bacon tenderloin pancetta shank venison picanha cupim. Frankfurter porchetta turkey biltong corned beef, burgdoggen prosciutto jerky tail. Capicola beef ribs burgdoggen pancetta, frankfurter leberkas pig. Filet mignon jerky ground round cow burgdoggen, shoulder boudin ham hock pancetta.",style="color:#D8BFD8"),#
#
p("Sirloin salami strip steak burgdoggen pork chop ribeye, pastrami fatback short ribs corned beef. Beef shank shoulder, leberkas pancetta ground round jowl tenderloin ribeye hamburger shankle flank. Strip steak short loin kevin pork belly meatball swine sausage ham jowl pig tongue venison fatback t-bone beef. Spare ribs shoulder ham hock strip steak pastrami.",style="color:#D8BFD8")#
               ))#
        ),#
#
# Search for GSE  ------------------------------------------------------------------------------#
#
    tabPanel("Search for datasets",#
       h3("Organize publicly available expression data"),#
       hr(),#
       sidebarLayout(#
       sidebarPanel(#
           # style = "position:fixed;width:30%",#
           h4("Search for datasets"),#
           p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
           hr(),#
           conditionalPanel(condition="input.searchpanel==1",#
           h4("Find expression data from publicly available datasets to begin defining your own experiment."),#
           p("Begin by searching for ",span("G",style="font-weight:bold"),"EO data ",span("se",style="font-weight:bold"),"ries (GSE) containing expression data for your cell or tissue type of interest."),#
           radioButtons("gplSelection", "Choose species:", choices = c("Mouse (GPL1261)" = "mouse", "Human (GPL570)" = "human")),#
           tagAppendAttributes(textInput("Key", "Enter search terms, separated by commas", value = ""),`data-proxy-click` = "Search"),#
           actionButton("Search", "Search"),#
           hr(),#
           p("When you have selected the appropriate datasets, click \'Retrieve GSM\' to collect sample information and then click on the \'Assign samples\' tab above."),#
           # tags$span(style="color: red", tags$i(class="fas fa-circle")),#
           tags$span(style="color: red",icon("circle")),#
           actionButton("getGSM", "Retrieve GSM")),#
           conditionalPanel(condition="input.searchpanel==2",#
           h4("Define the categories that you wish to assign each sample (GSM) for comparison."),#
           splitLayout(cellWidths=c("90%","10%"), textInput("cat1", label=NULL, placeholder="Category 1")),#
           textInput("cat2", label=NULL, placeholder="Category 2"),#
           textInput("cat3", label=NULL, placeholder="Category 3 (optional)"),#
           ### https://www.aridhia.com/blog/the-sky-is-not-the-limit-embedding-raw-html-and-javascript-to-create-dynamic-ui-elements-in-shiny-applications/   #
           ### ^ this should help with dynamically adding/subtracting categories#
           hr(),#
           h4("Highlight samples, then click to Assign them to the specificed category."),#
           uiOutput("categorySelect"),#
           actionButton("Assign", "Assign GSM to Category")),#
           conditionalPanel(condition="input.searchpanel==3",#
               h4("Thank you for using receptoR!"),#
               p(" Please enter your name and any comments/bugs/questions/requests in the box below, then click the \'Download and Process\' button to retrieve the raw files from the NCBI server and process them based on their assigned categories."),#
               textAreaInput("comments","Comments",width="100%",height="100px",resize="vertical"),#
               textInput("downloadId","Download ID"),#
               actionButton("downloadCEL","Download and Process"))#
       ),#
       mainPanel(#
           # Search GSE based on species#
        tabsetPanel(#
        tabPanel("Search", value=1,#
            h4("GEO data series (\'GSE\') matching search query"), # return search here!#
            DT::dataTableOutput("filteredgse")#
        ),#
        # Assign samples to categories ------------------------------------------------------#
        tabPanel("Assign", value=2,#
            h4("From the selected series' (GSE) assign individual samples (GSM) to categories of your choosing."),#
            DT::dataTableOutput("gsm_table")#
        ),#
        # This will be where the CEL files are downloaded (confirmation, etc) ------------#
        tabPanel("Process", value=3,#
        h4("Please confirm samples are properly categorized."),#
        p("Expression samples annotated:"),#
                DT::dataTableOutput("finishedtable")#
        ),#
        id = "searchpanel"#
        )#
        )#
        )#
    ),#
    # Load Gene Expression Data tab -------------------------------------#
    tabPanel("Load expression data",#
        h3("Pick from user-defined experiments to perform analyses"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Load expression data"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            hr(),#
            selectInput(inputId="user_data",label="Select user data for analysis",choices=c("none"="none","Photoreceptors v RPE"="2018-04-13_app_data.rda"),selected="none"),#
            br(),#
            uiOutput("geneListsUI"),#
            br(),#
            uiOutput("geneUI")#
        ),#
        mainPanel(#
            tabsetPanel(type="tabs",selected="Gene-level expression",#
            tabPanel("Experimental design",h4("Category definitions and contrasts"),p("Coming soon!")),#
            tabPanel("Gene-level expression",#
                fluidRow(#
                column(6, h4("Average Expression"), DT::dataTableOutput("genes")),#
                column(6, h4("Gene Boxplot"), plotOutput("singleGenePlot"))#
            )))#
        )#
        )#
    ),#
    # Magnitude expression tab ------------------------------------------------------------------------------#
#
    tabPanel("Absolute expression",#
        h3("Compare genes based on absolute expression"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Absolute expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            # style = "position:fixed",#
            checkboxGroupInput("tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            br(),#
            checkboxInput("de_state", label = "Show differential expressed only", value = TRUE),#
            uiOutput("de_choices"),#
            br(),#
            conditionalPanel(condition="input.absexpanel==1",#
                h3("Heatmap parameters"),#
                checkboxInput("hm_probes", "Show probe-level", value = FALSE),#
                checkboxInput("hm_gsm", "Show GSM (column names)", value = TRUE),#
                checkboxInput("hm_rownames", "Show rownames", value = TRUE),#
                checkboxInput("hm_col_cluster", "Cluster columns", value = TRUE),#
                checkboxInput("hm_row_cluster", "Cluster rows", value = TRUE),#
                h4("Select plot dimensions (px)"),#
                numericInput("hm_width", "Width", value = 900, min = 100, max = 2400, step = 10),#
                numericInput("hm_height", "Height", value = 1200, min = 100, max = 2400, step = 10))#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("Heatmap", value=1, uiOutput("heatmap_ui")),#
            tabPanel("Summary boxplots", plotOutput("overallPlot", height = 600)),#
            tabPanel("By-gene boxplots", plotOutput("byGenePlot", height = 600)),#
            id = "absexpanel"#
        )#
        )#
        )#
    ),#
#
    # Mixomics tab ---------------------------------------------#
    tabPanel("Relative expression",#
        h3("Compare genes based on relative expression between experimental groups"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Relative expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            checkboxGroupInput("pls_tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            checkboxInput("pls_probe", "Perform PLS-DA at probe level", value = FALSE),#
            br(),#
            h4("Gene contribution plot"),#
            uiOutput("numGenesUI"),#
            radioButtons("pls_ncomp", "Select component for gene contribution plot", choices = c(1,2)),#
            br()#
            # downloadButton("pls_download", "Download gene contribution data")#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("PCA Analysis", plotOutput("indPlot", height = 800)),#
            tabPanel("Circle variance", plotOutput("varPlot", height = 800)),#
            tabPanel("Loadings plot", plotOutput("contribPlot", height = 800))#
        ),#
        position = c("right","left"),#
        fluid = TRUE#
        )#
        )#
    )#
)#
)
test()
catCol
catCol2 <- brewer.pal(3, "Set1")
catCol2[1]
ui <- fluidPage(#
tags$head(tags$script(HTML(jscode))),#
# tags$script(HTML("$('body').addClass('fixed);")),#
shinyjs::useShinyjs(),#
navbarPage("receptoR",#
    theme = shinytheme("spacelab"),#
#
# Start page  ------------------------------------------------------------------------------#
#
    tabPanel("Start here",#
       h3("Welcome to receptoR!"),#
       hr(),#
       sidebarLayout(#
           sidebarPanel(#
               h4("receptoR is an automated hypothesis generation software to identify cellular signaling pathways from transcriptomics data."),#
               p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky. Andouille t-bone biltong bacon beef ribs boudin frankfurter ham hock pork loin capicola tail ground round brisket tenderloin tri-tip. Ham pork bacon strip steak, ball tip leberkas meatball capicola pork loin. Ribeye turducken tri-tip jowl filet mignon drumstick shank corned beef prosciutto spare ribs sausage leberkas cupim burgdoggen bacon.",style="color:#D8BFD8"),#
               hr(),#
               p("(C) 2019 Derek Toms")),#
           mainPanel(#
               p("This software allows you to browse and analyze public transcriptomics data. To proceed, click \'Search for datasets\', above"),#
               img(src="overview.png"),#
               p("Spicy jalapeno bacon ipsum dolor amet brisket ribeye tri-tip tail meatloaf ground round salami fatback. Ball tip flank pork turkey prosciutto. Venison burgdoggen beef pork hamburger tongue shankle rump frankfurter kielbasa pastrami pork belly. T-bone fatback venison tenderloin salami biltong turkey chuck.",style="color:#D8BFD8"),#
#
p("Turkey tenderloin buffalo frankfurter, strip steak capicola filet mignon ribeye cow t-bone biltong. Tri-tip hamburger ham hock, shank landjaeger kielbasa pork loin spare ribs pastrami salami shoulder alcatra. Biltong tail brisket, turkey beef ribs hamburger prosciutto bacon tenderloin pancetta shank venison picanha cupim. Frankfurter porchetta turkey biltong corned beef, burgdoggen prosciutto jerky tail. Capicola beef ribs burgdoggen pancetta, frankfurter leberkas pig. Filet mignon jerky ground round cow burgdoggen, shoulder boudin ham hock pancetta.",style="color:#D8BFD8"),#
#
p("Sirloin salami strip steak burgdoggen pork chop ribeye, pastrami fatback short ribs corned beef. Beef shank shoulder, leberkas pancetta ground round jowl tenderloin ribeye hamburger shankle flank. Strip steak short loin kevin pork belly meatball swine sausage ham jowl pig tongue venison fatback t-bone beef. Spare ribs shoulder ham hock strip steak pastrami.",style="color:#D8BFD8")#
               ))#
        ),#
#
# Search for GSE  ------------------------------------------------------------------------------#
#
    tabPanel("Search for datasets",#
       h3("Organize publicly available expression data"),#
       hr(),#
       sidebarLayout(#
       sidebarPanel(#
           # style = "position:fixed;width:30%",#
           h4("Search for datasets"),#
           p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
           hr(),#
           conditionalPanel(condition="input.searchpanel==1",#
           h4("Find expression data from publicly available datasets to begin defining your own experiment."),#
           p("Begin by searching for ",span("G",style="font-weight:bold"),"EO data ",span("se",style="font-weight:bold"),"ries (GSE) containing expression data for your cell or tissue type of interest."),#
           radioButtons("gplSelection", "Choose species:", choices = c("Mouse (GPL1261)" = "mouse", "Human (GPL570)" = "human")),#
           tagAppendAttributes(textInput("Key", "Enter search terms, separated by commas", value = ""),`data-proxy-click` = "Search"),#
           actionButton("Search", "Search"),#
           hr(),#
           p("When you have selected the appropriate datasets, click \'Retrieve GSM\' to collect sample information and then click on the \'Assign samples\' tab above."),#
           actionButton("getGSM", "Retrieve GSM")),#
           conditionalPanel(condition="input.searchpanel==2",#
           h4("Define the categories that you wish to assign each sample (GSM) for comparison."),#
           splitLayout(cellWidths=c("90%","10%"), textInput("cat1", label=NULL, placeholder="Category 1"),tags$span(style="color:#E41A1C",icon("circle"))),#
           textInput("cat2", label=NULL, placeholder="Category 2"),#
           textInput("cat3", label=NULL, placeholder="Category 3 (optional)"),#
           ### https://www.aridhia.com/blog/the-sky-is-not-the-limit-embedding-raw-html-and-javascript-to-create-dynamic-ui-elements-in-shiny-applications/   #
           ### ^ this should help with dynamically adding/subtracting categories#
           hr(),#
           h4("Highlight samples, then click to Assign them to the specificed category."),#
           uiOutput("categorySelect"),#
           actionButton("Assign", "Assign GSM to Category")),#
           conditionalPanel(condition="input.searchpanel==3",#
               h4("Thank you for using receptoR!"),#
               p(" Please enter your name and any comments/bugs/questions/requests in the box below, then click the \'Download and Process\' button to retrieve the raw files from the NCBI server and process them based on their assigned categories."),#
               textAreaInput("comments","Comments",width="100%",height="100px",resize="vertical"),#
               textInput("downloadId","Download ID"),#
               actionButton("downloadCEL","Download and Process"))#
       ),#
       mainPanel(#
           # Search GSE based on species#
        tabsetPanel(#
        tabPanel("Search", value=1,#
            h4("GEO data series (\'GSE\') matching search query"), # return search here!#
            DT::dataTableOutput("filteredgse")#
        ),#
        # Assign samples to categories ------------------------------------------------------#
        tabPanel("Assign", value=2,#
            h4("From the selected series' (GSE) assign individual samples (GSM) to categories of your choosing."),#
            DT::dataTableOutput("gsm_table")#
        ),#
        # This will be where the CEL files are downloaded (confirmation, etc) ------------#
        tabPanel("Process", value=3,#
        h4("Please confirm samples are properly categorized."),#
        p("Expression samples annotated:"),#
                DT::dataTableOutput("finishedtable")#
        ),#
        id = "searchpanel"#
        )#
        )#
        )#
    ),#
    # Load Gene Expression Data tab -------------------------------------#
    tabPanel("Load expression data",#
        h3("Pick from user-defined experiments to perform analyses"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Load expression data"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            hr(),#
            selectInput(inputId="user_data",label="Select user data for analysis",choices=c("none"="none","Photoreceptors v RPE"="2018-04-13_app_data.rda"),selected="none"),#
            br(),#
            uiOutput("geneListsUI"),#
            br(),#
            uiOutput("geneUI")#
        ),#
        mainPanel(#
            tabsetPanel(type="tabs",selected="Gene-level expression",#
            tabPanel("Experimental design",h4("Category definitions and contrasts"),p("Coming soon!")),#
            tabPanel("Gene-level expression",#
                fluidRow(#
                column(6, h4("Average Expression"), DT::dataTableOutput("genes")),#
                column(6, h4("Gene Boxplot"), plotOutput("singleGenePlot"))#
            )))#
        )#
        )#
    ),#
    # Magnitude expression tab ------------------------------------------------------------------------------#
#
    tabPanel("Absolute expression",#
        h3("Compare genes based on absolute expression"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Absolute expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            # style = "position:fixed",#
            checkboxGroupInput("tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            br(),#
            checkboxInput("de_state", label = "Show differential expressed only", value = TRUE),#
            uiOutput("de_choices"),#
            br(),#
            conditionalPanel(condition="input.absexpanel==1",#
                h3("Heatmap parameters"),#
                checkboxInput("hm_probes", "Show probe-level", value = FALSE),#
                checkboxInput("hm_gsm", "Show GSM (column names)", value = TRUE),#
                checkboxInput("hm_rownames", "Show rownames", value = TRUE),#
                checkboxInput("hm_col_cluster", "Cluster columns", value = TRUE),#
                checkboxInput("hm_row_cluster", "Cluster rows", value = TRUE),#
                h4("Select plot dimensions (px)"),#
                numericInput("hm_width", "Width", value = 900, min = 100, max = 2400, step = 10),#
                numericInput("hm_height", "Height", value = 1200, min = 100, max = 2400, step = 10))#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("Heatmap", value=1, uiOutput("heatmap_ui")),#
            tabPanel("Summary boxplots", plotOutput("overallPlot", height = 600)),#
            tabPanel("By-gene boxplots", plotOutput("byGenePlot", height = 600)),#
            id = "absexpanel"#
        )#
        )#
        )#
    ),#
#
    # Mixomics tab ---------------------------------------------#
    tabPanel("Relative expression",#
        h3("Compare genes based on relative expression between experimental groups"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Relative expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            checkboxGroupInput("pls_tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            checkboxInput("pls_probe", "Perform PLS-DA at probe level", value = FALSE),#
            br(),#
            h4("Gene contribution plot"),#
            uiOutput("numGenesUI"),#
            radioButtons("pls_ncomp", "Select component for gene contribution plot", choices = c(1,2)),#
            br()#
            # downloadButton("pls_download", "Download gene contribution data")#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("PCA Analysis", plotOutput("indPlot", height = 800)),#
            tabPanel("Circle variance", plotOutput("varPlot", height = 800)),#
            tabPanel("Loadings plot", plotOutput("contribPlot", height = 800))#
        ),#
        position = c("right","left"),#
        fluid = TRUE#
        )#
        )#
    )#
)#
)
test()
ui <- fluidPage(#
tags$head(tags$script(HTML(jscode))),#
# tags$script(HTML("$('body').addClass('fixed);")),#
shinyjs::useShinyjs(),#
navbarPage("receptoR",#
    theme = shinytheme("spacelab"),#
#
# Start page  ------------------------------------------------------------------------------#
#
    tabPanel("Start here",#
       h3("Welcome to receptoR!"),#
       hr(),#
       sidebarLayout(#
           sidebarPanel(#
               h4("receptoR is an automated hypothesis generation software to identify cellular signaling pathways from transcriptomics data."),#
               p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky. Andouille t-bone biltong bacon beef ribs boudin frankfurter ham hock pork loin capicola tail ground round brisket tenderloin tri-tip. Ham pork bacon strip steak, ball tip leberkas meatball capicola pork loin. Ribeye turducken tri-tip jowl filet mignon drumstick shank corned beef prosciutto spare ribs sausage leberkas cupim burgdoggen bacon.",style="color:#D8BFD8"),#
               hr(),#
               p("(C) 2019 Derek Toms")),#
           mainPanel(#
               p("This software allows you to browse and analyze public transcriptomics data. To proceed, click \'Search for datasets\', above"),#
               img(src="overview.png"),#
               p("Spicy jalapeno bacon ipsum dolor amet brisket ribeye tri-tip tail meatloaf ground round salami fatback. Ball tip flank pork turkey prosciutto. Venison burgdoggen beef pork hamburger tongue shankle rump frankfurter kielbasa pastrami pork belly. T-bone fatback venison tenderloin salami biltong turkey chuck.",style="color:#D8BFD8"),#
#
p("Turkey tenderloin buffalo frankfurter, strip steak capicola filet mignon ribeye cow t-bone biltong. Tri-tip hamburger ham hock, shank landjaeger kielbasa pork loin spare ribs pastrami salami shoulder alcatra. Biltong tail brisket, turkey beef ribs hamburger prosciutto bacon tenderloin pancetta shank venison picanha cupim. Frankfurter porchetta turkey biltong corned beef, burgdoggen prosciutto jerky tail. Capicola beef ribs burgdoggen pancetta, frankfurter leberkas pig. Filet mignon jerky ground round cow burgdoggen, shoulder boudin ham hock pancetta.",style="color:#D8BFD8"),#
#
p("Sirloin salami strip steak burgdoggen pork chop ribeye, pastrami fatback short ribs corned beef. Beef shank shoulder, leberkas pancetta ground round jowl tenderloin ribeye hamburger shankle flank. Strip steak short loin kevin pork belly meatball swine sausage ham jowl pig tongue venison fatback t-bone beef. Spare ribs shoulder ham hock strip steak pastrami.",style="color:#D8BFD8")#
               ))#
        ),#
#
# Search for GSE  ------------------------------------------------------------------------------#
#
    tabPanel("Search for datasets",#
       h3("Organize publicly available expression data"),#
       hr(),#
       sidebarLayout(#
       sidebarPanel(#
           # style = "position:fixed;width:30%",#
           h4("Search for datasets"),#
           p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
           hr(),#
           conditionalPanel(condition="input.searchpanel==1",#
           h4("Find expression data from publicly available datasets to begin defining your own experiment."),#
           p("Begin by searching for ",span("G",style="font-weight:bold"),"EO data ",span("se",style="font-weight:bold"),"ries (GSE) containing expression data for your cell or tissue type of interest."),#
           radioButtons("gplSelection", "Choose species:", choices = c("Mouse (GPL1261)" = "mouse", "Human (GPL570)" = "human")),#
           tagAppendAttributes(textInput("Key", "Enter search terms, separated by commas", value = ""),`data-proxy-click` = "Search"),#
           actionButton("Search", "Search"),#
           hr(),#
           p("When you have selected the appropriate datasets, click \'Retrieve GSM\' to collect sample information and then click on the \'Assign samples\' tab above."),#
           actionButton("getGSM", "Retrieve GSM")),#
           conditionalPanel(condition="input.searchpanel==2",#
           h4("Define the categories that you wish to assign each sample (GSM) for comparison."),#
           splitLayout(cellWidths=c("90%","10%"), textInput("cat1", label=NULL, placeholder="Category 1"),tags$span(style="color:#E41A1C",icon("circle",class="fa-3x"))),#
           splitLayout(cellWidths=c("90%","10%"), textInput("cat2", label=NULL, placeholder="Category 2"),tags$span(style="color:#E41A1C",icon("circle",class="fa-3x"))),#
           splitLayout(cellWidths=c("90%","10%"), textInput("cat3", label=NULL, placeholder="Category 3 (optional)"tags$span(style="color:#E41A1C",icon("circle",class="fa-3x")))),#
           ### https://www.aridhia.com/blog/the-sky-is-not-the-limit-embedding-raw-html-and-javascript-to-create-dynamic-ui-elements-in-shiny-applications/   #
           ### ^ this should help with dynamically adding/subtracting categories#
           hr(),#
           h4("Highlight samples, then click to Assign them to the specificed category."),#
           uiOutput("categorySelect"),#
           actionButton("Assign", "Assign GSM to Category")),#
           conditionalPanel(condition="input.searchpanel==3",#
               h4("Thank you for using receptoR!"),#
               p(" Please enter your name and any comments/bugs/questions/requests in the box below, then click the \'Download and Process\' button to retrieve the raw files from the NCBI server and process them based on their assigned categories."),#
               textAreaInput("comments","Comments",width="100%",height="100px",resize="vertical"),#
               textInput("downloadId","Download ID"),#
               actionButton("downloadCEL","Download and Process"))#
       ),#
       mainPanel(#
           # Search GSE based on species#
        tabsetPanel(#
        tabPanel("Search", value=1,#
            h4("GEO data series (\'GSE\') matching search query"), # return search here!#
            DT::dataTableOutput("filteredgse")#
        ),#
        # Assign samples to categories ------------------------------------------------------#
        tabPanel("Assign", value=2,#
            h4("From the selected series' (GSE) assign individual samples (GSM) to categories of your choosing."),#
            DT::dataTableOutput("gsm_table")#
        ),#
        # This will be where the CEL files are downloaded (confirmation, etc) ------------#
        tabPanel("Process", value=3,#
        h4("Please confirm samples are properly categorized."),#
        p("Expression samples annotated:"),#
                DT::dataTableOutput("finishedtable")#
        ),#
        id = "searchpanel"#
        )#
        )#
        )#
    ),#
    # Load Gene Expression Data tab -------------------------------------#
    tabPanel("Load expression data",#
        h3("Pick from user-defined experiments to perform analyses"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Load expression data"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            hr(),#
            selectInput(inputId="user_data",label="Select user data for analysis",choices=c("none"="none","Photoreceptors v RPE"="2018-04-13_app_data.rda"),selected="none"),#
            br(),#
            uiOutput("geneListsUI"),#
            br(),#
            uiOutput("geneUI")#
        ),#
        mainPanel(#
            tabsetPanel(type="tabs",selected="Gene-level expression",#
            tabPanel("Experimental design",h4("Category definitions and contrasts"),p("Coming soon!")),#
            tabPanel("Gene-level expression",#
                fluidRow(#
                column(6, h4("Average Expression"), DT::dataTableOutput("genes")),#
                column(6, h4("Gene Boxplot"), plotOutput("singleGenePlot"))#
            )))#
        )#
        )#
    ),#
    # Magnitude expression tab ------------------------------------------------------------------------------#
#
    tabPanel("Absolute expression",#
        h3("Compare genes based on absolute expression"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Absolute expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            # style = "position:fixed",#
            checkboxGroupInput("tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            br(),#
            checkboxInput("de_state", label = "Show differential expressed only", value = TRUE),#
            uiOutput("de_choices"),#
            br(),#
            conditionalPanel(condition="input.absexpanel==1",#
                h3("Heatmap parameters"),#
                checkboxInput("hm_probes", "Show probe-level", value = FALSE),#
                checkboxInput("hm_gsm", "Show GSM (column names)", value = TRUE),#
                checkboxInput("hm_rownames", "Show rownames", value = TRUE),#
                checkboxInput("hm_col_cluster", "Cluster columns", value = TRUE),#
                checkboxInput("hm_row_cluster", "Cluster rows", value = TRUE),#
                h4("Select plot dimensions (px)"),#
                numericInput("hm_width", "Width", value = 900, min = 100, max = 2400, step = 10),#
                numericInput("hm_height", "Height", value = 1200, min = 100, max = 2400, step = 10))#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("Heatmap", value=1, uiOutput("heatmap_ui")),#
            tabPanel("Summary boxplots", plotOutput("overallPlot", height = 600)),#
            tabPanel("By-gene boxplots", plotOutput("byGenePlot", height = 600)),#
            id = "absexpanel"#
        )#
        )#
        )#
    ),#
#
    # Mixomics tab ---------------------------------------------#
    tabPanel("Relative expression",#
        h3("Compare genes based on relative expression between experimental groups"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Relative expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            checkboxGroupInput("pls_tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            checkboxInput("pls_probe", "Perform PLS-DA at probe level", value = FALSE),#
            br(),#
            h4("Gene contribution plot"),#
            uiOutput("numGenesUI"),#
            radioButtons("pls_ncomp", "Select component for gene contribution plot", choices = c(1,2)),#
            br()#
            # downloadButton("pls_download", "Download gene contribution data")#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("PCA Analysis", plotOutput("indPlot", height = 800)),#
            tabPanel("Circle variance", plotOutput("varPlot", height = 800)),#
            tabPanel("Loadings plot", plotOutput("contribPlot", height = 800))#
        ),#
        position = c("right","left"),#
        fluid = TRUE#
        )#
        )#
    )#
)#
)
ui <- fluidPage(#
tags$head(tags$script(HTML(jscode))),#
# tags$script(HTML("$('body').addClass('fixed);")),#
shinyjs::useShinyjs(),#
navbarPage("receptoR",#
    theme = shinytheme("spacelab"),#
#
# Start page  ------------------------------------------------------------------------------#
#
    tabPanel("Start here",#
       h3("Welcome to receptoR!"),#
       hr(),#
       sidebarLayout(#
           sidebarPanel(#
               h4("receptoR is an automated hypothesis generation software to identify cellular signaling pathways from transcriptomics data."),#
               p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky. Andouille t-bone biltong bacon beef ribs boudin frankfurter ham hock pork loin capicola tail ground round brisket tenderloin tri-tip. Ham pork bacon strip steak, ball tip leberkas meatball capicola pork loin. Ribeye turducken tri-tip jowl filet mignon drumstick shank corned beef prosciutto spare ribs sausage leberkas cupim burgdoggen bacon.",style="color:#D8BFD8"),#
               hr(),#
               p("(C) 2019 Derek Toms")),#
           mainPanel(#
               p("This software allows you to browse and analyze public transcriptomics data. To proceed, click \'Search for datasets\', above"),#
               img(src="overview.png"),#
               p("Spicy jalapeno bacon ipsum dolor amet brisket ribeye tri-tip tail meatloaf ground round salami fatback. Ball tip flank pork turkey prosciutto. Venison burgdoggen beef pork hamburger tongue shankle rump frankfurter kielbasa pastrami pork belly. T-bone fatback venison tenderloin salami biltong turkey chuck.",style="color:#D8BFD8"),#
#
p("Turkey tenderloin buffalo frankfurter, strip steak capicola filet mignon ribeye cow t-bone biltong. Tri-tip hamburger ham hock, shank landjaeger kielbasa pork loin spare ribs pastrami salami shoulder alcatra. Biltong tail brisket, turkey beef ribs hamburger prosciutto bacon tenderloin pancetta shank venison picanha cupim. Frankfurter porchetta turkey biltong corned beef, burgdoggen prosciutto jerky tail. Capicola beef ribs burgdoggen pancetta, frankfurter leberkas pig. Filet mignon jerky ground round cow burgdoggen, shoulder boudin ham hock pancetta.",style="color:#D8BFD8"),#
#
p("Sirloin salami strip steak burgdoggen pork chop ribeye, pastrami fatback short ribs corned beef. Beef shank shoulder, leberkas pancetta ground round jowl tenderloin ribeye hamburger shankle flank. Strip steak short loin kevin pork belly meatball swine sausage ham jowl pig tongue venison fatback t-bone beef. Spare ribs shoulder ham hock strip steak pastrami.",style="color:#D8BFD8")#
               ))#
        ),#
#
# Search for GSE  ------------------------------------------------------------------------------#
#
    tabPanel("Search for datasets",#
       h3("Organize publicly available expression data"),#
       hr(),#
       sidebarLayout(#
       sidebarPanel(#
           # style = "position:fixed;width:30%",#
           h4("Search for datasets"),#
           p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
           hr(),#
           conditionalPanel(condition="input.searchpanel==1",#
           h4("Find expression data from publicly available datasets to begin defining your own experiment."),#
           p("Begin by searching for ",span("G",style="font-weight:bold"),"EO data ",span("se",style="font-weight:bold"),"ries (GSE) containing expression data for your cell or tissue type of interest."),#
           radioButtons("gplSelection", "Choose species:", choices = c("Mouse (GPL1261)" = "mouse", "Human (GPL570)" = "human")),#
           tagAppendAttributes(textInput("Key", "Enter search terms, separated by commas", value = ""),`data-proxy-click` = "Search"),#
           actionButton("Search", "Search"),#
           hr(),#
           p("When you have selected the appropriate datasets, click \'Retrieve GSM\' to collect sample information and then click on the \'Assign samples\' tab above."),#
           actionButton("getGSM", "Retrieve GSM")),#
           conditionalPanel(condition="input.searchpanel==2",#
           h4("Define the categories that you wish to assign each sample (GSM) for comparison."),#
           splitLayout(cellWidths=c("90%","10%"), textInput("cat1", label=NULL, placeholder="Category 1"),tags$span(style="color:#E41A1C",icon("circle",class="fa-3x"))),#
           splitLayout(cellWidths=c("90%","10%"), textInput("cat2", label=NULL, placeholder="Category 2"),tags$span(style="color:#E41A1C",icon("circle",class="fa-3x"))),#
           splitLayout(cellWidths=c("90%","10%"), textInput("cat3", label=NULL, placeholder="Category 3 (optional)"tags$span(style="color:#E41A1C",icon("circle",class="fa-3x"))),#
           ### https://www.aridhia.com/blog/the-sky-is-not-the-limit-embedding-raw-html-and-javascript-to-create-dynamic-ui-elements-in-shiny-applications/   #
           ### ^ this should help with dynamically adding/subtracting categories#
           hr(),#
           h4("Highlight samples, then click to Assign them to the specificed category."),#
           uiOutput("categorySelect"),#
           actionButton("Assign", "Assign GSM to Category")),#
           conditionalPanel(condition="input.searchpanel==3",#
               h4("Thank you for using receptoR!"),#
               p(" Please enter your name and any comments/bugs/questions/requests in the box below, then click the \'Download and Process\' button to retrieve the raw files from the NCBI server and process them based on their assigned categories."),#
               textAreaInput("comments","Comments",width="100%",height="100px",resize="vertical"),#
               textInput("downloadId","Download ID"),#
               actionButton("downloadCEL","Download and Process"))#
       ),#
       mainPanel(#
           # Search GSE based on species#
        tabsetPanel(#
        tabPanel("Search", value=1,#
            h4("GEO data series (\'GSE\') matching search query"), # return search here!#
            DT::dataTableOutput("filteredgse")#
        ),#
        # Assign samples to categories ------------------------------------------------------#
        tabPanel("Assign", value=2,#
            h4("From the selected series' (GSE) assign individual samples (GSM) to categories of your choosing."),#
            DT::dataTableOutput("gsm_table")#
        ),#
        # This will be where the CEL files are downloaded (confirmation, etc) ------------#
        tabPanel("Process", value=3,#
        h4("Please confirm samples are properly categorized."),#
        p("Expression samples annotated:"),#
                DT::dataTableOutput("finishedtable")#
        ),#
        id = "searchpanel"#
        )#
        )#
        )#
    ),#
    # Load Gene Expression Data tab -------------------------------------#
    tabPanel("Load expression data",#
        h3("Pick from user-defined experiments to perform analyses"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Load expression data"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            hr(),#
            selectInput(inputId="user_data",label="Select user data for analysis",choices=c("none"="none","Photoreceptors v RPE"="2018-04-13_app_data.rda"),selected="none"),#
            br(),#
            uiOutput("geneListsUI"),#
            br(),#
            uiOutput("geneUI")#
        ),#
        mainPanel(#
            tabsetPanel(type="tabs",selected="Gene-level expression",#
            tabPanel("Experimental design",h4("Category definitions and contrasts"),p("Coming soon!")),#
            tabPanel("Gene-level expression",#
                fluidRow(#
                column(6, h4("Average Expression"), DT::dataTableOutput("genes")),#
                column(6, h4("Gene Boxplot"), plotOutput("singleGenePlot"))#
            )))#
        )#
        )#
    ),#
    # Magnitude expression tab ------------------------------------------------------------------------------#
#
    tabPanel("Absolute expression",#
        h3("Compare genes based on absolute expression"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Absolute expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            # style = "position:fixed",#
            checkboxGroupInput("tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            br(),#
            checkboxInput("de_state", label = "Show differential expressed only", value = TRUE),#
            uiOutput("de_choices"),#
            br(),#
            conditionalPanel(condition="input.absexpanel==1",#
                h3("Heatmap parameters"),#
                checkboxInput("hm_probes", "Show probe-level", value = FALSE),#
                checkboxInput("hm_gsm", "Show GSM (column names)", value = TRUE),#
                checkboxInput("hm_rownames", "Show rownames", value = TRUE),#
                checkboxInput("hm_col_cluster", "Cluster columns", value = TRUE),#
                checkboxInput("hm_row_cluster", "Cluster rows", value = TRUE),#
                h4("Select plot dimensions (px)"),#
                numericInput("hm_width", "Width", value = 900, min = 100, max = 2400, step = 10),#
                numericInput("hm_height", "Height", value = 1200, min = 100, max = 2400, step = 10))#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("Heatmap", value=1, uiOutput("heatmap_ui")),#
            tabPanel("Summary boxplots", plotOutput("overallPlot", height = 600)),#
            tabPanel("By-gene boxplots", plotOutput("byGenePlot", height = 600)),#
            id = "absexpanel"#
        )#
        )#
        )#
    ),#
#
    # Mixomics tab ---------------------------------------------#
    tabPanel("Relative expression",#
        h3("Compare genes based on relative expression between experimental groups"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Relative expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            checkboxGroupInput("pls_tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            checkboxInput("pls_probe", "Perform PLS-DA at probe level", value = FALSE),#
            br(),#
            h4("Gene contribution plot"),#
            uiOutput("numGenesUI"),#
            radioButtons("pls_ncomp", "Select component for gene contribution plot", choices = c(1,2)),#
            br()#
            # downloadButton("pls_download", "Download gene contribution data")#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("PCA Analysis", plotOutput("indPlot", height = 800)),#
            tabPanel("Circle variance", plotOutput("varPlot", height = 800)),#
            tabPanel("Loadings plot", plotOutput("contribPlot", height = 800))#
        ),#
        position = c("right","left"),#
        fluid = TRUE#
        )#
        )#
    )#
)#
)
ui <- fluidPage(#
tags$head(tags$script(HTML(jscode))),#
# tags$script(HTML("$('body').addClass('fixed);")),#
shinyjs::useShinyjs(),#
navbarPage("receptoR",#
    theme = shinytheme("spacelab"),#
#
# Start page  ------------------------------------------------------------------------------#
#
    tabPanel("Start here",#
       h3("Welcome to receptoR!"),#
       hr(),#
       sidebarLayout(#
           sidebarPanel(#
               h4("receptoR is an automated hypothesis generation software to identify cellular signaling pathways from transcriptomics data."),#
               p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky. Andouille t-bone biltong bacon beef ribs boudin frankfurter ham hock pork loin capicola tail ground round brisket tenderloin tri-tip. Ham pork bacon strip steak, ball tip leberkas meatball capicola pork loin. Ribeye turducken tri-tip jowl filet mignon drumstick shank corned beef prosciutto spare ribs sausage leberkas cupim burgdoggen bacon.",style="color:#D8BFD8"),#
               hr(),#
               p("(C) 2019 Derek Toms")),#
           mainPanel(#
               p("This software allows you to browse and analyze public transcriptomics data. To proceed, click \'Search for datasets\', above"),#
               img(src="overview.png"),#
               p("Spicy jalapeno bacon ipsum dolor amet brisket ribeye tri-tip tail meatloaf ground round salami fatback. Ball tip flank pork turkey prosciutto. Venison burgdoggen beef pork hamburger tongue shankle rump frankfurter kielbasa pastrami pork belly. T-bone fatback venison tenderloin salami biltong turkey chuck.",style="color:#D8BFD8"),#
#
p("Turkey tenderloin buffalo frankfurter, strip steak capicola filet mignon ribeye cow t-bone biltong. Tri-tip hamburger ham hock, shank landjaeger kielbasa pork loin spare ribs pastrami salami shoulder alcatra. Biltong tail brisket, turkey beef ribs hamburger prosciutto bacon tenderloin pancetta shank venison picanha cupim. Frankfurter porchetta turkey biltong corned beef, burgdoggen prosciutto jerky tail. Capicola beef ribs burgdoggen pancetta, frankfurter leberkas pig. Filet mignon jerky ground round cow burgdoggen, shoulder boudin ham hock pancetta.",style="color:#D8BFD8"),#
#
p("Sirloin salami strip steak burgdoggen pork chop ribeye, pastrami fatback short ribs corned beef. Beef shank shoulder, leberkas pancetta ground round jowl tenderloin ribeye hamburger shankle flank. Strip steak short loin kevin pork belly meatball swine sausage ham jowl pig tongue venison fatback t-bone beef. Spare ribs shoulder ham hock strip steak pastrami.",style="color:#D8BFD8")#
               ))#
        ),#
#
# Search for GSE  ------------------------------------------------------------------------------#
#
    tabPanel("Search for datasets",#
       h3("Organize publicly available expression data"),#
       hr(),#
       sidebarLayout(#
       sidebarPanel(#
           # style = "position:fixed;width:30%",#
           h4("Search for datasets"),#
           p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
           hr(),#
           conditionalPanel(condition="input.searchpanel==1",#
           h4("Find expression data from publicly available datasets to begin defining your own experiment."),#
           p("Begin by searching for ",span("G",style="font-weight:bold"),"EO data ",span("se",style="font-weight:bold"),"ries (GSE) containing expression data for your cell or tissue type of interest."),#
           radioButtons("gplSelection", "Choose species:", choices = c("Mouse (GPL1261)" = "mouse", "Human (GPL570)" = "human")),#
           tagAppendAttributes(textInput("Key", "Enter search terms, separated by commas", value = ""),`data-proxy-click` = "Search"),#
           actionButton("Search", "Search"),#
           hr(),#
           p("When you have selected the appropriate datasets, click \'Retrieve GSM\' to collect sample information and then click on the \'Assign samples\' tab above."),#
           actionButton("getGSM", "Retrieve GSM")),#
           conditionalPanel(condition="input.searchpanel==2",#
           h4("Define the categories that you wish to assign each sample (GSM) for comparison."),#
           # splitLayout(cellWidths=c("90%","10%"), textInput("cat1", label=NULL, placeholder="Category 1"),tags$span(style="color:#E41A1C",icon("circle",class="fa-3x"))),#
#            splitLayout(cellWidths=c("90%","10%"), textInput("cat2", label=NULL, placeholder="Category 2"),tags$span(style="color:#E41A1C",icon("circle",class="fa-3x"))),#
#            splitLayout(cellWidths=c("90%","10%"), textInput("cat3", label=NULL, placeholder="Category 3 (optional)"tags$span(style="color:#E41A1C",icon("circle",class="fa-3x"))),#
           ### https://www.aridhia.com/blog/the-sky-is-not-the-limit-embedding-raw-html-and-javascript-to-create-dynamic-ui-elements-in-shiny-applications/   #
           ### ^ this should help with dynamically adding/subtracting categories#
           hr(),#
           h4("Highlight samples, then click to Assign them to the specificed category."),#
           uiOutput("categorySelect"),#
           actionButton("Assign", "Assign GSM to Category")),#
           conditionalPanel(condition="input.searchpanel==3",#
               h4("Thank you for using receptoR!"),#
               p(" Please enter your name and any comments/bugs/questions/requests in the box below, then click the \'Download and Process\' button to retrieve the raw files from the NCBI server and process them based on their assigned categories."),#
               textAreaInput("comments","Comments",width="100%",height="100px",resize="vertical"),#
               textInput("downloadId","Download ID"),#
               actionButton("downloadCEL","Download and Process"))#
       ),#
       mainPanel(#
           # Search GSE based on species#
        tabsetPanel(#
        tabPanel("Search", value=1,#
            h4("GEO data series (\'GSE\') matching search query"), # return search here!#
            DT::dataTableOutput("filteredgse")#
        ),#
        # Assign samples to categories ------------------------------------------------------#
        tabPanel("Assign", value=2,#
            h4("From the selected series' (GSE) assign individual samples (GSM) to categories of your choosing."),#
            DT::dataTableOutput("gsm_table")#
        ),#
        # This will be where the CEL files are downloaded (confirmation, etc) ------------#
        tabPanel("Process", value=3,#
        h4("Please confirm samples are properly categorized."),#
        p("Expression samples annotated:"),#
                DT::dataTableOutput("finishedtable")#
        ),#
        id = "searchpanel"#
        )#
        )#
        )#
    ),#
    # Load Gene Expression Data tab -------------------------------------#
    tabPanel("Load expression data",#
        h3("Pick from user-defined experiments to perform analyses"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Load expression data"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            hr(),#
            selectInput(inputId="user_data",label="Select user data for analysis",choices=c("none"="none","Photoreceptors v RPE"="2018-04-13_app_data.rda"),selected="none"),#
            br(),#
            uiOutput("geneListsUI"),#
            br(),#
            uiOutput("geneUI")#
        ),#
        mainPanel(#
            tabsetPanel(type="tabs",selected="Gene-level expression",#
            tabPanel("Experimental design",h4("Category definitions and contrasts"),p("Coming soon!")),#
            tabPanel("Gene-level expression",#
                fluidRow(#
                column(6, h4("Average Expression"), DT::dataTableOutput("genes")),#
                column(6, h4("Gene Boxplot"), plotOutput("singleGenePlot"))#
            )))#
        )#
        )#
    ),#
    # Magnitude expression tab ------------------------------------------------------------------------------#
#
    tabPanel("Absolute expression",#
        h3("Compare genes based on absolute expression"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Absolute expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            # style = "position:fixed",#
            checkboxGroupInput("tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            br(),#
            checkboxInput("de_state", label = "Show differential expressed only", value = TRUE),#
            uiOutput("de_choices"),#
            br(),#
            conditionalPanel(condition="input.absexpanel==1",#
                h3("Heatmap parameters"),#
                checkboxInput("hm_probes", "Show probe-level", value = FALSE),#
                checkboxInput("hm_gsm", "Show GSM (column names)", value = TRUE),#
                checkboxInput("hm_rownames", "Show rownames", value = TRUE),#
                checkboxInput("hm_col_cluster", "Cluster columns", value = TRUE),#
                checkboxInput("hm_row_cluster", "Cluster rows", value = TRUE),#
                h4("Select plot dimensions (px)"),#
                numericInput("hm_width", "Width", value = 900, min = 100, max = 2400, step = 10),#
                numericInput("hm_height", "Height", value = 1200, min = 100, max = 2400, step = 10))#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("Heatmap", value=1, uiOutput("heatmap_ui")),#
            tabPanel("Summary boxplots", plotOutput("overallPlot", height = 600)),#
            tabPanel("By-gene boxplots", plotOutput("byGenePlot", height = 600)),#
            id = "absexpanel"#
        )#
        )#
        )#
    ),#
#
    # Mixomics tab ---------------------------------------------#
    tabPanel("Relative expression",#
        h3("Compare genes based on relative expression between experimental groups"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Relative expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            checkboxGroupInput("pls_tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            checkboxInput("pls_probe", "Perform PLS-DA at probe level", value = FALSE),#
            br(),#
            h4("Gene contribution plot"),#
            uiOutput("numGenesUI"),#
            radioButtons("pls_ncomp", "Select component for gene contribution plot", choices = c(1,2)),#
            br()#
            # downloadButton("pls_download", "Download gene contribution data")#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("PCA Analysis", plotOutput("indPlot", height = 800)),#
            tabPanel("Circle variance", plotOutput("varPlot", height = 800)),#
            tabPanel("Loadings plot", plotOutput("contribPlot", height = 800))#
        ),#
        position = c("right","left"),#
        fluid = TRUE#
        )#
        )#
    )#
)#
)
ui <- fluidPage(#
tags$head(tags$script(HTML(jscode))),#
# tags$script(HTML("$('body').addClass('fixed);")),#
shinyjs::useShinyjs(),#
navbarPage("receptoR",#
    theme = shinytheme("spacelab"),#
#
# Start page  ------------------------------------------------------------------------------#
#
    tabPanel("Start here",#
       h3("Welcome to receptoR!"),#
       hr(),#
       sidebarLayout(#
           sidebarPanel(#
               h4("receptoR is an automated hypothesis generation software to identify cellular signaling pathways from transcriptomics data."),#
               p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky. Andouille t-bone biltong bacon beef ribs boudin frankfurter ham hock pork loin capicola tail ground round brisket tenderloin tri-tip. Ham pork bacon strip steak, ball tip leberkas meatball capicola pork loin. Ribeye turducken tri-tip jowl filet mignon drumstick shank corned beef prosciutto spare ribs sausage leberkas cupim burgdoggen bacon.",style="color:#D8BFD8"),#
               hr(),#
               p("(C) 2019 Derek Toms")),#
           mainPanel(#
               p("This software allows you to browse and analyze public transcriptomics data. To proceed, click \'Search for datasets\', above"),#
               img(src="overview.png"),#
               p("Spicy jalapeno bacon ipsum dolor amet brisket ribeye tri-tip tail meatloaf ground round salami fatback. Ball tip flank pork turkey prosciutto. Venison burgdoggen beef pork hamburger tongue shankle rump frankfurter kielbasa pastrami pork belly. T-bone fatback venison tenderloin salami biltong turkey chuck.",style="color:#D8BFD8"),#
#
p("Turkey tenderloin buffalo frankfurter, strip steak capicola filet mignon ribeye cow t-bone biltong. Tri-tip hamburger ham hock, shank landjaeger kielbasa pork loin spare ribs pastrami salami shoulder alcatra. Biltong tail brisket, turkey beef ribs hamburger prosciutto bacon tenderloin pancetta shank venison picanha cupim. Frankfurter porchetta turkey biltong corned beef, burgdoggen prosciutto jerky tail. Capicola beef ribs burgdoggen pancetta, frankfurter leberkas pig. Filet mignon jerky ground round cow burgdoggen, shoulder boudin ham hock pancetta.",style="color:#D8BFD8"),#
#
p("Sirloin salami strip steak burgdoggen pork chop ribeye, pastrami fatback short ribs corned beef. Beef shank shoulder, leberkas pancetta ground round jowl tenderloin ribeye hamburger shankle flank. Strip steak short loin kevin pork belly meatball swine sausage ham jowl pig tongue venison fatback t-bone beef. Spare ribs shoulder ham hock strip steak pastrami.",style="color:#D8BFD8")#
               ))#
        ),#
#
# Search for GSE  ------------------------------------------------------------------------------#
#
    tabPanel("Search for datasets",#
       h3("Organize publicly available expression data"),#
       hr(),#
       sidebarLayout(#
       sidebarPanel(#
           # style = "position:fixed;width:30%",#
           h4("Search for datasets"),#
           p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
           hr(),#
           conditionalPanel(condition="input.searchpanel==1",#
           h4("Find expression data from publicly available datasets to begin defining your own experiment."),#
           p("Begin by searching for ",span("G",style="font-weight:bold"),"EO data ",span("se",style="font-weight:bold"),"ries (GSE) containing expression data for your cell or tissue type of interest."),#
           radioButtons("gplSelection", "Choose species:", choices = c("Mouse (GPL1261)" = "mouse", "Human (GPL570)" = "human")),#
           tagAppendAttributes(textInput("Key", "Enter search terms, separated by commas", value = ""),`data-proxy-click` = "Search"),#
           actionButton("Search", "Search"),#
           hr(),#
           p("When you have selected the appropriate datasets, click \'Retrieve GSM\' to collect sample information and then click on the \'Assign samples\' tab above."),#
           actionButton("getGSM", "Retrieve GSM")),#
           conditionalPanel(condition="input.searchpanel==2",#
           h4("Define the categories that you wish to assign each sample (GSM) for comparison."),#
           splitLayout(cellWidths=c("90%","10%"), textInput("cat1", label=NULL, placeholder="Category 1"),tags$span(style="color:#E41A1C",icon("circle",class="fa-3x"))),#
#            splitLayout(cellWidths=c("90%","10%"), textInput("cat2", label=NULL, placeholder="Category 2"),tags$span(style="color:#E41A1C",icon("circle",class="fa-3x"))),#
#            splitLayout(cellWidths=c("90%","10%"), textInput("cat3", label=NULL, placeholder="Category 3 (optional)"tags$span(style="color:#E41A1C",icon("circle",class="fa-3x"))),#
           ### https://www.aridhia.com/blog/the-sky-is-not-the-limit-embedding-raw-html-and-javascript-to-create-dynamic-ui-elements-in-shiny-applications/   #
           ### ^ this should help with dynamically adding/subtracting categories#
           hr(),#
           h4("Highlight samples, then click to Assign them to the specificed category."),#
           uiOutput("categorySelect"),#
           actionButton("Assign", "Assign GSM to Category")),#
           conditionalPanel(condition="input.searchpanel==3",#
               h4("Thank you for using receptoR!"),#
               p(" Please enter your name and any comments/bugs/questions/requests in the box below, then click the \'Download and Process\' button to retrieve the raw files from the NCBI server and process them based on their assigned categories."),#
               textAreaInput("comments","Comments",width="100%",height="100px",resize="vertical"),#
               textInput("downloadId","Download ID"),#
               actionButton("downloadCEL","Download and Process"))#
       ),#
       mainPanel(#
           # Search GSE based on species#
        tabsetPanel(#
        tabPanel("Search", value=1,#
            h4("GEO data series (\'GSE\') matching search query"), # return search here!#
            DT::dataTableOutput("filteredgse")#
        ),#
        # Assign samples to categories ------------------------------------------------------#
        tabPanel("Assign", value=2,#
            h4("From the selected series' (GSE) assign individual samples (GSM) to categories of your choosing."),#
            DT::dataTableOutput("gsm_table")#
        ),#
        # This will be where the CEL files are downloaded (confirmation, etc) ------------#
        tabPanel("Process", value=3,#
        h4("Please confirm samples are properly categorized."),#
        p("Expression samples annotated:"),#
                DT::dataTableOutput("finishedtable")#
        ),#
        id = "searchpanel"#
        )#
        )#
        )#
    ),#
    # Load Gene Expression Data tab -------------------------------------#
    tabPanel("Load expression data",#
        h3("Pick from user-defined experiments to perform analyses"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Load expression data"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            hr(),#
            selectInput(inputId="user_data",label="Select user data for analysis",choices=c("none"="none","Photoreceptors v RPE"="2018-04-13_app_data.rda"),selected="none"),#
            br(),#
            uiOutput("geneListsUI"),#
            br(),#
            uiOutput("geneUI")#
        ),#
        mainPanel(#
            tabsetPanel(type="tabs",selected="Gene-level expression",#
            tabPanel("Experimental design",h4("Category definitions and contrasts"),p("Coming soon!")),#
            tabPanel("Gene-level expression",#
                fluidRow(#
                column(6, h4("Average Expression"), DT::dataTableOutput("genes")),#
                column(6, h4("Gene Boxplot"), plotOutput("singleGenePlot"))#
            )))#
        )#
        )#
    ),#
    # Magnitude expression tab ------------------------------------------------------------------------------#
#
    tabPanel("Absolute expression",#
        h3("Compare genes based on absolute expression"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Absolute expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            # style = "position:fixed",#
            checkboxGroupInput("tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            br(),#
            checkboxInput("de_state", label = "Show differential expressed only", value = TRUE),#
            uiOutput("de_choices"),#
            br(),#
            conditionalPanel(condition="input.absexpanel==1",#
                h3("Heatmap parameters"),#
                checkboxInput("hm_probes", "Show probe-level", value = FALSE),#
                checkboxInput("hm_gsm", "Show GSM (column names)", value = TRUE),#
                checkboxInput("hm_rownames", "Show rownames", value = TRUE),#
                checkboxInput("hm_col_cluster", "Cluster columns", value = TRUE),#
                checkboxInput("hm_row_cluster", "Cluster rows", value = TRUE),#
                h4("Select plot dimensions (px)"),#
                numericInput("hm_width", "Width", value = 900, min = 100, max = 2400, step = 10),#
                numericInput("hm_height", "Height", value = 1200, min = 100, max = 2400, step = 10))#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("Heatmap", value=1, uiOutput("heatmap_ui")),#
            tabPanel("Summary boxplots", plotOutput("overallPlot", height = 600)),#
            tabPanel("By-gene boxplots", plotOutput("byGenePlot", height = 600)),#
            id = "absexpanel"#
        )#
        )#
        )#
    ),#
#
    # Mixomics tab ---------------------------------------------#
    tabPanel("Relative expression",#
        h3("Compare genes based on relative expression between experimental groups"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Relative expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            checkboxGroupInput("pls_tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            checkboxInput("pls_probe", "Perform PLS-DA at probe level", value = FALSE),#
            br(),#
            h4("Gene contribution plot"),#
            uiOutput("numGenesUI"),#
            radioButtons("pls_ncomp", "Select component for gene contribution plot", choices = c(1,2)),#
            br()#
            # downloadButton("pls_download", "Download gene contribution data")#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("PCA Analysis", plotOutput("indPlot", height = 800)),#
            tabPanel("Circle variance", plotOutput("varPlot", height = 800)),#
            tabPanel("Loadings plot", plotOutput("contribPlot", height = 800))#
        ),#
        position = c("right","left"),#
        fluid = TRUE#
        )#
        )#
    )#
)#
)
test()
ui <- fluidPage(#
tags$head(tags$script(HTML(jscode))),#
# tags$script(HTML("$('body').addClass('fixed);")),#
shinyjs::useShinyjs(),#
navbarPage("receptoR",#
    theme = shinytheme("spacelab"),#
#
# Start page  ------------------------------------------------------------------------------#
#
    tabPanel("Start here",#
       h3("Welcome to receptoR!"),#
       hr(),#
       sidebarLayout(#
           sidebarPanel(#
               h4("receptoR is an automated hypothesis generation software to identify cellular signaling pathways from transcriptomics data."),#
               p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky. Andouille t-bone biltong bacon beef ribs boudin frankfurter ham hock pork loin capicola tail ground round brisket tenderloin tri-tip. Ham pork bacon strip steak, ball tip leberkas meatball capicola pork loin. Ribeye turducken tri-tip jowl filet mignon drumstick shank corned beef prosciutto spare ribs sausage leberkas cupim burgdoggen bacon.",style="color:#D8BFD8"),#
               hr(),#
               p("(C) 2019 Derek Toms")),#
           mainPanel(#
               p("This software allows you to browse and analyze public transcriptomics data. To proceed, click \'Search for datasets\', above"),#
               img(src="overview.png"),#
               p("Spicy jalapeno bacon ipsum dolor amet brisket ribeye tri-tip tail meatloaf ground round salami fatback. Ball tip flank pork turkey prosciutto. Venison burgdoggen beef pork hamburger tongue shankle rump frankfurter kielbasa pastrami pork belly. T-bone fatback venison tenderloin salami biltong turkey chuck.",style="color:#D8BFD8"),#
#
p("Turkey tenderloin buffalo frankfurter, strip steak capicola filet mignon ribeye cow t-bone biltong. Tri-tip hamburger ham hock, shank landjaeger kielbasa pork loin spare ribs pastrami salami shoulder alcatra. Biltong tail brisket, turkey beef ribs hamburger prosciutto bacon tenderloin pancetta shank venison picanha cupim. Frankfurter porchetta turkey biltong corned beef, burgdoggen prosciutto jerky tail. Capicola beef ribs burgdoggen pancetta, frankfurter leberkas pig. Filet mignon jerky ground round cow burgdoggen, shoulder boudin ham hock pancetta.",style="color:#D8BFD8"),#
#
p("Sirloin salami strip steak burgdoggen pork chop ribeye, pastrami fatback short ribs corned beef. Beef shank shoulder, leberkas pancetta ground round jowl tenderloin ribeye hamburger shankle flank. Strip steak short loin kevin pork belly meatball swine sausage ham jowl pig tongue venison fatback t-bone beef. Spare ribs shoulder ham hock strip steak pastrami.",style="color:#D8BFD8")#
               ))#
        ),#
#
# Search for GSE  ------------------------------------------------------------------------------#
#
    tabPanel("Search for datasets",#
       h3("Organize publicly available expression data"),#
       hr(),#
       sidebarLayout(#
       sidebarPanel(#
           # style = "position:fixed;width:30%",#
           h4("Search for datasets"),#
           p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
           hr(),#
           conditionalPanel(condition="input.searchpanel==1",#
           h4("Find expression data from publicly available datasets to begin defining your own experiment."),#
           p("Begin by searching for ",span("G",style="font-weight:bold"),"EO data ",span("se",style="font-weight:bold"),"ries (GSE) containing expression data for your cell or tissue type of interest."),#
           radioButtons("gplSelection", "Choose species:", choices = c("Mouse (GPL1261)" = "mouse", "Human (GPL570)" = "human")),#
           tagAppendAttributes(textInput("Key", "Enter search terms, separated by commas", value = ""),`data-proxy-click` = "Search"),#
           actionButton("Search", "Search"),#
           hr(),#
           p("When you have selected the appropriate datasets, click \'Retrieve GSM\' to collect sample information and then click on the \'Assign samples\' tab above."),#
           actionButton("getGSM", "Retrieve GSM")),#
           conditionalPanel(condition="input.searchpanel==2",#
           h4("Define the categories that you wish to assign each sample (GSM) for comparison."),#
           splitLayout(cellWidths=c("90%","10%"), textInput("cat1", label=NULL, placeholder="Category 1"),tags$span(style="color:#E41A1C",icon("circle",class="fa-2x"))),#
           splitLayout(cellWidths=c("90%","10%"), textInput("cat2", label=NULL, placeholder="Category 2"),tags$span(style="color:#E41A1C",icon("circle",class="fa-2x"))),#
#            splitLayout(cellWidths=c("90%","10%"), textInput("cat3", label=NULL, placeholder="Category 3 (optional)"tags$span(style="color:#E41A1C",icon("circle",class="fa-3x"))),#
           ### https://www.aridhia.com/blog/the-sky-is-not-the-limit-embedding-raw-html-and-javascript-to-create-dynamic-ui-elements-in-shiny-applications/   #
           ### ^ this should help with dynamically adding/subtracting categories#
           hr(),#
           h4("Highlight samples, then click to Assign them to the specificed category."),#
           uiOutput("categorySelect"),#
           actionButton("Assign", "Assign GSM to Category")),#
           conditionalPanel(condition="input.searchpanel==3",#
               h4("Thank you for using receptoR!"),#
               p(" Please enter your name and any comments/bugs/questions/requests in the box below, then click the \'Download and Process\' button to retrieve the raw files from the NCBI server and process them based on their assigned categories."),#
               textAreaInput("comments","Comments",width="100%",height="100px",resize="vertical"),#
               textInput("downloadId","Download ID"),#
               actionButton("downloadCEL","Download and Process"))#
       ),#
       mainPanel(#
           # Search GSE based on species#
        tabsetPanel(#
        tabPanel("Search", value=1,#
            h4("GEO data series (\'GSE\') matching search query"), # return search here!#
            DT::dataTableOutput("filteredgse")#
        ),#
        # Assign samples to categories ------------------------------------------------------#
        tabPanel("Assign", value=2,#
            h4("From the selected series' (GSE) assign individual samples (GSM) to categories of your choosing."),#
            DT::dataTableOutput("gsm_table")#
        ),#
        # This will be where the CEL files are downloaded (confirmation, etc) ------------#
        tabPanel("Process", value=3,#
        h4("Please confirm samples are properly categorized."),#
        p("Expression samples annotated:"),#
                DT::dataTableOutput("finishedtable")#
        ),#
        id = "searchpanel"#
        )#
        )#
        )#
    ),#
    # Load Gene Expression Data tab -------------------------------------#
    tabPanel("Load expression data",#
        h3("Pick from user-defined experiments to perform analyses"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Load expression data"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            hr(),#
            selectInput(inputId="user_data",label="Select user data for analysis",choices=c("none"="none","Photoreceptors v RPE"="2018-04-13_app_data.rda"),selected="none"),#
            br(),#
            uiOutput("geneListsUI"),#
            br(),#
            uiOutput("geneUI")#
        ),#
        mainPanel(#
            tabsetPanel(type="tabs",selected="Gene-level expression",#
            tabPanel("Experimental design",h4("Category definitions and contrasts"),p("Coming soon!")),#
            tabPanel("Gene-level expression",#
                fluidRow(#
                column(6, h4("Average Expression"), DT::dataTableOutput("genes")),#
                column(6, h4("Gene Boxplot"), plotOutput("singleGenePlot"))#
            )))#
        )#
        )#
    ),#
    # Magnitude expression tab ------------------------------------------------------------------------------#
#
    tabPanel("Absolute expression",#
        h3("Compare genes based on absolute expression"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Absolute expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            # style = "position:fixed",#
            checkboxGroupInput("tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            br(),#
            checkboxInput("de_state", label = "Show differential expressed only", value = TRUE),#
            uiOutput("de_choices"),#
            br(),#
            conditionalPanel(condition="input.absexpanel==1",#
                h3("Heatmap parameters"),#
                checkboxInput("hm_probes", "Show probe-level", value = FALSE),#
                checkboxInput("hm_gsm", "Show GSM (column names)", value = TRUE),#
                checkboxInput("hm_rownames", "Show rownames", value = TRUE),#
                checkboxInput("hm_col_cluster", "Cluster columns", value = TRUE),#
                checkboxInput("hm_row_cluster", "Cluster rows", value = TRUE),#
                h4("Select plot dimensions (px)"),#
                numericInput("hm_width", "Width", value = 900, min = 100, max = 2400, step = 10),#
                numericInput("hm_height", "Height", value = 1200, min = 100, max = 2400, step = 10))#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("Heatmap", value=1, uiOutput("heatmap_ui")),#
            tabPanel("Summary boxplots", plotOutput("overallPlot", height = 600)),#
            tabPanel("By-gene boxplots", plotOutput("byGenePlot", height = 600)),#
            id = "absexpanel"#
        )#
        )#
        )#
    ),#
#
    # Mixomics tab ---------------------------------------------#
    tabPanel("Relative expression",#
        h3("Compare genes based on relative expression between experimental groups"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Relative expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            checkboxGroupInput("pls_tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            checkboxInput("pls_probe", "Perform PLS-DA at probe level", value = FALSE),#
            br(),#
            h4("Gene contribution plot"),#
            uiOutput("numGenesUI"),#
            radioButtons("pls_ncomp", "Select component for gene contribution plot", choices = c(1,2)),#
            br()#
            # downloadButton("pls_download", "Download gene contribution data")#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("PCA Analysis", plotOutput("indPlot", height = 800)),#
            tabPanel("Circle variance", plotOutput("varPlot", height = 800)),#
            tabPanel("Loadings plot", plotOutput("contribPlot", height = 800))#
        ),#
        position = c("right","left"),#
        fluid = TRUE#
        )#
        )#
    )#
)#
)
test()
catCol2[2]
catCol2[3]
ui <- fluidPage(#
tags$head(tags$script(HTML(jscode))),#
# tags$script(HTML("$('body').addClass('fixed);")),#
shinyjs::useShinyjs(),#
navbarPage("receptoR",#
    theme = shinytheme("spacelab"),#
#
# Start page  ------------------------------------------------------------------------------#
#
    tabPanel("Start here",#
       h3("Welcome to receptoR!"),#
       hr(),#
       sidebarLayout(#
           sidebarPanel(#
               h4("receptoR is an automated hypothesis generation software to identify cellular signaling pathways from transcriptomics data."),#
               p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky. Andouille t-bone biltong bacon beef ribs boudin frankfurter ham hock pork loin capicola tail ground round brisket tenderloin tri-tip. Ham pork bacon strip steak, ball tip leberkas meatball capicola pork loin. Ribeye turducken tri-tip jowl filet mignon drumstick shank corned beef prosciutto spare ribs sausage leberkas cupim burgdoggen bacon.",style="color:#D8BFD8"),#
               hr(),#
               p("(C) 2019 Derek Toms")),#
           mainPanel(#
               p("This software allows you to browse and analyze public transcriptomics data. To proceed, click \'Search for datasets\', above"),#
               img(src="overview.png"),#
               p("Spicy jalapeno bacon ipsum dolor amet brisket ribeye tri-tip tail meatloaf ground round salami fatback. Ball tip flank pork turkey prosciutto. Venison burgdoggen beef pork hamburger tongue shankle rump frankfurter kielbasa pastrami pork belly. T-bone fatback venison tenderloin salami biltong turkey chuck.",style="color:#D8BFD8"),#
#
p("Turkey tenderloin buffalo frankfurter, strip steak capicola filet mignon ribeye cow t-bone biltong. Tri-tip hamburger ham hock, shank landjaeger kielbasa pork loin spare ribs pastrami salami shoulder alcatra. Biltong tail brisket, turkey beef ribs hamburger prosciutto bacon tenderloin pancetta shank venison picanha cupim. Frankfurter porchetta turkey biltong corned beef, burgdoggen prosciutto jerky tail. Capicola beef ribs burgdoggen pancetta, frankfurter leberkas pig. Filet mignon jerky ground round cow burgdoggen, shoulder boudin ham hock pancetta.",style="color:#D8BFD8"),#
#
p("Sirloin salami strip steak burgdoggen pork chop ribeye, pastrami fatback short ribs corned beef. Beef shank shoulder, leberkas pancetta ground round jowl tenderloin ribeye hamburger shankle flank. Strip steak short loin kevin pork belly meatball swine sausage ham jowl pig tongue venison fatback t-bone beef. Spare ribs shoulder ham hock strip steak pastrami.",style="color:#D8BFD8")#
               ))#
        ),#
#
# Search for GSE  ------------------------------------------------------------------------------#
#
    tabPanel("Search for datasets",#
       h3("Organize publicly available expression data"),#
       hr(),#
       sidebarLayout(#
       sidebarPanel(#
           # style = "position:fixed;width:30%",#
           h4("Search for datasets"),#
           p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
           hr(),#
           conditionalPanel(condition="input.searchpanel==1",#
           h4("Find expression data from publicly available datasets to begin defining your own experiment."),#
           p("Begin by searching for ",span("G",style="font-weight:bold"),"EO data ",span("se",style="font-weight:bold"),"ries (GSE) containing expression data for your cell or tissue type of interest."),#
           radioButtons("gplSelection", "Choose species:", choices = c("Mouse (GPL1261)" = "mouse", "Human (GPL570)" = "human")),#
           tagAppendAttributes(textInput("Key", "Enter search terms, separated by commas", value = ""),`data-proxy-click` = "Search"),#
           actionButton("Search", "Search"),#
           hr(),#
           p("When you have selected the appropriate datasets, click \'Retrieve GSM\' to collect sample information and then click on the \'Assign samples\' tab above."),#
           actionButton("getGSM", "Retrieve GSM")),#
           conditionalPanel(condition="input.searchpanel==2",#
           h4("Define the categories that you wish to assign each sample (GSM) for comparison."),#
           splitLayout(cellWidths=c("90%","10%"), textInput("cat1", label=NULL, placeholder="Category 1"),tags$span(style="color:#E41A1C",icon("circle",class="fa-2x"))),#
           splitLayout(cellWidths=c("90%","10%"), textInput("cat2", label=NULL, placeholder="Category 2"),tags$span(style="color:#377EB8",icon("circle",class="fa-2x"))),#
           splitLayout(cellWidths=c("90%","10%"), textInput("cat3", label=NULL, placeholder="Category 3 (optional)"),tags$span(style="color:#4DAF4A",icon("circle",class="fa-3x"))),#
           ### https://www.aridhia.com/blog/the-sky-is-not-the-limit-embedding-raw-html-and-javascript-to-create-dynamic-ui-elements-in-shiny-applications/   #
           ### ^ this should help with dynamically adding/subtracting categories#
           hr(),#
           h4("Highlight samples, then click to Assign them to the specificed category."),#
           uiOutput("categorySelect"),#
           actionButton("Assign", "Assign GSM to Category")),#
           conditionalPanel(condition="input.searchpanel==3",#
               h4("Thank you for using receptoR!"),#
               p(" Please enter your name and any comments/bugs/questions/requests in the box below, then click the \'Download and Process\' button to retrieve the raw files from the NCBI server and process them based on their assigned categories."),#
               textAreaInput("comments","Comments",width="100%",height="100px",resize="vertical"),#
               textInput("downloadId","Download ID"),#
               actionButton("downloadCEL","Download and Process"))#
       ),#
       mainPanel(#
           # Search GSE based on species#
        tabsetPanel(#
        tabPanel("Search", value=1,#
            h4("GEO data series (\'GSE\') matching search query"), # return search here!#
            DT::dataTableOutput("filteredgse")#
        ),#
        # Assign samples to categories ------------------------------------------------------#
        tabPanel("Assign", value=2,#
            h4("From the selected series' (GSE) assign individual samples (GSM) to categories of your choosing."),#
            DT::dataTableOutput("gsm_table")#
        ),#
        # This will be where the CEL files are downloaded (confirmation, etc) ------------#
        tabPanel("Process", value=3,#
        h4("Please confirm samples are properly categorized."),#
        p("Expression samples annotated:"),#
                DT::dataTableOutput("finishedtable")#
        ),#
        id = "searchpanel"#
        )#
        )#
        )#
    ),#
    # Load Gene Expression Data tab -------------------------------------#
    tabPanel("Load expression data",#
        h3("Pick from user-defined experiments to perform analyses"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Load expression data"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            hr(),#
            selectInput(inputId="user_data",label="Select user data for analysis",choices=c("none"="none","Photoreceptors v RPE"="2018-04-13_app_data.rda"),selected="none"),#
            br(),#
            uiOutput("geneListsUI"),#
            br(),#
            uiOutput("geneUI")#
        ),#
        mainPanel(#
            tabsetPanel(type="tabs",selected="Gene-level expression",#
            tabPanel("Experimental design",h4("Category definitions and contrasts"),p("Coming soon!")),#
            tabPanel("Gene-level expression",#
                fluidRow(#
                column(6, h4("Average Expression"), DT::dataTableOutput("genes")),#
                column(6, h4("Gene Boxplot"), plotOutput("singleGenePlot"))#
            )))#
        )#
        )#
    ),#
    # Magnitude expression tab ------------------------------------------------------------------------------#
#
    tabPanel("Absolute expression",#
        h3("Compare genes based on absolute expression"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Absolute expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            # style = "position:fixed",#
            checkboxGroupInput("tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            br(),#
            checkboxInput("de_state", label = "Show differential expressed only", value = TRUE),#
            uiOutput("de_choices"),#
            br(),#
            conditionalPanel(condition="input.absexpanel==1",#
                h3("Heatmap parameters"),#
                checkboxInput("hm_probes", "Show probe-level", value = FALSE),#
                checkboxInput("hm_gsm", "Show GSM (column names)", value = TRUE),#
                checkboxInput("hm_rownames", "Show rownames", value = TRUE),#
                checkboxInput("hm_col_cluster", "Cluster columns", value = TRUE),#
                checkboxInput("hm_row_cluster", "Cluster rows", value = TRUE),#
                h4("Select plot dimensions (px)"),#
                numericInput("hm_width", "Width", value = 900, min = 100, max = 2400, step = 10),#
                numericInput("hm_height", "Height", value = 1200, min = 100, max = 2400, step = 10))#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("Heatmap", value=1, uiOutput("heatmap_ui")),#
            tabPanel("Summary boxplots", plotOutput("overallPlot", height = 600)),#
            tabPanel("By-gene boxplots", plotOutput("byGenePlot", height = 600)),#
            id = "absexpanel"#
        )#
        )#
        )#
    ),#
#
    # Mixomics tab ---------------------------------------------#
    tabPanel("Relative expression",#
        h3("Compare genes based on relative expression between experimental groups"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Relative expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            checkboxGroupInput("pls_tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            checkboxInput("pls_probe", "Perform PLS-DA at probe level", value = FALSE),#
            br(),#
            h4("Gene contribution plot"),#
            uiOutput("numGenesUI"),#
            radioButtons("pls_ncomp", "Select component for gene contribution plot", choices = c(1,2)),#
            br()#
            # downloadButton("pls_download", "Download gene contribution data")#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("PCA Analysis", plotOutput("indPlot", height = 800)),#
            tabPanel("Circle variance", plotOutput("varPlot", height = 800)),#
            tabPanel("Loadings plot", plotOutput("contribPlot", height = 800))#
        ),#
        position = c("right","left"),#
        fluid = TRUE#
        )#
        )#
    )#
)#
)
test()
test()
ui <- fluidPage(#
tags$head(tags$script(HTML(jscode))),#
# tags$script(HTML("$('body').addClass('fixed);")),#
shinyjs::useShinyjs(),#
navbarPage("receptoR",#
    theme = shinytheme("spacelab"),#
#
# Start page  ------------------------------------------------------------------------------#
#
    tabPanel("Start here",#
       h3("Welcome to receptoR!"),#
       hr(),#
       sidebarLayout(#
           sidebarPanel(#
               h4("receptoR is an automated hypothesis generation software to identify cellular signaling pathways from transcriptomics data."),#
               p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky. Andouille t-bone biltong bacon beef ribs boudin frankfurter ham hock pork loin capicola tail ground round brisket tenderloin tri-tip. Ham pork bacon strip steak, ball tip leberkas meatball capicola pork loin. Ribeye turducken tri-tip jowl filet mignon drumstick shank corned beef prosciutto spare ribs sausage leberkas cupim burgdoggen bacon.",style="color:#D8BFD8"),#
               hr(),#
               p("(C) 2019 Derek Toms")),#
           mainPanel(#
               p("This software allows you to browse and analyze public transcriptomics data. To proceed, click \'Search for datasets\', above"),#
               img(src="overview.png"),#
               p("Spicy jalapeno bacon ipsum dolor amet brisket ribeye tri-tip tail meatloaf ground round salami fatback. Ball tip flank pork turkey prosciutto. Venison burgdoggen beef pork hamburger tongue shankle rump frankfurter kielbasa pastrami pork belly. T-bone fatback venison tenderloin salami biltong turkey chuck.",style="color:#D8BFD8"),#
#
p("Turkey tenderloin buffalo frankfurter, strip steak capicola filet mignon ribeye cow t-bone biltong. Tri-tip hamburger ham hock, shank landjaeger kielbasa pork loin spare ribs pastrami salami shoulder alcatra. Biltong tail brisket, turkey beef ribs hamburger prosciutto bacon tenderloin pancetta shank venison picanha cupim. Frankfurter porchetta turkey biltong corned beef, burgdoggen prosciutto jerky tail. Capicola beef ribs burgdoggen pancetta, frankfurter leberkas pig. Filet mignon jerky ground round cow burgdoggen, shoulder boudin ham hock pancetta.",style="color:#D8BFD8"),#
#
p("Sirloin salami strip steak burgdoggen pork chop ribeye, pastrami fatback short ribs corned beef. Beef shank shoulder, leberkas pancetta ground round jowl tenderloin ribeye hamburger shankle flank. Strip steak short loin kevin pork belly meatball swine sausage ham jowl pig tongue venison fatback t-bone beef. Spare ribs shoulder ham hock strip steak pastrami.",style="color:#D8BFD8")#
               ))#
        ),#
#
# Search for GSE  ------------------------------------------------------------------------------#
#
    tabPanel("Search for datasets",#
       h3("Organize publicly available expression data"),#
       hr(),#
       sidebarLayout(#
       sidebarPanel(#
           # style = "position:fixed;width:30%",#
           h4("Search for datasets"),#
           p("Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle.",style="color:#D8BFD8"),#
           hr(),#
           conditionalPanel(condition="input.searchpanel==1",#
           h4("Find expression data from publicly available datasets to begin defining your own experiment."),#
           p("Begin by searching for ",span("G",style="font-weight:bold"),"EO data ",span("se",style="font-weight:bold"),"ries (GSE) containing expression data for your cell or tissue type of interest."),#
           radioButtons("gplSelection", "Choose species:", choices = c("Mouse (GPL1261)" = "mouse", "Human (GPL570)" = "human")),#
           tagAppendAttributes(textInput("Key", "Enter search terms, separated by commas", value = ""),`data-proxy-click` = "Search"),#
           actionButton("Search", "Search"),#
           hr(),#
           p("When you have selected the appropriate datasets, click \'Retrieve GSM\' to collect sample information and then click on the \'Assign samples\' tab above."),#
           actionButton("getGSM", "Retrieve GSM")),#
           conditionalPanel(condition="input.searchpanel==2",#
           h4("Define the categories that you wish to assign each sample (GSM) for comparison."),#
           splitLayout(cellWidths=c("90%","10%"), textInput("cat1", label=NULL, placeholder="Category 1"),tags$span(style="color:#E41A1C",icon("circle",class="fa-2x"))),#
           splitLayout(cellWidths=c("90%","10%"), textInput("cat2", label=NULL, placeholder="Category 2"),tags$span(style="color:#377EB8",icon("circle",class="fa-2x"))),#
           splitLayout(cellWidths=c("90%","10%"), textInput("cat3", label=NULL, placeholder="Category 3 (optional)"),tags$span(style="color:#4DAF4A",icon("circle",class="fa-2x"))),#
           ### https://www.aridhia.com/blog/the-sky-is-not-the-limit-embedding-raw-html-and-javascript-to-create-dynamic-ui-elements-in-shiny-applications/   #
           ### ^ this should help with dynamically adding/subtracting categories#
           hr(),#
           h4("Highlight samples, then click to Assign them to the specificed category."),#
           uiOutput("categorySelect"),#
           actionButton("Assign", "Assign GSM to Category")),#
           conditionalPanel(condition="input.searchpanel==3",#
               h4("Thank you for using receptoR!"),#
               p(" Please enter your name and any comments/bugs/questions/requests in the box below, then click the \'Download and Process\' button to retrieve the raw files from the NCBI server and process them based on their assigned categories."),#
               textAreaInput("comments","Comments",width="100%",height="100px",resize="vertical"),#
               textInput("downloadId","Download ID"),#
               actionButton("downloadCEL","Download and Process"))#
       ),#
       mainPanel(#
           # Search GSE based on species#
        tabsetPanel(#
        tabPanel("Search", value=1,#
            h4("GEO data series (\'GSE\') matching search query"), # return search here!#
            DT::dataTableOutput("filteredgse")#
        ),#
        # Assign samples to categories ------------------------------------------------------#
        tabPanel("Assign", value=2,#
            h4("From the selected series' (GSE) assign individual samples (GSM) to categories of your choosing."),#
            DT::dataTableOutput("gsm_table")#
        ),#
        # This will be where the CEL files are downloaded (confirmation, etc) ------------#
        tabPanel("Process", value=3,#
        h4("Please confirm samples are properly categorized."),#
        p("Expression samples annotated:"),#
                DT::dataTableOutput("finishedtable")#
        ),#
        id = "searchpanel"#
        )#
        )#
        )#
    ),#
    # Load Gene Expression Data tab -------------------------------------#
    tabPanel("Load expression data",#
        h3("Pick from user-defined experiments to perform analyses"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Load expression data"),#
            p("Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            hr(),#
            selectInput(inputId="user_data",label="Select user data for analysis",choices=c("none"="none","Photoreceptors v RPE"="2018-04-13_app_data.rda"),selected="none"),#
            br(),#
            uiOutput("geneListsUI"),#
            br(),#
            uiOutput("geneUI")#
        ),#
        mainPanel(#
            tabsetPanel(type="tabs",selected="Gene-level expression",#
            tabPanel("Experimental design",h4("Category definitions and contrasts"),p("Coming soon!")),#
            tabPanel("Gene-level expression",#
                fluidRow(#
                column(6, h4("Average Expression"), DT::dataTableOutput("genes")),#
                column(6, h4("Gene Boxplot"), plotOutput("singleGenePlot"))#
            )))#
        )#
        )#
    ),#
    # Magnitude expression tab ------------------------------------------------------------------------------#
#
    tabPanel("Absolute expression",#
        h3("Compare genes based on absolute expression"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Absolute expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            # style = "position:fixed",#
            checkboxGroupInput("tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            br(),#
            checkboxInput("de_state", label = "Show differential expressed only", value = TRUE),#
            uiOutput("de_choices"),#
            br(),#
            conditionalPanel(condition="input.absexpanel==1",#
                h3("Heatmap parameters"),#
                checkboxInput("hm_probes", "Show probe-level", value = FALSE),#
                checkboxInput("hm_gsm", "Show GSM (column names)", value = TRUE),#
                checkboxInput("hm_rownames", "Show rownames", value = TRUE),#
                checkboxInput("hm_col_cluster", "Cluster columns", value = TRUE),#
                checkboxInput("hm_row_cluster", "Cluster rows", value = TRUE),#
                h4("Select plot dimensions (px)"),#
                numericInput("hm_width", "Width", value = 900, min = 100, max = 2400, step = 10),#
                numericInput("hm_height", "Height", value = 1200, min = 100, max = 2400, step = 10))#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("Heatmap", value=1, uiOutput("heatmap_ui")),#
            tabPanel("Summary boxplots", plotOutput("overallPlot", height = 600)),#
            tabPanel("By-gene boxplots", plotOutput("byGenePlot", height = 600)),#
            id = "absexpanel"#
        )#
        )#
        )#
    ),#
#
    # Mixomics tab ---------------------------------------------#
    tabPanel("Relative expression",#
        h3("Compare genes based on relative expression between experimental groups"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Relative expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            checkboxGroupInput("pls_tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            checkboxInput("pls_probe", "Perform PLS-DA at probe level", value = FALSE),#
            br(),#
            h4("Gene contribution plot"),#
            uiOutput("numGenesUI"),#
            radioButtons("pls_ncomp", "Select component for gene contribution plot", choices = c(1,2)),#
            br()#
            # downloadButton("pls_download", "Download gene contribution data")#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("PCA Analysis", plotOutput("indPlot", height = 800)),#
            tabPanel("Circle variance", plotOutput("varPlot", height = 800)),#
            tabPanel("Loadings plot", plotOutput("contribPlot", height = 800))#
        ),#
        position = c("right","left"),#
        fluid = TRUE#
        )#
        )#
    )#
)#
)
test()
test()
ui <- fluidPage(#
tags$head(tags$script(HTML(jscode))),#
# tags$script(HTML("$('body').addClass('fixed);")),#
shinyjs::useShinyjs(),#
navbarPage("receptoR",#
    theme = shinytheme("spacelab"),#
#
# Start page  ------------------------------------------------------------------------------#
#
    tabPanel("Start here",#
       h3("Welcome to receptoR!"),#
       hr(),#
       sidebarLayout(#
           sidebarPanel(#
               h4("An automated hypothesis generation software to identify cellular signaling pathways from transcriptomics data"),#
               p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky. Andouille t-bone biltong bacon beef ribs boudin frankfurter ham hock pork loin capicola tail ground round brisket tenderloin tri-tip. Ham pork bacon strip steak, ball tip leberkas meatball capicola pork loin. Ribeye turducken tri-tip jowl filet mignon drumstick shank corned beef prosciutto spare ribs sausage leberkas cupim burgdoggen bacon.",style="color:#D8BFD8"),#
               hr(),#
               p("(C) 2019 Derek Toms\nLicense")),#
           mainPanel(#
               p("This software allows you to browse and analyze public transcriptomics data. To proceed, click \'Search for datasets\', above"),#
               img(src="overview.png"),#
               p("Spicy jalapeno bacon ipsum dolor amet brisket ribeye tri-tip tail meatloaf ground round salami fatback. Ball tip flank pork turkey prosciutto. Venison burgdoggen beef pork hamburger tongue shankle rump frankfurter kielbasa pastrami pork belly. T-bone fatback venison tenderloin salami biltong turkey chuck.",style="color:#D8BFD8"),#
#
p("Turkey tenderloin buffalo frankfurter, strip steak capicola filet mignon ribeye cow t-bone biltong. Tri-tip hamburger ham hock, shank landjaeger kielbasa pork loin spare ribs pastrami salami shoulder alcatra. Biltong tail brisket, turkey beef ribs hamburger prosciutto bacon tenderloin pancetta shank venison picanha cupim. Frankfurter porchetta turkey biltong corned beef, burgdoggen prosciutto jerky tail. Capicola beef ribs burgdoggen pancetta, frankfurter leberkas pig. Filet mignon jerky ground round cow burgdoggen, shoulder boudin ham hock pancetta.",style="color:#D8BFD8"),#
#
p("Sirloin salami strip steak burgdoggen pork chop ribeye, pastrami fatback short ribs corned beef. Beef shank shoulder, leberkas pancetta ground round jowl tenderloin ribeye hamburger shankle flank. Strip steak short loin kevin pork belly meatball swine sausage ham jowl pig tongue venison fatback t-bone beef. Spare ribs shoulder ham hock strip steak pastrami.",style="color:#D8BFD8")#
               ))#
        ),#
#
# Search for GSE  ------------------------------------------------------------------------------#
#
    tabPanel("Search for datasets",#
       h3("Organize publicly available expression data"),#
       hr(),#
       sidebarLayout(#
       sidebarPanel(#
           # style = "position:fixed;width:30%",#
           conditionalPanel(condition="input.searchpanel==1",#
           h4("Find expression data from publicly available datasets to begin defining your own experiment."),#
           p("Begin by searching for ",span("G",style="font-weight:bold"),"EO data ",span("se",style="font-weight:bold"),"ries (GSE) containing expression data for your cell or tissue type of interest."),#
           radioButtons("gplSelection", "Choose species:", choices = c("Mouse (GPL1261)" = "mouse", "Human (GPL570)" = "human")),#
           tagAppendAttributes(textInput("Key", "Enter search terms, separated by commas", value = ""),`data-proxy-click` = "Search"),#
           actionButton("Search", "Search"),#
           hr(),#
           p("When you have selected the appropriate datasets, click \'Retrieve GSM\' to collect sample information and then click on the \'Assign samples\' tab above."),#
           actionButton("getGSM", "Retrieve GSM")),#
           conditionalPanel(condition="input.searchpanel==2",#
           h4("Define the categories that you wish to assign each sample (GSM) for comparison."),#
           splitLayout(cellWidths=c("90%","10%"), textInput("cat1", label=NULL, placeholder="Category 1"),tags$span(style="color:#E41A1C",icon("circle",class="fa-2x"))),#
           splitLayout(cellWidths=c("90%","10%"), textInput("cat2", label=NULL, placeholder="Category 2"),tags$span(style="color:#377EB8",icon("circle",class="fa-2x"))),#
           splitLayout(cellWidths=c("90%","10%"), textInput("cat3", label=NULL, placeholder="Category 3 (optional)"),tags$span(style="color:#4DAF4A",icon("circle",class="fa-2x"))),#
           ### https://www.aridhia.com/blog/the-sky-is-not-the-limit-embedding-raw-html-and-javascript-to-create-dynamic-ui-elements-in-shiny-applications/   #
           ### ^ this should help with dynamically adding/subtracting categories#
           hr(),#
           h4("Highlight samples, then click to Assign them to the specificed category."),#
           uiOutput("categorySelect"),#
           actionButton("Assign", "Assign GSM to Category")),#
           conditionalPanel(condition="input.searchpanel==3",#
               h4("Thank you for using receptoR!"),#
               p(" Please enter your name and any comments/bugs/questions/requests in the box below, then click the \'Download and Process\' button to retrieve the raw files from the NCBI server and process them based on their assigned categories."),#
               textAreaInput("comments","Comments",width="100%",height="100px",resize="vertical"),#
               textInput("downloadId","Download ID"),#
               actionButton("downloadCEL","Download and Process")),#
               hr(),#
               # Help banner on the bottom -------------------------#
               h4("Help me!"),#
               p("Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle.",style="color:#D8BFD8")#
       ),#
       mainPanel(#
           # Search GSE based on species#
        tabsetPanel(#
        tabPanel("Search", value=1,#
            h4("GEO data series (\'GSE\') matching search query"), # return search here!#
            DT::dataTableOutput("filteredgse")#
        ),#
        # Assign samples to categories ------------------------------------------------------#
        tabPanel("Assign", value=2,#
            h4("From the selected series' (GSE) assign individual samples (GSM) to categories of your choosing."),#
            DT::dataTableOutput("gsm_table")#
        ),#
        # This will be where the CEL files are downloaded (confirmation, etc) ------------#
        tabPanel("Process", value=3,#
        h4("Please confirm samples are properly categorized."),#
        p("Expression samples annotated:"),#
                DT::dataTableOutput("finishedtable")#
        ),#
        id = "searchpanel"#
        )#
        )#
        )#
    ),#
    # Load Gene Expression Data tab -------------------------------------#
    tabPanel("Load expression data",#
        h3("Pick from user-defined experiments to perform analyses"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            selectInput(inputId="user_data",label="Select user data for analysis",choices=c("none"="none","Photoreceptors v RPE"="2018-04-13_app_data.rda"),selected="none"),#
            br(),#
            uiOutput("geneListsUI"),#
            br(),#
            uiOutput("geneUI"),#
            h4("Load expression data"),#
            p("Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8")#
        ),#
        mainPanel(#
            tabsetPanel(type="tabs",selected="Gene-level expression",#
            tabPanel("Experimental design",h4("Category definitions and contrasts"),p("Coming soon!")),#
            tabPanel("Gene-level expression",#
                fluidRow(#
                column(6, h4("Average Expression"), DT::dataTableOutput("genes")),#
                column(6, h4("Gene Boxplot"), plotOutput("singleGenePlot"))#
            )))#
        )#
        )#
    ),#
    # Magnitude expression tab ------------------------------------------------------------------------------#
#
    tabPanel("Absolute expression",#
        h3("Compare genes based on absolute expression"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            # style = "position:fixed",#
            checkboxGroupInput("tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            br(),#
            checkboxInput("de_state", label = "Show differential expressed only", value = TRUE),#
            uiOutput("de_choices"),#
            br(),#
            conditionalPanel(condition="input.absexpanel==1",#
                h3("Heatmap parameters"),#
                checkboxInput("hm_probes", "Show probe-level", value = FALSE),#
                checkboxInput("hm_gsm", "Show GSM (column names)", value = TRUE),#
                checkboxInput("hm_rownames", "Show rownames", value = TRUE),#
                checkboxInput("hm_col_cluster", "Cluster columns", value = TRUE),#
                checkboxInput("hm_row_cluster", "Cluster rows", value = TRUE),#
                h4("Select plot dimensions (px)"),#
                numericInput("hm_width", "Width", value = 900, min = 100, max = 2400, step = 10),#
                numericInput("hm_height", "Height", value = 1200, min = 100, max = 2400, step = 10)),#
                h4("Absolute expression"),#
                p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8")#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("Heatmap", value=1, uiOutput("heatmap_ui")),#
            tabPanel("Summary boxplots", plotOutput("overallPlot", height = 600)),#
            tabPanel("By-gene boxplots", plotOutput("byGenePlot", height = 600)),#
            id = "absexpanel"#
        )#
        )#
        )#
    ),#
#
    # Mixomics tab ---------------------------------------------#
    tabPanel("Relative expression",#
        h3("Compare genes based on relative expression between experimental groups"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Relative expression"),#
            p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            checkboxGroupInput("pls_tissues", label = "Select tissues to inclued",#
            choices = c("photoreceptors","RPE","whole.retina"), selected = c("photoreceptors","RPE","whole.retina")#
            ),#
            checkboxInput("pls_probe", "Perform PLS-DA at probe level", value = FALSE),#
            br(),#
            h4("Gene contribution plot"),#
            uiOutput("numGenesUI"),#
            radioButtons("pls_ncomp", "Select component for gene contribution plot", choices = c(1,2)),#
            br()#
            # downloadButton("pls_download", "Download gene contribution data")#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("PCA Analysis", plotOutput("indPlot", height = 800)),#
            tabPanel("Circle variance", plotOutput("varPlot", height = 800)),#
            tabPanel("Loadings plot", plotOutput("contribPlot", height = 800))#
        ),#
        position = c("right","left"),#
        fluid = TRUE#
        )#
        )#
    )#
)#
)
test()
runApp(appDir="~/Desktop/shiny-server/receptoR_final")
runApp(appDir="~/Desktop/shiny-server/receptoR_final")
runApp(appDir="~/Desktop/shiny-server/receptoR_final")
runApp(appDir="~/Desktop/shiny-server/receptoR_final")
runApp(appDir="~/Desktop/shiny-server/receptoR_final")
runApp(appDir="~/Desktop/shiny-server/receptoR_final")
tags$ol(tags$li("item 1"))
tags$ol(tags$li("item 1"),tags$li("item2"))
runApp(appDir="~/Desktop/shiny-server/receptoR_final")
runApp(appDir="~/Desktop/shiny-server/receptoR_final")
runApp(appDir="~/Desktop/shiny-server/receptoR_final")
runApp(appDir="~/Desktop/shiny-server/receptoR_final")
test<-function(){runApp(appDir="~/Desktop/shiny-server/receptoR_final")}
test()
test()
test()
test()
p("Begin by searching for ",span("G",style="font-weight:bold"),"EO data ",span("se",style="font-weight:bold"),"ries (GSE) containing expression data for your cell or tissue type of interest.")
p(sep="")
p("Begin by searching for span(\"G\",style=\"font-weight:bold\"),"EO data")
p("Begin by searching for ",span("G",style="font-weight:bold"),"EO data ",span("se",style="font-weight:bold"),"ries (G",tags$em("S"),"E) containing expression data for your cell or tissue type of interest.")
test()
test()
HTML(paste("Begin by searching for ",span("G",style="font-weight:bold"),"EO data ",span("se",style="font-weight:bold"),"ries (G",tags$em("S"),"E) containing expression data for your cell or tissue type of interest."))
test()
test()
output$QC = renderImage({#
  # output$singleGenePlot = renderTable({#
    validate(#
      need(!is.null(eset),"No dataset selected")#
    )#
    src = "array-processing.png"#
  })
renderImage({#
  # output$singleGenePlot = renderTable({#
    validate(#
      need(!is.null(eset),"No dataset selected")#
    )#
    src = "array-processing.png"#
  })
test()
test()
test()
test()
test()
test()
test()
renderImage()
tags$img("array-processing.png")
tags$img("array-processing.png",width="100%")
test()
test()
test()
test()
test()
test()
tags$img("RNA-deg.png")
tags$img("array-processing.png",width="100%")
tags$img(src="array-processing.png",width="100%")
test()
test()
