q
q()
library(ggplot2bdc)#
library(ggplot2)#
library(dplyr)#
library(grDevices)
morph<-read.csv("~/Dropbox/Hepatocyte organoids/2019-04-11 Round 2_DSD28-morphology.csv")#
platemap<-mutate(morph,row=as.numeric(match(toupper(substr(well,1,1)), LETTERS)),col=as.numeric(substr(well,2,5)))
ggplot(data=platemap,aes(x=col,y=row))+geom_point(aes(),colour="grey50",size=24,shape=22)+scale_y_reverse(breaks=seq(1, 8), labels=LETTERS[1:8],limits=c(8.3,0.7))+scale_x_continuous(breaks=seq(1, 12),limits=c(0.7,12.3))
ggplot(data=platemap,aes(x=col,y=row))+geom_point(aes(colour=score),size=24,shape=15)+scale_y_reverse(breaks=seq(1, 8), labels=LETTERS[1:8],limits=c(8.3,0.7))+scale_x_continuous(breaks=seq(1, 12),limits=c(0.7,12.3))+labs(title="Hepatic organoid morphology score (d19 100-cell aggregates, high activin, 2D, pHEMA)",colour="morph.\nscore")+scale_colour_gradient(low=brewer.pal(5,"YlOrRd")[1],high=brewer.pal(5,"YlOrRd")[5])
library(RColorBrewer)
ggplot(data=platemap,aes(x=col,y=row))+geom_point(aes(colour=score),size=24,shape=15)+scale_y_reverse(breaks=seq(1, 8), labels=LETTERS[1:8],limits=c(8.3,0.7))+scale_x_continuous(breaks=seq(1, 12),limits=c(0.7,12.3))+labs(title="Hepatic organoid morphology score (d19 100-cell aggregates, high activin, 2D, pHEMA)",colour="morph.\nscore")+scale_colour_gradient(low=brewer.pal(5,"YlOrRd")[1],high=brewer.pal(5,"YlOrRd")[5])
ml<-c("photoreceptor samples", "whole retina", "retinal pigment epithelium")
make.names(ml)
data.frame(array=c(22,34,28,23,30,12),tissue=c(ml[1],ml[1],ml[3],ml[2],ml[2],ml[3]))
df<-data.frame(array=c(22,34,28,23,30,12),tissue=c(ml[1],ml[1],ml[3],ml[2],ml[2],ml[3]))
factor(tissue)
factor(df$tissue)
levels(df$tissue)
levels(df$tissue)<-make.names(levels(df$tissue))
df
library(dplyr)#
library(tidyr)#
library(ggplot2)#
library(reshape2)#
library(RColorBrewer)#
library(readr)#
library(stringr)#
library(shiny)#
library(shinythemes)#
library(shinyjs)#
library(dbplyr)#
library(DT)#
#
# Bioinformatics packages installed via biocLite:#
#source("https://bioconductor.org/biocLite.R")#
#biocLite(c('limma','annotate','genefilter','ComplexHeatmap','pheatmap','cowplot','GEOmetadb','mouse4302.db','hgu133plus2.db'))#
#biocLite(c('mixOmics','MergeMaid','GEOquery','inSilicoMerging','affy','sva','Rtsne','metaArray','testthat'))#
#
library(GEOmetadb)#
library(GEOquery)#
library(affy)#
#
library(limma)#
library(annotate)#
library(pheatmap)#
library(mixOmics)#
library(cowplot)#
#
library(pool)#
library(writexl)#
#
## 2018-12-02 not currently needed:#
    # library(genefilter)#
   #  library(ComplexHeatmap)#
   ##
   #  library(MergeMaid)#
   #  library(testthat)#
   #  library(metaArray)#
   #  library(Rtsne)#
   #  library(sva)#
#
# Microarray platform annotations:#
library(mouse4302.db)#
library(hgu133plus2.db)#
library(hgu133plus2cdf) # 2019-04-14 required#
library(mouse4302cdf)
poolGEO <- dbPool(#
  drv = RSQLite::SQLite(),#
  dbname = "/Volumes/ULTRA/across_array/GEOmetadb.sqlite"#
)
setwd('/Users/derektoms/Desktop/shiny-server/receptoR_final')
server <- function(input, output, session) {#
#
# Set up colour environment#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  catCol <- brewer.pal(3, "Set1")#
  rowCol <-desat(catCol)#
  userID <- NULL#
# Search functions #
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  ### 2019-03-04 UPDATE to SQL searching directly#
  searchGSM <- eventReactive(input$searchButton, {#
      if(input$gplSelection=='human'){#
          sql<-"SELECT * FROM appgsm WHERE description MATCH ?id1 AND gpl LIKE 'GPL570';"#
      } else {#
          sql<-"SELECT * FROM appgsm WHERE description MATCH ?id1 AND gpl LIKE 'GPL1261';"#
      }#
      query<-sqlInterpolate(poolGEO,sql,id1=input$searchText)#
      queryGSM<-dbGetQuery(poolGEO,query)#
      return(queryGSM)#
  })#
#
  output$searchResultsGSM <- DT::renderDataTable({#
          searchGSM()}, options=list(searching=TRUE, pageLength=50, scrollY='60vh', columnDefs=list(list(#
              targets = c(8),#
              render = JS(#
                  "function(data, type, row, meta) {",#
                      "return type === 'display' && typeof data === 'string' && data.length > 100 ?",#
                      "'<span title=\"' + data + '\">' + data.substr(0, 100) + '...</span>' : data;",#
                      "}") #
                      )))) ## typeof data needs to be a string, as a "NA" converted to JS "NULL" breaks things#
#
# Add sample (array) record to the current experiment #
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  proxy.search = dataTableProxy('searchResultsGSM')#
  testTable <- NULL#
  gsm_annotated <- eventReactive(input$addButton, {#
      testTable <<- rbind(testTable,searchGSM()[input$searchResultsGSM_rows_selected,])#
      proxy.search %>% selectRows(NULL)#
      return(testTable)#
  })#
  observeEvent(input$addButton, {#
      updateTabsetPanel(session = session, inputId = "searchpanel", selected = "2")#
  })#
#
# Assign categories to each sample (GSM)#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  ## Set up reactive table to store category data#
  samples <- reactiveValues()#
  samples$df <- data.frame()#
  observeEvent(input$assignButton, {#
      # groups <<- c(input$cat1,input$cat2,input$cat3) ## Use these in all following code! They should have a "name" variable for user-assigned names 2018-12-10#
      if (input$assignButton == 1) {#
        gsm_selected <- gsm_annotated()#
        gsm_selected$category <- rep("Not yet assigned", nrow(gsm_selected))#
        gsm_selected[input$gsm_table_rows_selected,"category"] <- input$selection#
        samples$df <<- gsm_selected#
      }#
      else#
      {#
        samples$df[input$gsm_table_rows_selected,"category"] <<- input$selection#
      }#
  })      #
  ## ^ don't love this... would like to have the category set without a button click (maybe change to this tab), but it's working for the moment#
  output$gsm_table <- DT::renderDataTable({#
      if(input$assignButton == 0){#
         return (datatable(gsm_annotated(),options=list(searching=TRUE, pageLength=50, scrollY='60vh',## 2018-12-10 Pick which columns are necessary ^#
             columnDefs=list(list(#
             targets = "_all",#
             render = JS(#
                 "function(data, type, row, meta) {",#
                     "return type === 'display' && typeof data === 'string' && data.length > 100 ?",#
                     "'<span title=\"' + data + '\">' + data.substr(0, 100) + '...</span>' : data;",#
                     "}")#
                     )))))#
      } else {#
         return (datatable(samples$df,options=list(searching=TRUE, pageLength=50, scrollY='60vh',#
             columnDefs=list(list(#
             targets = "_all",#
             render = JS(#
                 "function(data, type, row, meta) {",#
                     "return type === 'display' && typeof data === 'string' && data.length > 100 ?",#
                     "'<span title=\"' + data + '\">' + data.substr(0, 100) + '...</span>' : data;",#
                     "}")#
                     )))) %>%#
                     formatStyle('category', target="row", backgroundColor=styleEqual(c(input$cat1, input$cat2, input$cat3), c(rowCol[1], rowCol[2], rowCol[3]))))#
      }#
  })#
  proxy.gsm = dataTableProxy('gsm_table')#
  observeEvent(input$assignButton,{#
      proxy.gsm %>% selectRows(NULL)#
  }) #
  # outputOptions(output, "searchResultsGSM", suspendWhenHidden = FALSE)#
  # outputOptions(output, "gsm_table", suspendWhenHidden = FALSE)#
#
  ## UI output#
#
    output$categorySelect <- renderUI(#
      fluidRow(#
        column(12,#
               selectizeInput("selection", "Select a Category",#
                           c("category1" <- {input$cat1},#
                             "category2" <- {input$cat2},#
                             "category3" <- {input$cat3},#
                             "category4" <- "Not included")#
                             # , options = list(create=TRUE, plugins = list("remove_button")))  ### <- "remove_button" isn't what I thought it was. I would also like the "create" option but I will need to link this to the table as cat1-3 are linked (otherwise new variables are not coloured or sent along for processing)#
        )#
      )     ### 2018-12-10 I'd like to have a button to add category 3#
    )#
    )  #
# Finished table, to ultimately lead to CEL download#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  finishedtable <- eventReactive(input$assignButton, {#
    dplyr::filter(samples$df, category %in% c(input$cat1, input$cat2, input$cat3))#
  })#
  output$finishedtable <- DT::renderDataTable({datatable(finishedtable(),#
      options=list(searching=FALSE,pageLength=100, scrollY='60vh')) %>%#
      formatStyle('category',target="row",#
      backgroundColor=styleEqual(c(input$cat1,input$cat2,input$cat3),c(rowCol[1],rowCol[2],rowCol[3]))#
  )})#
rv <- reactiveValues(download_flag = 0)#
#
  # proxy.finishedtable = dataTableProxy('finishedtable')#
  output$report <- downloadHandler(#
      filename = paste(input$downloadId,userID,"GSM_report.csv",sep="_"),#
      content = function(file){#
          write.csv(finishedtable(),file)#
          rv$download_flag <- rv$download_flag + 1#
      })#
observeEvent(input$downloadCEL, {#
    showModal(modalDialog(title="Important! Downloading raw .CEL files from the NCBI server.","April 11th, 2019: App should be working now. Please click below to begin processing the data.",#
    footer = tagList(#
        modalButton("Cancel"),#
        actionButton("process","Proceed"))))      #
  })#
  observeEvent(input$process, {#
      removeModal()#
   })#
  observeEvent(input$process, {#
      withProgress(#
          message = "Downloading and processing GSM",#
          {userID<<-processData(finishedtable(),input$downloadId,input$comments,input$gplSelection,poolUserData)})#
  })#
#   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-#
#  / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \#
# `-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'#
#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
## This is where the analysis part of the application begins#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
# Load dataset#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
output$loadUserExperiments = renderUI({#
    selectizeInput(inputId="user_data",label="Select an experiment for analysis",choices=c("none"="none",split(userDatasetTable$desc, userDatasetTable$species)),selected="none")#
})#
observeEvent(input$user_data,{#
    id <- NULL#
    datasetToLoad <- NULL#
   if(input$user_data=="none"){#
        mapped_probes<<-NULL#
        eset<<-NULL#
        de_choices<<-NULL#
        sig_genes_lfc<<-NULL#
    }else{         #
        id <- userDatasetTable$userID[which(userDatasetTable$desc == input$user_data)]#
        assign(#
              x = "species", value = userDatasetTable$species[which(userDatasetTable$desc == input$user_data)], envir = .GlobalEnv#
           )#
        datasetToLoad <- paste("./data/app_data_", id, ".rda", sep='')#
        withProgress(message="Loading dataset",value=0.2,{#
            load(datasetToLoad,envir=.GlobalEnv)#
            incProgress(0.3, message = "Loading contrasts")#
            updateCheckboxGroupInput(session, "tissues", choices = groups, selected = groups)#
            updateCheckboxGroupInput(session, "pls_tissues", choices = groups, selected = groups)#
            updateCheckboxGroupInput(session, "de", choices = de_choices, selected = de_choices[1])#
            incProgress(0.5, message ="Loading genelists")#
            updateCheckboxGroupInput(session, "genelist", label = NULL, choices = names(gene_lists[[species]]), selected = NULL, inline = FALSE)#
            incProgress(0.8, message = "Loading gene names")#
            updateSelectInput(session, "gene", choices = all_genes[species])#
        })#
    }#
})#
#
# Download DEG#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
#
rvDEG <- reactiveValues(download_flag = 0)#
#
  # proxy.finishedtable = dataTableProxy('finishedtable')#
  output$reportDEG <- downloadHandler(#
      filename = paste(input$user_data,"DEG_report.xlsx",sep="_"),#
      # filename = paste(input$user_data,"DEG_report.csv",sep="_"),#
      content = function(file){#
          write_xlsx(sig_genes_lfc, path=file)#
          rvDEG$download_flag <- rvDEG$download_flag + 1#
      })#
# Load genes tab#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
#
  geneList = reactive({#
    if (is.null(input$genelist) && is.null(input$gene)) {#
      return(NULL)#
    }#
    genes = c()#
#
    if (!is.null(input$genelist)) {#
      for (gene in input$genelist) {#
        genes = c(genes, gene_lists[[species]][[gene]])#
      }#
    }#
#
    if (!is.null(input$gene)) {#
      genes = c(genes, input$gene)#
    }#
    return(unname(genes))#
  })#
 summary_gene_data = reactive({#
   validate(#
      need(geneList(), "No genes selected"),#
      need(!is.null(eset),"No dataset selected")#
    )#
   get_expression_summary(eset, geneList())#
 })#
#
# QC output#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
 output$QC = renderUI({#
    validate(#
      need(input$user_data!="none","No dataset selected")#
    )#
    fluidRow(h4("Expression normalization (array intensity, before and after)"), tags$img(src="array-processing.png",width="100%"), h4("RNA degradation plot (probe position vs intensity)"),#
    tags$img(src="RNA-deg.png",width="100%"))#
  })#
  output$degPlot = renderPlot({#
      validate(#
        need(input$user_data!="none","No dataset selected")#
      )#
      plotAffyRNAdeg(deg,cols=catCol)#
  })#
  output$genes = DT::renderDataTable({#
    validate(#
      need(geneList(), "No genes selected")#
    )#
     summary_gene_data() %>% datatable() %>% #
      formatRound(2:4)#
  })#
  # single gene plot#
 output$singleGenePlot = renderPlot({#
  # output$singleGenePlot = renderTable({#
    validate(#
      need(input$genes_rows_selected >= 1, "No genes selected")#
    )#
    rows = as.integer(input$genes_rows_selected)#
    genes_to_plot = summary_gene_data()$Symbol[rows]#
    gene_data = get_gene_data(eset, genes_to_plot)#
    by_gene_violplot(gene_data,tissues=groups)#
  })#
#
# Expression tab#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  observe({#
    toggle("de_choices", anim = TRUE, condition = input$de_state )#
  })#
  genesToPlot = reactive({#
    validate(#
      need(geneList(), "No genes selected")#
    )#
#
    genes = geneList()#
    if(input$de_state) {#
      selected_de = input$de#
      de_lists = lapply(selected_de, function(x) { as.character(get_de_genes(genes, x, sig_genes_lfc)$Symbol) })#
      genes = Reduce(union, de_lists)#
    } #
    return(genes) #
  }) #
# Heatmap plot#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  output$expressionPlot = renderPlot({#
    validate(#
      need(genesToPlot(), "No genes selected"),#
      need(input$tissues, "No tissues selected")#
    )#
    selected_tissues = input$tissues#
    sub_eset = eset[, eset$tissue %in% selected_tissues]#
    genes = gene2probe(genesToPlot(), mapped_probes)#
    gene_heatmap(sub_eset, genes, scale = "row",#
                  probe_level = input$hm_probes,#
                  gsm_show = input$hm_gsm,#
                  show_rownames = input$hm_rownames,#
                  cluster_rows = input$hm_row_cluster,#
                  cluster_cols = input$hm_col_cluster,#
                  border_color = NA)#
  })#
  output$heatmap_ui = renderUI({#
    plotOutput("expressionPlot", height = input$hm_height, width = input$hm_width)#
  })#
#
# Overall expression#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  output$overallPlot = renderPlot({#
    validate(#
      need(genesToPlot(), "No genes selected"),#
      need(input$tissues, "No tissues selected")#
    )#
    gene_data = get_gene_data(eset, genesToPlot())#
    overall_expression_boxplot(gene_data, tissues = input$tissues)#
  })#
# By gene boxplots ----------------------------------------------------------------------------#
#
  output$byGenePlot = renderPlot({#
    validate(#
      need(genesToPlot(), "No genes selected"),#
      need(input$tissues, "No tissues selected")#
    )#
    gene_data = get_gene_data(eset, genesToPlot())#
    by_gene_boxplot(gene_data, tissues = input$tissues)#
  })#
  plsdaData = reactive({#
    selected_tissues = input$pls_tissues#
    if(length(selected_tissues) < 2) {#
      return(NULL)#
    }#
    sub_eset = eset[, eset$tissue %in% selected_tissues]#
    genes = gene2probe(geneList(), mapped_probes)#
    probe = input$pls_probe#
    #ncomp = input$pls_ncomp#
    get_plsda(sub_eset, genes, probe) #
  })#
#
# PCA plot ----------------------------------------------------------------------------#
  output$indPlot = renderPlot({#
    validate(#
      need(plsdaData(), "No PLS-DA to plot"),#
      need(length(input$pls_tissues) >= 2, "Please select at least two tissues")#
    )#
    plotIndiv(plsdaData()$result, ind.names = FALSE, group = plsdaData()$tissue_grps, pch = 16, #
              col.per.group = brewer.pal(3, "Set1")[1:length(input$pls_tissues)], legend = TRUE, cex = 2, ellipse=TRUE)#
  })#
#
# Correlation Circle plot ----------------------------------------------------------------------------  #
  output$varPlot = renderPlot({#
     validate(#
      need(plsdaData(), "No PLS-DA to plot")#
    )#
#
    plotVar(plsdaData()$result, var.names = list(plsdaData()$varNames), cex = 3,overlap=FALSE)#
  })#
#
  output$numGenesUI = renderUI({#
    numericInput("pls_num_genes", "Select number of genes to show contributions for", #
                 value = 10, min = 1, max = length(geneList()), step = 1)#
  })#
# Loadings plot ----------------------------------------------------------------------------#
  output$contribPlot = renderPlot({#
    validate(#
      need(plsdaData(), "No PLS-DA to plot"),#
      need(input$pls_num_genes, "")#
    )#
    grps = plsdaData()$result$names$Y#
    cols = brewer.pal(3, "Set1")[1:length(grps)]#
    ndisplay = input$pls_num_genes#
    comp = as.integer(input$pls_ncomp)#
    plotLoadings(plsdaData()$result, name.var = plsdaData()$varNames, ndisplay = ndisplay,#
                comp = comp, legend.color = c(1:2))#
  })#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$  #
  ## Kill shinyApp when session closes#
  session$onSessionEnded(stopApp)#
#
}
setwd('/Users/derektoms/Desktop/shiny-server/receptoR_final')
# this codes for the 'enter/return' key as an action button#
jscode <- '#
$(function() {#
  var $els = $("[data-proxy-click]");#
  $.each(#
    $els,#
    function(idx, el) {#
      var $el = $(el);#
      var $proxy = $("#" + $el.data("proxyClick"));#
      $el.keydown(function (e) {#
        if (e.keyCode == 13) {#
          $proxy.click();#
        }#
      });#
    }#
  );#
});#
'#
#########################################
#$#$#$#$#$#$#$    UI     $#$#$#$#$#$#$#$#
#########################################
#
ui <- fluidPage(#
tags$head(tags$script(HTML(jscode))),#
tags$head(tags$link(rel = "stylesheet", type = "text/css", href = "receptor.css")),#
tags$head(tags$link(rel = "stylesheet", href = "https://use.fontawesome.com/releases/v5.6.3/css/all.css",  integrity="sha384-UHRtZLI+pbxtHCWp1t77Bi1L4ZtiqrqD80Kn4Z8NTSRyMA2Fd33n5dQ8lWUE00s/", crossorigin="anonymous")#
),#
# tags$script(HTML("$('body').addClass('fixed);")),#
shinyjs::useShinyjs(),#
navbarPage("receptoR",#
    theme = shinytheme("spacelab"),#
#
# Start page  ------------------------------------------------------------------------------#
#
    tabPanel("Start here",#
       h3("Welcome to receptoR!"),#
       hr(),#
       sidebarLayout(#
           sidebarPanel(#
               # h4("An automated hypothesis generation software to identify cellular signaling pathways from transcriptomics data"),#
               p("This software allows you to browse and analyze public transcriptomics data. This is based on the idea that each cell type expresses a particular suite of cellular receptors that drive its behaviour."),#
               tags$ol(tags$li("A cell transcribes mRNA that will be translated into functional receptor proteins."),tags$li("Isolating RNA from the cell and converting it to labeled cDNA allows us to hybridize it to an probe array to measure expression."),tags$li("Each sample represents a particular transcriptomic snapshot. Thousands of these have been digitized and made publicly available."),tags$li("By mining this data, we can predict which receptors are expressed by our samples of interest to direct tissue engineering strategies.")),#
               hr(),#
               #div#
               p("There are two ways to begin using receptor, either by searching for expression data to design your own experiment, or by loading and analysing an existing experiment."),#
               # To proceed, click \'Search for datasets\', above"),#
               hr(),#
               p("code created by Derek Toms, Qing Yun Tong and Matthew Workentine"),#
               p("Copyright (C) 2019, code licensed under GPLv3")#
               #/div#
               ),#
           mainPanel(#
               img(src="overview.png",width="100%")#
               ))#
        ),#
#
# Search for GSM  ------------------------------------------------------------------------------#
#
    tabPanel("Search Expression Data",#
       h3("Organize publicly available expression data"),#
       hr(),#
       sidebarLayout(#
       sidebarPanel(#
           # style = "position:fixed;width:30%",#
           conditionalPanel(condition="input.searchpanel==1",#
           h4("Search Expression Data"),#
           p("Begin by searching for experiments that expression data for your cell or tissue type of interest."),#
           br(),#
           radioButtons("gplSelection", "Choose species:", choices = c("Mouse (GPL1261)" = "mouse", "Human (GPL570)" = "human")),#
           tagAppendAttributes(textInput("searchText", "Enter search terms:", value = ""),`data-proxy-click` = "searchButton"),#
           actionButton("searchButton", "Search for arrays"),#
           hr(),#
           # HTML(paste("These experiments, each containing multiple biological samples, are refered to as ",span("G",style="font-weight:bold"),"EO data ",span("se",style="font-weight:bold"),"ries (GSE). Each ",span("G",style="font-weight:bold"),"EO ",span("s",style="font-weight:bold"), "a",span("m",style="font-weight:bold"),"ple (GSM) represents a digitized transcriptional snapshot.",sep="")),#
           p("Click \'Add array to experiment\' to retrieve array (GSM) information and then click on the \'Assign\' tab above to organize this data for analysis."),#
           actionButton("addButton", "Add array to experiment")),#
           conditionalPanel(condition="input.searchpanel==2",#
           h4("Define the categories that you wish to assign each sample (GSM) for comparison."),#
           p("Each sample of interest should be assigned to a category. In this way, experimental comparisons can be performed to determine differential expression between categories."),#
#
           tags$div(class="inputWithIcon",textInput("cat1", label=NULL, placeholder="Category 1")#
           # tags$span(style="color:#E41A1C",icon("circle",class="fa-2x"))#
           ),#
           tags$div(class="inputWithIcon",textInput("cat2", label=NULL, placeholder="Category 2")#
           # tags$span(style="color:#377EB8",icon("circle",class="fa-2x"))#
           ),#
           tags$div(class="inputWithIcon",textInput("cat3", label=NULL, placeholder="Category 3 (optional)")#
           # tags$span(style="color:#4DAF4A",icon("circle",class="fa-2x"))#
           ),#
#
           ### https://www.aridhia.com/blog/the-sky-is-not-the-limit-embedding-raw-html-and-javascript-to-create-dynamic-ui-elements-in-shiny-applications/   #
           ### ^ this should help with dynamically adding/subtracting categories#
           hr(),#
           h4("Highlight samples, then click to Assign them to the specificed category."),#
           p("Using the table at right and the drop down menu below, click on samples and \'Assign\' them to different categories. Samples can be filtered using the search bar. \nPLEASE NOTE: once you have clicked the \'Assign\' button you will no longer be able to add arrays to your experiment."),#
           fluidRow(column(8,uiOutput("categorySelect")),#
           column(4,actionButton("assignButton", "Assign")))#
           ),#
           conditionalPanel(condition="input.searchpanel==3",#
               h4("Thank you for using receptoR!"),#
               p(" Please enter your name and any comments/bugs/questions/requests in the box below, then click the \'Download and Process\' button to retrieve the raw files from the NCBI server and process them based on their assigned categories."),#
               textAreaInput("comments","Comments",width="100%",height="100px",resize="vertical"),#
               textInput("downloadId","Download ID"),#
               downloadButton("report","Download Report"),#
               actionButton("downloadCEL","Process")),#
               hr()#
               # Help banner on the bottom -------------------------#
               # h4("Help me!"),#
               # p("Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tippork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle.",style="color:#D8BFD8")#
       ),#
       mainPanel(#
           # Search GSE based on species#
        tabsetPanel(#
        tabPanel("Search", value=1,#
            h4("GEO microarrays (\'GSM\') matching your search query"), # return search here!#
            DT::dataTableOutput("searchResultsGSM")#
        ),#
        # Assign samples to categories ------------------------------------------------------#
        tabPanel("Assign", value=2,#
            h4("Assign individual arrays (GSM) to categories of your choosing"),#
            DT::dataTableOutput("gsm_table")#
        ),#
        # This will be where the CEL files are downloaded (confirmation, etc) ------------#
        tabPanel("Process", value=3,#
        h4("Please confirm samples are properly categorized before proceeding"),#
        p("Expression samples annotated:"),#
                DT::dataTableOutput("finishedtable")#
        ),#
        id = "searchpanel"#
        )#
        )#
        )#
    ),#
    # Load Gene Expression Data tab -------------------------------------#
    tabPanel("Load Experiment",#
        h3("Pick from user-defined experiments to perform analyses"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Load Experiment"),#
            uiOutput("loadUserExperiments"),#
            hr(),#
            checkboxGroupInput("genelist", "Select a receptor type to analyze", #
                  choices = NULL),#
            br(),#
            selectInput("gene", "Select gene(s) to show", choices = NULL, multiple = TRUE),#
            downloadButton("reportDEG","Download differential gene expression analysis")#
        ),#
        mainPanel(#
            tabsetPanel(type="tabs",selected="Gene-level expression",#
            tabPanel("Quality control",#
            uiOutput("QC"),#
            plotOutput("degPlot")#
        ),#
            tabPanel("Experimental design",h4("Category definitions and contrasts"),p("Coming soon!")),#
            tabPanel("Gene-level expression",#
                fluidRow(#
                column(6, h4("Average Expression"), DT::dataTableOutput("genes")),#
                column(6, h4("Gene Boxplot"), plotOutput("singleGenePlot"))#
            )))#
        )#
        )#
    ),#
    # Magnitude expression tab ------------------------------------------------------------------------------#
    tabPanel("Absolute Expression",#
        h3("Compare genes based on absolute expression"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Absolute expression"),#
            # p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            # style = "position:fixed",#
            checkboxGroupInput("tissues", label = "Select tissues to inclued",#
            choices = NULL, selected = NULL),#
            br(),#
            checkboxInput("de_state", label = "Show differential expressed only", value = TRUE),#
            checkboxGroupInput("de", label = "Choose comparison(s) to show", choices = NULL, selected = NULL),#
            br(),#
            conditionalPanel(condition="input.absexpanel==1",#
                h5("Heatmap parameters"),#
                checkboxInput("hm_probes", "Show probe-level", value = FALSE),#
                checkboxInput("hm_gsm", "Show GSM (column names)", value = TRUE),#
                checkboxInput("hm_rownames", "Show rownames", value = TRUE),#
                checkboxInput("hm_col_cluster", "Cluster columns", value = TRUE),#
                checkboxInput("hm_row_cluster", "Cluster rows", value = TRUE),#
                numericInput("hm_width", "Plot width (px)", value = 900, min = 100, max = 2400, step = 10),#
                numericInput("hm_height", "Plot height (px)", value = 1200, min = 100, max = 2400, step = 10))#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("Heatmap", value=1, uiOutput("heatmap_ui")),#
            tabPanel("Summary boxplots", plotOutput("overallPlot", height = 600)),#
            tabPanel("By-gene boxplots", plotOutput("byGenePlot", height = 600)),#
            id = "absexpanel"#
        )#
        )#
        )#
    ),#
#
    # Mixomics tab ---------------------------------------------#
    tabPanel("Relative Expression",#
        h3("Compare genes based on relative expression between experimental groups"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Relative expression"),#
            # p("Bacon ipsum dolor amet chuck tongue flank bresaola corned beef hamburger leberkas pig bacon pork loin. Turducken leberkas t-bone tongue, tail frankfurter corned beef strip steak buffalo picanha beef tri-tip pork belly rump flank. Chicken cupim sausage, spare ribs prosciutto beef pork corned beef salami leberkas shankle. Andouille hamburger strip steak ground round, ham filet mignon swine kielbasa pork chop jerky.",style="color:#D8BFD8"),#
            checkboxGroupInput("pls_tissues", label = "Select tissues to inclued",#
            choices = NULL, selected = NULL),#
            checkboxInput("pls_probe", "Perform PLS-DA at probe level", value = FALSE),#
            br(),#
            h4("Gene contribution plot"),#
            uiOutput("numGenesUI"),#
            radioButtons("pls_ncomp", "Select component for gene contribution plot", choices = c(1,2)),#
            br()#
            # downloadButton("pls_download", "Download gene contribution data")#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("PCA Analysis", plotOutput("indPlot", height = 800)),#
            tabPanel("Circle variance", plotOutput("varPlot", height = 800)),#
            tabPanel("Loadings plot", plotOutput("contribPlot", height = 800))#
        ),#
        position = c("right","left"),#
        fluid = TRUE#
        )#
        )#
    )#
)#
)
g<-function(){shinyApp(ui,server)}
g()
source('~/Desktop/shiny-server/receptoR_final/functions.R')
g()
load("~/Documents/Retina/CNIB_TuckMacPhee/2018-04-13_app_data.rda")
species='mouse'
species
load("/Volumes/ULTRA/Retina/CNIB_TuckMacPhee/Bioinformatics/genelists.rda")
mygenes<-gene_lists$`Cytokine receptors`
mygenes
genes2<-gene2probe(mygenes,mapped_probes)
myda<-get_plsda(eset,genes2,probe=FALSE)
exp = exprs(eset)[genes2,]#
     tissue = factor(pData(eset)$tissue)#
     tissue_grps = pData(eset)$tissue
get_plsda = function(eset, genes, probe) {#
     if(species=='mouse'){#
         exp = exprs(eset)[genes]#
     } else {#
         exp = exprs(eset)[genes,]#
     }#
     tissue = factor(pData(eset)$tissue)#
     tissue_grps = pData(eset)$tissue#
     if (probe == FALSE) {#
       exp = aggregate(exp, list(genes = rownames(exp)), mean)#
       rownames(exp) = exp$genes#
       exp = as.matrix(exp[,-1])#
     }#
     exp = t(exp)#
     if(species=='mouse'){#
         return(list(#
           result = splsda(exp, tissue, ncomp = 2),#
           tissue_grps = tissue_grps,#
           varNames = getSYMBOL(colnames(exp), "mouse4302.db")#
         ))#
     } else {#
         return(list(#
           result = splsda(exp, tissue, ncomp = 2),#
           tissue_grps = tissue_grps,#
           varNames = getSYMBOL(colnames(exp), "hgu133plus2.db")#
         ))#
     }#
 }
myda<-get_plsda(eset,genes2,probe=FALSE)
if(species=='mouse'){#
         exp = exprs(eset)[genes]#
     } else {#
         exp = exprs(eset)[genes,]#
     }
if(species=='mouse'){#
         exp = exprs(eset)[genes2]#
     } else {#
         exp = exprs(eset)[genes2,]#
     }
tissue = factor(pData(eset)$tissue)#
     tissue_grps = pData(eset)$tissue
if (probe == FALSE) {#
       exp = aggregate(exp, list(genes = rownames(exp)), mean)#
       rownames(exp) = exp$genes#
       exp = as.matrix(exp[,-1])#
     }
probe=FALSE
if (probe == FALSE) {#
       exp = aggregate(exp, list(genes = rownames(exp)), mean)#
       rownames(exp) = exp$genes#
       exp = as.matrix(exp[,-1])#
     }
exp
exp<-exprs(eset)[genes2]
exp
exp<-exprs(eset)[,genes2]
head(exprs(eset))
genes2
exp<-exprs(eset)[genes2,]
exp<-exprs(eset)[list(genes2),]
values(genes2)
head(rownames(genes2))
head(genes2)
head(names(genes2))
head(values(genes2))
head(genes2))
head(genes2)
class(genes2)
class(names(mapped_probes))
head(mapped_probes)
class(genes2)
class(genes2)
type(genes2)
class(mapped_probes)
head(mygenes)
genes3<-na.omit(unlist(mapped_probes[mygenes]))
head(genes3)
head(genes2)
species<-"human"
genes4<-gene2probe(mygenes,mapped_probes)
head(genes4)
g <- rep(seq_along(mapped_probes),sapply(mapped_probes, length))
g
names(mapped_probes)[!is.na(g[match(mapped_probes,mygenes)])]
names(mapped_probes)
!is.na(g[match(mapped_probes,mygenes)])
head(mapped_genes)
head(mapped_probes)
head(mygenes)
exp = exprs(eset)[names(genes3)]
exp
head(genes3)
genes3[1]
exprs(eset)["1433652_at"]
exprs(eset)[,"1433652_at"]
exprs(eset)["1433652_at",]
c(genes3)
exprs(eset)[c(genes3),]
head(exprs(eset)[factor(genes3),])
head(exprs(eset)[factor(c(genes3)),])
sub_eset = eset[, eset$tissue %in% c("photoreceptors")]
head(sub_eset)
pData(sub_eset)
sub_eset = eset[, eset$tissue %in% c("photorec")]
length(sub_eset)
subeset
sub_eset
samples(eset)
sub_eset$samples
sub_eset
sampleNames(sub_eset)
sub_eset2 = eset[, eset$tissue %in% c("photoreceptors")]
sampleNames(sub_eset2)
length(sampleNames(sub_eset))
length(sampleNames(sub_eset2))
length(mygenes)
mat = exprs(eset)[c(genes3),]
rownames(mat)
sampleNames(sub_eset)
is.null(sub_eset)
!is.null(sub_eset)
gene_heatmap(sub_eset,genes3)
genes3
gene_heatmap(eset,genes3)
eset
head(genes3)
gene_heatmap(eset,mygenes)
mat = exprs(eset)[c(genes3),]
head(mat)
mat = mat[order(rownames(mat)),]
eset
sub_eset<-gene2probe(mygenes,mapped_probes)
gene_heatmap(eset,sub_eset)
myda
get_plsda(sub_eset, genes, probe) -> myda
get_plsda(eset,sub_eset, probe) -> myda
head(sub_eset)
mygenes
myprobes<-gene2probe(mygenes,mapped_probes)
head(myprobes)
get_plsda(eset,genes3, probe) -> myda
head(myda)
probe
genes <- gene2probe(mygenes,mapped_probes)
source("functions.R")
genes <- gene2probe(mygenes,mapped_probes)
species
species <-"mouse"
species
genes <- gene2probe(mygenes,mapped_probes)
get_plsda(eset,genes, probe) -> myda
head(myda)
plotIndiv(myda$result, ind.names = FALSE, group = plsdaData()$tissue_grps, pch = 16, #
              col.per.group = brewer.pal(3, "Set1")[1:length(input$pls_tissues)], legend = TRUE, cex = 2, ellipse=TRUE)
library(mixOmics)
plotIndiv(myda$result, ind.names = FALSE, group = plsdaData()$tissue_grps, pch = 16, #
              col.per.group = brewer.pal(3, "Set1")[1:length(input$pls_tissues)], legend = TRUE, cex = 2, ellipse=TRUE)
plotIndiv(myda$result, ind.names = FALSE, group = myda)$tissue_grps, pch = 16, #
              col.per.group = brewer.pal(3, "Set1")[1:length(input$pls_tissues)], legend = TRUE, cex = 2, ellipse=TRUE)
plotIndiv(myda$result, ind.names = FALSE, group = myda$tissue_grps, pch = 16, #
              col.per.group = brewer.pal(3, "Set1")[1:length(input$pls_tissues)], legend = TRUE, cex = 2, ellipse=TRUE)
plotIndiv(myda$result, ind.names = FALSE, group = myda$tissue_grps, pch = 16, #
              col.per.group = brewer.pal(3, "Set1")[1:3], legend = TRUE, cex = 2, ellipse=TRUE)
grps = myda$result$names$Y#
    cols = brewer.pal(3, "Set1")[1:length(grps)]#
    ndisplay = input$pls_num_genes#
    comp = as.integer(input$pls_ncomp)#
    plotLoadings(myda$result, name.var = myda$varNames, ndisplay = ndisplay,#
                comp = comp, legend.color = c(1:2))
grps = myda$result$names$Y#
    cols = brewer.pal(3, "Set1")[1:length(grps)]#
    ndisplay = input$pls_num_genes#
    comp = as.integer(3)#
    plotLoadings(myda$result, name.var = myda$varNames, ndisplay = ndisplay,#
                comp = comp, legend.color = c(1:2))
grps = myda$result$names$Y#
    cols = brewer.pal(3, "Set1")[1:length(grps)]#
    ndisplay = input$pls_num_genes#
    comp = as.integer(2)#
    plotLoadings(myda$result, name.var = myda$varNames, ndisplay = ndisplay,#
                comp = comp, legend.color = c(1:2))
grps = myda$result$names$Y#
    cols = brewer.pal(3, "Set1")[1:length(grps)]#
    ndisplay = 1#
    comp = as.integer(2)#
    plotLoadings(myda$result, name.var = myda$varNames, ndisplay = ndisplay,#
                comp = comp, legend.color = c(1:2))
grps = myda$result$names$Y#
    cols = brewer.pal(3, "Set1")[1:length(grps)]#
    ndisplay = 1#
    comp = as.integer(2)#
    plotLoadings(myda$result, name.var = myda$varNames, ndisplay = ndisplay,#
                comp = comp, legend.color = c(1:2),color=cols)
?plotLoadings
grps = myda$result$names$Y#
    cols = brewer.pal(3, "Set1")[1:length(grps)]#
    ndisplay = 1#
    comp = as.integer(2)#
    plotLoadings(myda$result, name.var = myda$varNames, ndisplay = ndisplay,#
                comp = comp, legend.color = c(1:2),col=cols)
grps = myda$result$names$Y#
    cols = brewer.pal(3, "Set1")[1:length(grps)]#
    ndisplay = 10#
    comp = as.integer(2)#
    plotLoadings(myda$result, name.var = myda$varNames, ndisplay = ndisplay,#
                comp = comp, legend.color = c(1:2),col=cols)
grps = myda$result$names$Y#
    cols = brewer.pal(3, "Set1")[1:length(grps)]#
    ndisplay = 50#
    comp = as.integer(2)#
    plotLoadings(myda$result, name.var = myda$varNames, ndisplay = ndisplay,#
                comp = comp, legend.color = c(1:2),col=cols)
grps = myda$result$names$Y#
    cols = brewer.pal(3, "Set1")[1:length(grps)]#
    ndisplay = 50#
    comp = as.integer(1)#
    plotLoadings(myda$result, name.var = myda$varNames, ndisplay = ndisplay,#
                comp = comp, legend.color = c(1:2),col=cols)
grps = myda$result$names$Y#
    cols = brewer.pal(3, "Set1")[1:length(grps)]#
    ndisplay = 50#
    comp = as.integer(1)#
    plotLoadings(myda$result, name.var = myda$varNames, ndisplay = ndisplay,#
                comp = comp,col=cols)
grps = myda$result$names$Y#
    cols = brewer.pal(3, "Set1")[1:length(grps)]#
    ndisplay = 50#
    comp = as.integer(1)#
    plotLoadings(myda$result, name.var = myda$varNames, ndisplay = ndisplay,#
                comp = comp, legend.color = c(1:2),col=cols)
cols
cols <- brewer.pal(3,"Set1")
cols
grps = myda$result$names$Y#
    cols = brewer.pal(3, "Set1")[1:length(grps)]#
    ndisplay = 50#
    comp = as.integer(1)#
    plotLoadings(myda$result, name.var = myda$varNames, ndisplay = ndisplay,#
                comp = comp, legend.color = c(1:2),col=cols)
grps = myda$result$names$Y#
    cols = brewer.pal(3, "Set1")[1:length(grps)]#
    ndisplay = 50#
    comp = as.integer(1)#
    plotLoadings(myda$result, name.var = myda$varNames, ndisplay = ndisplay,#
                comp = comp)
grps = myda$result$names$Y#
    cols = brewer.pal(3, "Set1")[1:length(grps)]#
    ndisplay = 50#
    comp = as.integer(1)#
    plotLoadings(myda$result, name.var = myda$varNames, ndisplay = ndisplay,#
                comp = comp,method="mean")
grps = myda$result$names$Y#
    cols = brewer.pal(3, "Set1")[1:length(grps)]#
    ndisplay = 50#
    comp = as.integer(1)#
    plotLoadings(myda$result, name.var = myda$varNames, ndisplay = ndisplay,#
                comp = comp,contrib = 'max', method = 'mean')
grps = myda$result$names$Y#
    cols = brewer.pal(3, "Set1")[1:length(grps)]#
    ndisplay = 50#
    comp = as.integer(1)#
    plotLoadings(myda$result, name.var = myda$varNames, ndisplay = ndisplay,#
                comp = comp,contrib = 'max', method = 'mean',col=cols)
grps = myda$result$names$Y#
    cols = brewer.pal(3, "Set1")[1:length(grps)]#
    ndisplay = 100#
    comp = as.integer(1)#
    plotLoadings(myda$result, name.var = myda$varNames, ndisplay = ndisplay,#
                comp = comp,contrib = 'max', method = 'mean',col=cols)
grps = myda$result$names$Y#
    cols = brewer.pal(3, "Set1")[1:length(grps)]#
    ndisplay = 100#
    comp = as.integer(1)#
    plotLoadings(myda$result, name.var = myda$varNames, ndisplay = ndisplay,#
                comp = comp,contrib = 'max', method = 'mean',legend.color=cols)
grps = myda$result$names$Y#
    cols = brewer.pal(3, "Set1")[1:length(grps)]#
    ndisplay = 100#
    comp = as.integer(1)#
    plotLoadings(myda$result, name.var = myda$varNames, ndisplay = ndisplay,#
                comp = comp,contrib = 'max', method = 'mean',legend.color=factor(cols))
cols
cols <- brewer.pal(3,"Set1")
grps = myda$result$names$Y#
    cols = brewer.pal(3, "Set1")[1:length(grps)]#
    ndisplay = 100#
    comp = as.integer(1)#
    plotLoadings(myda$result, name.var = myda$varNames, ndisplay = ndisplay,#
                comp = comp,contrib = 'max', method = 'mean',legend.color=factor(cols))
grps = myda$result$names$Y#
    cols = brewer.pal(3, "Set1")[1:length(grps)]#
    ndisplay = 100#
    comp = as.integer(1)#
    plotLoadings(myda$result, name.var = myda$varNames, ndisplay = ndisplay,#
                comp = comp,contrib = 'max', method = 'mean',legend.color=cols)
cols
cols<- brewer.pal(3,"Set1")
cols
grps = myda$result$names$Y#
    ndisplay = 100#
    comp = as.integer(1)#
    plotLoadings(myda$result, name.var = myda$varNames, ndisplay = ndisplay,#
                comp = comp,contrib = 'max', method = 'mean',legend.color=cols)
grps = myda$result$names$Y#
    ndisplay = 10#
    comp = as.integer(1)#
    plotLoadings(myda$result, name.var = myda$varNames, ndisplay = ndisplay,#
                comp = comp,contrib = 'max', method = 'mean',legend.color=cols)
grps = myda$result$names$Y#
    ndisplay = 20#
    comp = as.integer(1)#
    plotLoadings(myda$result, name.var = myda$varNames, ndisplay = ndisplay,#
                comp = comp,contrib = 'max', method = 'mean',legend.color=cols)
grps = myda$result$names$Y#
    ndisplay = 20#
    comp = as.integer(1)#
    plotLoadings(myda$result, name.var = myda$varNames, ndisplay = ndisplay,#
                comp = comp,contrib = 'max', method = 'median',legend.color=cols)
grps = myda$result$names$Y#
    ndisplay = 20#
    comp = as.integer(1)#
    plotLoadings(myda$result, name.var = myda$varNames, ndisplay = ndisplay,#
                comp = comp,contrib = 'min', method = 'median',legend.color=cols)
grps = myda$result$names$Y#
    ndisplay = 10#
    comp = as.integer(1)#
    plotLoadings(myda$result, name.var = myda$varNames, ndisplay = ndisplay,#
                comp = comp,contrib = 'max', method = 'mean',legend.color=cols)
ndisplay<-2
grps = myda$result$names$Y#
    ndisplay = 10#
    comp = as.integer(1)#
    plotLoadings(myda$result, name.var = myda$varNames, ndisplay = ndisplay,#
                comp = comp,contrib = 'max', method = 'mean',legend.color=cols)
ndisplay<-1
grps = myda$result$names$Y#
    ndisplay = 10#
    comp = as.integer(1)#
    plotLoadings(myda$result, name.var = myda$varNames, ndisplay = ndisplay,#
                comp = comp,contrib = 'max', method = 'mean',legend.color=cols)
grps = myda$result$names$Y#
    ndisplay = 10#
    comp = as.integer(2)#
    plotLoadings(myda$result, name.var = myda$varNames, ndisplay = ndisplay,#
                comp = comp,contrib = 'max', method = 'mean',legend.color=cols)
grps = myda$result$names$Y#
    ndisplay = 10#
    comp = as.integer(2)#
    plotLoadings(myda$result, name.var = myda$varNames, ndisplay = ndisplay,#
                comp = comp,contrib = 'max', method = 'mean',legend.color=cols)
grps
grps = myda$result$names$Y#
    ndisplay = 10#
    comp = as.integer(1)#
    plotLoadings(myda$result, name.var = myda$varNames, ndisplay = ndisplay,#
                comp = comp,contrib = 'max', method = 'mean',legend.color=cols)
grps = myda$result$names$Y#
    ndisplay = 25#
    comp = as.integer(1)#
    plotLoadings(myda$result, name.var = myda$varNames, ndisplay = ndisplay,#
                comp = comp,contrib = 'max', method = 'mean',legend.color=cols)
grps = myda$result$names$Y#
    ndisplay = 25#
    comp = as.integer(1)#
    plotLoadings(myda$result, name.var = myda$varNames, ndisplay = ndisplay,#
                comp = comp,contrib = 'max', method = 'mean',legend.color=cols[1:length(grps)])
grps
myda$result$names
myda$result$namesY
myda$result$names$Y
myda$result$names$colnames$Y
grps = myda$result$names$colnames$Y
grps
grps = myda$result$names$Y#
    ndisplay = 25#
    comp = as.integer(1)#
    plotLoadings(myda$result, name.var = myda$varNames, ndisplay = ndisplay,#
                comp = comp,contrib = 'max', method = 'mean',legend.color=cols[1:length(grps)])
grps = myda$result$names$colnames$Y#
    ndisplay = 25#
    comp = as.integer(1)#
    plotLoadings(myda$result, name.var = myda$varNames, ndisplay = ndisplay,#
                comp = comp,contrib = 'max', method = 'mean',legend.color=cols[1:length(grps)])
plotVar(myda$result, var.names = list(myda$varNames), cex = 3,overlap=FALSE)
plotVar(myda$result, var.names = list(myda$varNames), cex = 3,overlap=TRUE)
plotVar(myda$result, var.names = list(myda$varNames), cex = 3,overlap=TRUE,col=cols)
plotVar(myda$result, var.names = list(myda$varNames), cex = 3,overlap=TRUE,col=rep(cols,455/3))
plotVar(myda$result, var.names = list(myda$varNames), cex = 3,overlap=TRUE,col=rep(cols,455)
)
plotVar(myda$result, var.names = list(myda$varNames), cex = 3,overlap=TRUE,col=rep(cols,455)[1:455)]
plotVar(myda$result, var.names = list(myda$varNames), cex = 3,overlap=TRUE,col=rep(cols,455)[1:455])
ve<-rep(cols,455)
head(ve)
length(ve)
length(ve[1:455])
plotVar(myda$result, var.names = list(myda$varNames), cex = 3,overlap=TRUE,col=list(rep(cols,155)[1:455]))
plotVar(myda$result, var.names = list(myda$varNames), cex = 3,overlap=TRUE,col=list(rep(cols,155)[1:455]),style="3d")
plotVar(myda$result, var.names = list(myda$varNames), cex = 3,overlap=TRUE,col=list(rep(cols,155)[1:455]))
plotVar(myda$result, var.names = c(TRUE,TRUE,FALSE), cex = 3,overlap=TRUE,col=list(rep(cols,155)[1:455]))
plotVar(myda$result, var.names = list(myda$varNames), cex = 3,overlap=TRUE,col=list(rep(cols,155)[1:455]),scheme='centroid')
plotVar(myda$result, var.names = list(myda$varNames), cex = 3,overlap=TRUE,col=list(rep(cols,155)[1:455]),style='lattice')
plotVar(myda$result, var.names = list(myda$varNames), cex = .3,overlap=TRUE,col=list(rep(cols,155)[1:455]),style='lattice')
grps = myda$result$names$colnames$Y#
    ndisplay = 25#
    comp = as.integer(1)#
    plotLoadings(myda$result, name.var = myda$varNames, ndisplay = ndisplay,#
                comp = comp,contrib = 'max', method = 'mean',legend.color=cols[1:length(grps)])
load("~/Documents/Retina/CNIB_TuckMacPhee/Bioinformatics/2018-04-13 photoreceptor v rpe/final_processed_data_2018-04-13.rda")
all_data_deg <- AffyRNAdeg(all_data)#
 ## Array normalization#
 rawBox <- ggplot(data=melt(exprs(all_data)))+geom_boxplot(aes(x=Var2,y=value))#
 rmaBox <- ggplot(data=melt(exprs(all_eset)))+geom_boxplot(aes(x=Var2,y=value))
all_data_deg <- AffyRNAdeg(all_data)#
 ## Array normalization#
 rawBox <- ggplot(data=melt(exprs(all_data)))+geom_boxplot(aes(x=Var2,y=value))#
 rmaBox <- ggplot(data=melt(exprs(all_eset_final)))+geom_boxplot(aes(x=Var2,y=value))
PATH="/Volumes/ULTRA/Retina/CNIB_TuckMacPhee/Bioinformatics/2018-04-13 photoreceptor v rpe/"
gsm_dirs = list.files(path=PATH, pattern = "GSM", full.names=TRUE)
gsm_dirs
PATH="/Volumes/ULTRA/Retina/CNIB_TuckMacPhee/Bioinformatics/2018-04-13 photoreceptor v rpe"
gsm_dirs = list.files(path=PATH, pattern = "GSM", full.names=TRUE)
PATH="/Volumes/ULTRA/Retina/CNIB_TuckMacPhee/Bioinformatics/2018-04-13 photoreceptor v rpe"
gsm_dirs
gsm_files = lapply(gsm_dirs, list.files, pattern = "[Cc][Ee][Ll].gz", full.names = TRUE)
all_data = ReadAffy(filenames = unlist(gsm_files))
rawBox <- ggplot(data=melt(exprs(all_data)))+geom_boxplot(aes(x=Var2,y=value))
rawBox
rmaBox
rawBox
boxplot(all_data,las=2,main="Raw expression data",xaxt="n",col=catCol)
catCol
boxplot(all_data,las=2,main="Raw expression data",xaxt="n",col=brewer.pal(3,"Set1"))
labels$colour<-brewer.pal(3,"Set1")
labels<-data.frame(colour=brewer.pal(3,"Set1"))
mat<-matrix(c(1,2),2)#
layout(mat,widths=c(1,1),heights=c(2,3))#
par(mar=c(1,3,1,1))#
boxplot(all_data,las=2,main="Raw expression data",xaxt="n",col=labels$colour)#
par(mar=c(7,3,1,1))#
boxplot(exprs(all_eset),las=2,main="Expression set data",col=labels$colour)
mat<-matrix(c(1,2),2)#
layout(mat,widths=c(1,1),heights=c(2,3))#
par(mar=c(1,3,1,1))#
boxplot(all_data,las=2,main="Raw expression data",xaxt="n",col=labels$colour)#
par(mar=c(7,3,1,1))#
boxplot(exprs(all_eset_final),las=2,main="Expression set data",col=labels$colour)
labels$colour
q()
