server <- function(input, output, session) {#
#   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-#
#  / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \#
# `-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
## This is the database search begins#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
#
# Quick link from the main page#
observeEvent(input$linkSearch, {#
  updateNavbarPage(session, "receptorMain", selected="searchPanel")#
})#
# Set up colour environment#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  catCol <- brewer.pal(3, "Set1")#
  rowCol <-desat(catCol)#
  userID <- NULL#
# Search functions #
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  searchGSM <- eventReactive(input$searchButton, {#
      if(input$gplSelection=='human'){#
          sql<-"SELECT * FROM appgsm WHERE description MATCH ?id1 AND gpl LIKE 'GPL570';"#
      } else {#
          sql<-"SELECT * FROM appgsm WHERE description MATCH ?id1 AND gpl LIKE 'GPL1261';"#
      }#
      query<-sqlInterpolate(poolGEO,sql,id1=input$searchText)#
      queryGSM<-dbGetQuery(poolGEO,query)#
      shinyjs::disable("gplSelection")#
      return(queryGSM)#
  })#
#
  output$searchResultsGSM <- DT::renderDataTable({#
          searchGSM()}, extensions = 'Buttons', options=list(#
              dom = 'Bfrtip',#
              buttons = list(list(extend = 'colvis')),#
              searching=TRUE, #
              paging=FALSE,#
              scrollX=TRUE, #
              scrollY='60vh', #
              scrollCollapse=TRUE,#
              fixedHeader=TRUE,#
              autoWidth=TRUE,#
              columnDefs=list(list(#
              targets = "_all",#
              render = JS(#
                  "function(data, type, row, meta) {",#
                      "return type === 'display' && typeof data === 'string' && data.length > 100 ?",#
                      "'<span title=\"' + data + '\">' + data.substr(0, 100) + '...</span>' : data;",#
                      "}") #
                      )))) ## typeof data needs to be a string, as a "NA" converted to JS "NULL" breaks things#
#
# Set up tables to store user-selected data#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
#
  proxy.search = dataTableProxy('searchResultsGSM')#
#
  ## Set up reactive table to store experimental samples#
  userSamples <- reactiveValues()#
  userSamples$df <- data.frame()#
  # 2019-07-31 Upload user data#
  # Upload read count table#
  #_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  userEset <- reactive({#
      inFile <- input$eset_upload#
      if (is.null(inFile))#
          return(NULL)#
      df<- read.csv(inFile$datapath,header=TRUE,sep=",")#
      return(df)#
  })#
  output$upload_table <- DT::renderDataTable({#
      df <- userEset()#
      datatable(df, options=list(#
          searching=TRUE, #
          paging=TRUE,#
          scrollX=TRUE, #
          scrollY='25vh',#
          scrollCollapse=TRUE,#
          fixedHeader=TRUE,#
          autoWidth=FALSE))#
      })#
  observeEvent(input$uploadButton, {#
      showModal(modalDialog(title="Select your data to upload for analysis","Make sure things look right before proceeding. There is the ability to add some options here, if I want to make it slightly more flexible (e.g. separator, header).", radioButtons("speciesSelection", "Choose species:", choices = c("Mouse" = "mouse", "Human" = "human")),#
          fileInput('eset_upload','Choose file to upload', accept = c('text/csv','text/comma-separated-values','.csv')),#
          DT::dataTableOutput("upload_table"),#
          easyClose = TRUE,#
          footer = tagList(#
              actionButton("uploaded","Upload read table"))))#
  })#
  # 'uploaded file' flag#
  eset_is_uploaded = FALSE#
  observeEvent(input$uploaded, {#
      eset_is_uploaded <<- TRUE#
      removeModal()#
      uploadSamples <- userEset()#
      tableRows <- ncol(uploadSamples)#
      userSamples$df <<- data.frame(samples = colnames(uploadSamples), category = rep("Not yet assigned", tableRows), features = rep(nrow(uploadSamples), tableRows), description = rep("User uploaded samples",tableRows))#
      updateTabsetPanel(session = session, inputId = "searchpanel", selected = "2")  ## jump to 'Assign' tab#
  })#
#
  observeEvent(input$clear_upload, {#
      eset_is_uploaded <<- FALSE#
      userSamples$df <<- data.frame()#
      removeModal()#
  })#
# Add sample (array) record to the current experiment #
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  observeEvent(input$addButton, {#
      if(eset_is_uploaded){#
          showModal(modalDialog(title = "Alert! Uploaded data detected.", "Continuing with public arrays will erase uploaded dataset.",#
              easyClose = TRUE, footer = tagList(actionButton("clear_upload","Proceed"), modalButton("Cancel"))))#
      } else {#
      gsm_selected <- searchGSM()[input$searchResultsGSM_rows_selected,]#
      gsm_selected$category <- rep("Not yet assigned", nrow(gsm_selected))#
      userSamples$df <<- rbind(userSamples$df,gsm_selected)#
      proxy.search %>% selectRows(NULL)#
      updateTabsetPanel(session = session, inputId = "searchpanel", selected = "2")#
      }#
  })#
#
# Assign categories to each sample (GSM)#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  observeEvent(input$assignButton, {#
        userSamples$df[,"category"] <<- as.character(userSamples$df[,"category"])#
        userSamples$df[input$gsm_table_rows_selected,"category"] <<- input$selection#
        userSamples$df[,"category"] <<- as.factor(userSamples$df[,"category"])#
  })      #
  output$gsm_table <- DT::renderDataTable({#
      if(input$assignButton == 0){#
         return (datatable(userSamples$df, extensions = 'Buttons', options=list(#
               dom = 'Bfrtip',#
               buttons = list(list(extend = 'colvis')),#
               searching=TRUE, #
               paging=FALSE,#
               scrollX=TRUE, #
               scrollY='60vh', #
               scrollCollapse=TRUE,#
               fixedHeader=TRUE,#
               autoWidth=TRUE,#
               columnDefs=list(list(#
             targets = "_all",#
             render = JS(#
                 "function(data, type, row, meta) {",#
                     "return type === 'display' && typeof data === 'string' && data.length > 100 ?",#
                     "'<span title=\"' + data + '\">' + data.substr(0, 100) + '...</span>' : data;",#
                     "}")#
                     )))))#
      } else {#
         return (datatable(userSamples$df, extensions = 'Buttons', options=list(#
             dom = 'Bfrtip',#
             buttons = list(list(extend = 'colvis')),#
             searching=TRUE, #
             paging=FALSE,#
             scrollX=TRUE, #
             scrollY='60vh', #
             scrollCollapse=TRUE,#
             fixedHeader=TRUE,#
             autoWidth=TRUE,#
             columnDefs=list(list(#
             targets = "_all",#
             render = JS(#
                 "function(data, type, row, meta) {",#
                     "return type === 'display' && typeof data === 'string' && data.length > 100 ?",#
                     "'<span title=\"' + data + '\">' + data.substr(0, 100) + '...</span>' : data;",#
                     "}")#
                     )))) %>%#
                     formatStyle('category', target="row", backgroundColor=styleEqual(c(input$cat1, input$cat2, input$cat3), c(rowCol[1], rowCol[2], rowCol[3]))))#
      }#
  })#
  proxy.gsm = dataTableProxy('gsm_table')#
  observeEvent(input$assignButton,{#
      proxy.gsm %>% selectRows(NULL)#
  }) #
  ## UI output#
#
    output$categorySelect <- renderUI(#
      fluidRow(#
        column(12,#
               selectizeInput("selection", "Select a Category",#
                           c("category1" <- {input$cat1},#
                             "category2" <- {input$cat2},#
                             "category3" <- {input$cat3},#
                             "category4" <- "Not included")#
                             # , options = list(create=TRUE, plugins = list("remove_button")))  ### <- "remove_button" isn't what I thought it was. I would also like the "create" option but I will need to link this to the table as cat1-3 are linked (otherwise new variables are not coloured or sent along for processing)#
        )#
      )     ### 2018-12-10 I'd like to have a button to add category 3#
    )#
    )  #
# Finished table, to ultimately lead to CEL download#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
userSamples$finishedtable <- NULL#
#
observeEvent(input$assignButton, {#
    userSamples$finishedtable <<- dplyr::filter(userSamples$df, category %in% c(input$cat1, input$cat2, input$cat3))#
})#
  output$finishedtable <- DT::renderDataTable({#
      if(!is.null(userSamples$finishedtable)){#
      datatable(userSamples$finishedtable,#
      options=list(#
          searching=FALSE, #
          paging=FALSE,#
          scrollX=TRUE, #
          scrollY='60vh', #
          scrollCollapse=TRUE,#
          fixedHeader=TRUE,#
          autoWidth=TRUE,#
          columnDefs=list(list(#
          targets = "_all",#
          render = JS(#
              "function(data, type, row, meta) {",#
                  "return type === 'display' && typeof data === 'string' && data.length > 100 ?",#
                  "'<span title=\"' + data + '\">' + data.substr(0, 100) + '...</span>' : data;",#
                  "}")#
          )))) %>%#
      formatStyle('category',target="row",#
      backgroundColor=styleEqual(c(input$cat1,input$cat2,input$cat3),c(rowCol[1],rowCol[2],rowCol[3]))#
  )}})#
#
rv <- reactiveValues(download_flag = 0)#
  output$report <- downloadHandler(#
      filename = function(){paste(input$downloadId,"GSM_report.csv",sep="_")},#
      content = function(file){#
          write.csv(userSamples$finishedtable,file)#
          rv$download_flag <- rv$download_flag + 1#
      })#
# Modal confirming CEL download, and processing function#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_     #
observeEvent(input$downloadCEL, {#
    if (!eset_is_uploaded){#
        userSamples$finishedtable %>% group_by(category) %>% summarise(n.gse = n_distinct(series_id)) -> gse.check#
        warning <- "Please click below to begin processing the data."#
        numCat <- length(gse.check$category)>1#
        if(length(which(gse.check$n.gse==1))!=0){#
            catAlert <- paste(gse.check$category[which(gse.check$n.gse==1)], collapse = ", ")#
            warning <- paste("WARNING: The following categories contain samples from a single experiment (GSE) and as such they will be confounded by batch effects: ",catAlert,".<br>Please proceed with caution or cancel and select additional samples to add to these categories.",sep="")#
        }#
        if(!numCat){#
            showModal(modalDialog(title="Error! A minimum of two categories are needed.","Experimental samples need to be organized into 2 or 3 categories for appropriate downstream analysis. If you are interested in only one type of sample, we suggest choosing samples to act as 'background', which will allow for differential analysis to identify which receptor genes are enriched or depleted in your sample of interest.",#
            easyClose = TRUE,#
            footer = tagList(#
                modalButton("Cancel")))) #
        } else {#
            showModal(modalDialog(title="Important! Downloading raw .CEL files from the NCBI server.",HTML(paste("June 20th, 2019<br>",warning)),#
            easyClose = TRUE,#
            footer = tagList(#
                modalButton("Cancel"),#
                actionButton("processCEL","Proceed"))))      #
        }}#
# If the flag is TRUE, confirm and process uploaded data#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_             #
    else { #
        shinyjs::disable("downloadCEL")#
        userID <<- processDataUpload(userSamples$finishedtable, userEset(), input$downloadId, input$comments, input$speciesSelection, poolUserData)#
        global$DatasetTable <<- loadUserDatasets(poolUserData)#
        showModal(modalDialog(title="Your dataset was successfully processed!","Analyse your data in the 'Load Expression Datasets' tab. You can also download a report from this page.",#
        easyClose = TRUE,#
        footer = tagList(#
            modalButton("OK"))))# modal#
    }#
  })#
#
observeEvent(input$processCEL, {#
    shinyjs::disable("processCEL")#
    userID <<- processData(userSamples$finishedtable, input$downloadId, input$comments, input$gplSelection, poolUserData)#
    global$DatasetTable <<- loadUserDatasets(poolUserData)#
    removeModal()#
    showModal(modalDialog(title="Your dataset was successfully processed!","Analyse your data in the 'Load Expression Datasets' tab. You can also download a report from this page.",#
    easyClose = TRUE,#
    footer = tagList(#
        modalButton("OK"))))# modal#
  })#
# Reset button, modal confirmation#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  observeEvent(input$linkReset, {#
      showModal(modalDialog(title="Important! Are you sure you want to reset everything?","All searches and categorized samples will be lost. This can not be undone.",#
      footer = tagList(#
          modalButton("Cancel"),#
          actionButton("buttonReset","Yes, reset."))))# modal#
      # confirm reset (all categories, sample search, gone)#
      observeEvent(input$buttonReset, {#
          shinyjs::enable("gplSelection")#
          userSamples$df <<- userSamples$df[0,]#
          reset("searchText")#
          reset("cat1")#
          reset("cat2")#
          reset("cat3")#
          reset("downloadId")#
          replaceData(proxy.search, NULL)#
          replaceData(proxy.gsm, NULL)#
          userSamples$finishedtable <<- NULL#
          removeModal()#
          updateTabsetPanel(session = session, inputId = "searchpanel", selected = "1")#
        })#
  })#
#   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-#
#  / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \#
# `-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'#
#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
## This is where the analysis begins#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
#
# Quick link from the main page#
observeEvent(input$linkLoad, {#
  updateNavbarPage(session, "receptorMain", selected="expressionPanel")#
})#
#
# Conditional nav tabs#
hideTab(inputId = "receptorMain", target = "Gene-level Expression")#
hideTab(inputId = "receptorMain", target = "Sample-level Expression")#
#
observeEvent(input$user_data,{#
    if(input$user_data!="none"){#
        showTab(inputId = "receptorMain", target = "Gene-level Expression")#
        showTab(inputId = "receptorMain", target = "Sample-level Expression")#
    } else {#
        hideTab(inputId = "receptorMain", target = "Gene-level Expression")#
        hideTab(inputId = "receptorMain", target = "Sample-level Expression")#
#
    }#
})#
#
# Load dataset#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
output$loadUserExperiments = renderUI({#
    selectizeInput(inputId="user_data",label="Select an experiment for analysis",choices=c("none"="none",split(global$DatasetTable$desc, global$DatasetTable$species)),selected="none")#
})#
observeEvent(input$user_data,{#
    id <- NULL#
    datasetToLoad <- NULL#
   if(input$user_data=="none"){#
        mapped_probes<<-NULL  ### this is going to be the key for detecting upload data#
        uploaded_features<<-NULL ## ^ this set will be used for uploaded data#
        eset<<-NULL#
        de_choices<<-NULL#
        sig_genes_lfc<<-NULL#
    }else{         #
        id <- global$DatasetTable$userID[which(global$DatasetTable$desc == input$user_data)]#
        assign(#
              x = "species", value = global$DatasetTable$species[which(global$DatasetTable$desc == input$user_data)], envir = .GlobalEnv#
           )#
           uploaded_features <<-NULL ## I think this might have to be here for non-uploaded datasets#
        datasetToLoad <- paste("./data/app_data_", id, ".rda", sep='')#
        withProgress(message="Loading dataset",value=0.2,{#
            load(datasetToLoad,envir=.GlobalEnv)#
            incProgress(0.3, message = "Loading contrasts")#
            updateCheckboxGroupInput(session, "tissues", choices = groups, selected = groups)#
            updateCheckboxGroupInput(session, "pls_tissues", choices = groups, selected = groups)#
            updateCheckboxGroupInput(session, "de", choices = de_choices, selected = de_choices[1])#
            incProgress(0.3, message ="Loading genelists")#
            updateCheckboxGroupInput(session, "genelist", label = NULL, choices = names(gene_lists[[species]]), selected = NULL, inline = FALSE)#
            incProgress(0.2, message = "Loading gene names")#
            # updateSelectInput(session, "gene", choices = all_genes[species])#
            if(is.null(uploaded_features)){#
                updateSelectInput(session, "gene", choices = mapped_probes)#
            }#
            if(is.null(mapped_probes)){#
                updateSelectInput(session, "gene", choices = uploaded_features)#
            }#
        })#
    }#
})#
#
# Download DEG#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
#
rvDEG <- reactiveValues(download_flag = 0)#
#
  # proxy.finishedtable = dataTableProxy('finishedtable')#
  output$reportDEG <- downloadHandler(#
      filename = paste(input$user_data,"DEG_report.xlsx",sep="_"),#
      # filename = paste(input$user_data,"DEG_report.csv",sep="_"),#
      content = function(file){#
          write_xlsx(sig_genes_lfc, path=file)#
          rvDEG$download_flag <- rvDEG$download_flag + 1#
      })#
#
# QC output#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
#
output$QC = renderUI({#
  validate(#
    need(input$user_data!="none","No dataset selected"),#
    need(is.null(uploaded_features), "QC data not available for uploaded read table")#
  )#
#
  id <- global$DatasetTable$userID[which(global$DatasetTable$desc == input$user_data)]#
#
  fluidRow(#
      inlineCSS(list(#
          "#norm" = c("max-width:100%","width=100%"))),#
      h4("Expression normalization (array intensity, before and after)"), #
      tags$div(class="norm",#
          tags$img(src=paste("array_normalization_", id, ".png", sep=''))#
          ),#
      h4("RNA degradation plot (probe position along transcript vs intensity)"),#
      tags$img(src=paste("probe_degradation_", id, ".png", sep='')))#
})#
# Load genes tab#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
#
  geneList = reactive({#
    if (is.null(input$genelist) && is.null(input$gene)) {#
      return(NULL)#
    }#
    genes = c()#
#
    if (!is.null(input$genelist)) {#
      for (gene in input$genelist) {#
        genes = c(genes, gene_lists[[species]][[gene]])#
      }#
    }#
#
    if (!is.null(input$gene)) {#
      genes = c(genes, input$gene)#
    }#
    return(unname(genes))#
  })#
 summary_gene_data = reactive({#
     validate(#
       need(input$user_data!="none","No dataset selected. Please select an experiment for analysis."),#
       need(geneList(), "No genes selected. Please select receptor type(s) to analyse.")#
     )#
   get_expression_summary(eset, geneList())#
 })#
# Gene outputs#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  output$genes = DT::renderDataTable({#
      validate(#
        need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
        need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'.")#
      )#
     summary_gene_data() %>% datatable() %>% #
      formatRound(2:4)#
  })#
  # single gene plot#
 output$singleGenePlot = renderPlot({#
     validate(#
       need(input$user_data!="none","No dataset selected."),#
       need(geneList(), "No genes selected."),#
       need(input$genes_rows_selected >= 1, "Please select one or more genes from the 'Average Expression' table to inspect expression by tissue type.")#
     )#
    rows = as.integer(input$genes_rows_selected)#
    genes_to_plot = summary_gene_data()$Symbol[rows]#
    gene_data = get_gene_data(eset, genes_to_plot)#
    by_gene_violplot(gene_data,tissues=groups)#
  })#
#
# Expression tab#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  observe({#
    toggle("de_choices", anim = TRUE, condition = input$de_state )#
  })#
  genesToPlot = reactive({#
    validate(#
      need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
      need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'.")#
    )#
#
    genes = geneList()#
    if(input$de_state) {#
      selected_de = input$de#
      de_lists = lapply(selected_de, function(x) { as.character(get_de_genes(genes, x, sig_genes_lfc)$Symbol) })#
      genes = Reduce(union, de_lists)#
    } #
    return(genes) #
  }) #
# Heatmap plot#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  output$expressionPlot = renderPlot({#
      validate(#
          need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
          need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
          need(input$tissues, "No tissues selected. Please choose at least one tissue to plot receptor heatmap."),#
          need(length(genesToPlot())>10, if(input$de_state){paste("Based on the genes selected in 'Load Data', ", length(genesToPlot())," genes were differentially expressed in these tissues (",paste(input$tissues, collapse = ", "), "); try unselecting that option in the side menu.",sep="")}else{paste("No genes to plot as a heatmap (minimum = 10). Try including more receptor types in 'Load Data'.")})#
    )#
    selected_tissues = input$tissues#
    sub_eset = eset[, eset$tissue %in% selected_tissues]#
    genes = gene2probe(genesToPlot(), mapped_probes)#
    cat(file=stderr(), "Preparing heatmap:\n Tissues:", paste(input$tissues, collapse = ", "), "\n gene list: ",paste(genesToPlot(),collapse=", "),"\n genes: ", paste(genes,collapse=", "),"\n")#
    gene_heatmap(sub_eset, genes, scale = "row",#
                  probe_level = input$hm_probes,#
                  gsm_show = input$hm_gsm,#
                  show_rownames = input$hm_rownames,#
                  cluster_rows = input$hm_row_cluster,#
                  cluster_cols = input$hm_col_cluster,#
                  border_color = NA)#
    })#
  output$heatmap_ui = renderUI({#
    plotOutput("expressionPlot", height = input$hm_height, width = input$hm_width)#
  })#
#
# Overall expression#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  output$overallPlot = renderPlot({#
    validate(#
        need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
        need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
    need(input$tissues, "No tissues selected. Please choose at least one tissue to plot receptor heatmap."),#
    need(length(genesToPlot())>1, if(input$de_state){paste("Based on the genes selected in 'Load Data', ", length(genesToPlot())," genes were differentially expressed in these tissues (",paste(input$tissues, collapse = ", "), "); try unselecting that option in the side menu.",sep="")}else{paste("No genes to plot. Try including more receptor types in 'Load Data'.")}) #
    )#
    gene_data = get_gene_data(eset, genesToPlot())#
    overall_expression_boxplot(gene_data, tissues = input$tissues)#
  })#
# By gene boxplots ----------------------------------------------------------------------------#
#
  output$byGenePlot = renderPlot({#
      validate(#
          need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
          need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
      need(input$tissues, "No tissues selected. Please choose at least one tissue to plot receptor heatmap."),#
      need(length(genesToPlot())>1, if(input$de_state){paste("Based on the genes selected in 'Load Data', ", length(genesToPlot())," genes were differentially expressed in these tissues (",paste(input$tissues, collapse = ", "), "); try unselecting that option in the side menu.",sep="")}else{paste("No genes to plot. Try including more receptor types in 'Load Data'.")}) #
      )    #
    gene_data = get_gene_data(eset, genesToPlot())#
    by_gene_boxplot(gene_data, tissues = input$tissues)#
  })#
  plsdaData = reactive({#
    selected_tissues = input$pls_tissues#
    if(length(selected_tissues) < 2) {#
      return(NULL)#
    }#
    sub_eset = eset[, eset$tissue %in% selected_tissues]#
    genes = gene2probe(geneList(), mapped_probes)#
    # probe = input$pls_probe#
    get_plsda(sub_eset, genes, probe = FALSE) #
  })#
#
# PCA plot ----------------------------------------------------------------------------#
  output$indPlot = renderPlot({#
    validate(#
        need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
        need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
       need(length(input$pls_tissues) >= 2, "Please select at least two tissues for a PLS-DA plot.")#
    )#
    plotIndiv(plsdaData()$result, ind.names = FALSE, group = factor(plsdaData()$tissue_grps), pch = 16, #
              col.per.group = brewer.pal(3, "Set1")[1:length(input$pls_tissues)], legend = TRUE, cex = 2, ellipse=TRUE, title="Plot of individual arrays",style="graphics")#
  })#
#
# Correlation Circle plot ----------------------------------------------------------------------------  #
  output$varPlot = renderPlot({#
      validate(#
          need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
          need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
         need(length(input$pls_tissues) >= 2, "Please select at least two tissues for a Correlation circle plot.")#
      )#
      comp = as.integer(input$pls_ncomp)#
    plotVar(plsdaData()$result, var.names = list(plsdaData()$varNames), comp.select=comp, cex = 1, overlap=FALSE, col="grey",title="Correlation circle between genes and discriminant components", style="graphics")#
  })#
#
  output$numGenesUI = renderUI({#
    numericInput("pls_num_genes", "Select number of genes to show contributions for", #
                 value = 25, min = 1, max = length(geneList()), step = 1)#
  })#
# Loadings plot ----------------------------------------------------------------------------#
  output$contribPlot = renderPlot({#
      validate(#
          need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
          need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
         need(length(input$pls_tissues) >= 2, "Please select at least two tissues for a Loadings plot.")#
      )#
    grps = plsdaData()$result$names$colnames$Y#
    ndisplay = input$pls_num_genes#
    comp = as.integer(input$pls_ncomp)#
    plotLoadings(plsdaData()$result, name.var = plsdaData()$varNames, ndisplay = ndisplay, comp = comp, contrib='max', method='mean',legend.color = catCol[1:length(grps)],title=paste("Weight of the top ", ndisplay, " genes contributing to discriminant component ", comp, sep=""),size.title=1)#
  })#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$  #
  ## Kill shinyApp when session closes#
  session$onSessionEnded(stopApp)#
#
}
g()
load("functions.R")
source("functions.R")
g()
?gather
load("~/Desktop/shiny-server/receptoR_final/data/app_data_20190731-1955.rda")
all_eset
eset
pData(eset)
ph = pData(eset) %>% tibble::rownames_to_column("Sample")
ph
ph$Sample <- colnames(exprs(eset)) # 2018-04-17 fix missing row names
ph
exprs(eset) %>% as.data.frame() %>% tibble::rownames_to_column("Symbol") %>% filter(Symbol %in% c("ssc-let-7a","ssc-let-7f"))
exprs(eset) %>% as.data.frame() %>% tibble::rownames_to_column("Symbol") %>% filter(Symbol %in% c("ssc-let-7a","ssc-let7f"))
head(exprs(eset))
exprs(eset) %>% as.data.frame() %>% tibble::rownames_to_column("Symbol") %>% filter(Symbol %in% c("ssc.let.7a","ssc.let.7f"))
exprs(eset) %>% as.data.frame() %>% tibble::rownames_to_column("Symbol") %>% filter(Symbol %in% c("ssc.let.7a","ssc.let.7f"))%>% gather(Sample, expression, starts_with("GSM"))
%>% left_join(ph, by = "Sample")
exprs(eset) %>% as.data.frame() %>% tibble::rownames_to_column("Symbol") %>% filter(Symbol %in% c("ssc.let.7a","ssc.let.7f"))%>% gather(Sample, expression, starts_with("GSM"))%>% left_join(ph, by = "Sample")
ph
eset
load("~/Documents/Retina/CNIB_TuckMacPhee/Bioinformatics/2018-04-13_app_data.rda")
eset
ph = pData(eset) %>% tibble::rownames_to_column("Sample")#
   ph$Sample <- colnames(exprs(eset)) # 2018-04-17 fix missing row names
ph
exprs(eset) %>% as.data.frame() %>% tibble::rownames_to_column("Symbol") %>% filter(Symbol %in% gene_list)) %>% gather(Sample, expression, starts_with("GSM")) %>% left_join(ph, by = "Sample")
exprs(eset) %>% as.data.frame() %>% tibble::rownames_to_column("Symbol") %>% filter(Symbol %in% c("Rho"))) %>% gather(Sample, expression, starts_with("GSM")) %>% left_join(ph, by = "Sample")
exprs(eset) %>% as.data.frame() %>% tibble::rownames_to_column("Symbol") %>% filter(Symbol %in% c("Rho","Acvr2a")) %>% gather(Sample, expression, starts_with("GSM")) %>% left_join(ph, by = "Sample")
exprs(eset) %>% #
         as.data.frame() %>% #
         tibble::rownames_to_column("probe") %>% #
         mutate(Symbol = getSYMBOL(probe, "mouse4302.db")) %>% #
         filter(Symbol %in% gene_list) %>% #
         gather(Sample, expression, starts_with("GSM")) %>% #
         left_join(ph, by = "Sample")
exprs(eset) %>% #
         as.data.frame() %>% #
         tibble::rownames_to_column("probe") %>% #
         mutate(Symbol = getSYMBOL(probe, "mouse4302.db")) %>% #
         filter(Symbol %in% c("Rho","Acvr2a")) %>% #
         gather(Sample, expression, starts_with("GSM")) %>% #
         left_join(ph, by = "Sample")
exprs(eset) %>% #
         as.data.frame() %>% #
         tibble::rownames_to_column("probe") %>% #
         mutate(Symbol = getSYMBOL(probe, "mouse4302.db")) %>% #
         filter(Symbol %in% gene_list)
gene_list<-c("Rho","Acvr2a","Gapdh")
exprs(eset) %>% #
         as.data.frame() %>% #
         tibble::rownames_to_column("probe") %>% #
         mutate(Symbol = getSYMBOL(probe, "mouse4302.db")) %>% #
         filter(Symbol %in% gene_list)
load("~/Desktop/shiny-server/receptoR_final/data/app_data_20190731-1955.rda")
eset
exprs(eset) %>% as.data.frame() %>% tibble::rownames_to_column("Symbol") %>% filter(Symbol %in% gene_list)) %>% gather(Sample, expression, starts_with("")) %>% left_join(ph, by = "Sample")
exprs(eset) %>% as.data.frame() %>% tibble::rownames_to_column("Symbol") %>% filter(Symbol %in% gene_list) %>% gather(Sample, expression, starts_with("")) %>% left_join(ph, by = "Sample")
exprs(eset) %>% as.data.frame() %>% tibble::rownames_to_column("Symbol") %>% filter(Symbol %in% gene_list) %>% gather(Sample, expression, starts_with("c")) %>% left_join(ph, by = "Sample")
exprs(eset) %>% as.data.frame() %>% tibble::rownames_to_column("Symbol") %>% filter(Symbol %in% gene_list) %>% gather(Sample, expression, -one_of(c("Sample","expression","tissue","Symbol"))) %>% left_join(ph, by = "Sample")
gene_list<-"ssc.let.7f"
exprs(eset) %>% as.data.frame() %>% tibble::rownames_to_column("Symbol") %>% filter(Symbol %in% gene_list) %>% gather(Sample, expression, -one_of(c("Sample","expression","tissue","Symbol"))) %>% left_join(ph, by = "Sample")
ph = pData(eset) %>% tibble::rownames_to_column("Sample")#
   ph$Sample <- colnames(exprs(eset)) # 2018-04-17 fix missing row names
ph
exprs(eset) %>% as.data.frame() %>% tibble::rownames_to_column("Symbol") %>% filter(Symbol %in% gene_list) %>% gather(Sample, expression, -one_of(c("Sample","expression","tissue","Symbol"))) %>% left_join(ph, by = "Sample")
source("functions.R")
g()
mapped_probes
species
if(species=='human' & is_null(mapped_probes))
{print("yo")}
if(species=='human' & is.null(mapped_probes)){print("yo")}
if(species=='human' & !is.null(mapped_probes)){print("yo")}
source("functions.R")
source("functions.R")
source("functions.R")
source("functions.R")
source("functions.R")
source("functions.R")
one_of()
source("functions.R")
g()
eset
exprs(eset)
pData(eset)
server <- function(input, output, session) {#
#   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-#
#  / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \#
# `-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
## This is the database search begins#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
#
# Quick link from the main page#
observeEvent(input$linkSearch, {#
  updateNavbarPage(session, "receptorMain", selected="searchPanel")#
})#
# Set up colour environment#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  catCol <- brewer.pal(3, "Set1")#
  rowCol <-desat(catCol)#
  userID <- NULL#
# Search functions #
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  searchGSM <- eventReactive(input$searchButton, {#
      if(input$gplSelection=='human'){#
          sql<-"SELECT * FROM appgsm WHERE description MATCH ?id1 AND gpl LIKE 'GPL570';"#
      } else {#
          sql<-"SELECT * FROM appgsm WHERE description MATCH ?id1 AND gpl LIKE 'GPL1261';"#
      }#
      query<-sqlInterpolate(poolGEO,sql,id1=input$searchText)#
      queryGSM<-dbGetQuery(poolGEO,query)#
      shinyjs::disable("gplSelection")#
      return(queryGSM)#
  })#
#
  output$searchResultsGSM <- DT::renderDataTable({#
          searchGSM()}, extensions = 'Buttons', options=list(#
              dom = 'Bfrtip',#
              buttons = list(list(extend = 'colvis')),#
              searching=TRUE, #
              paging=FALSE,#
              scrollX=TRUE, #
              scrollY='60vh', #
              scrollCollapse=TRUE,#
              fixedHeader=TRUE,#
              autoWidth=TRUE,#
              columnDefs=list(list(#
              targets = "_all",#
              render = JS(#
                  "function(data, type, row, meta) {",#
                      "return type === 'display' && typeof data === 'string' && data.length > 100 ?",#
                      "'<span title=\"' + data + '\">' + data.substr(0, 100) + '...</span>' : data;",#
                      "}") #
                      )))) ## typeof data needs to be a string, as a "NA" converted to JS "NULL" breaks things#
#
# Set up tables to store user-selected data#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
#
  proxy.search = dataTableProxy('searchResultsGSM')#
#
  ## Set up reactive table to store experimental samples#
  userSamples <- reactiveValues()#
  userSamples$df <- data.frame()#
  # 2019-07-31 Upload user data#
  # Upload read count table#
  #_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  userEset <- reactive({#
      inFile <- input$eset_upload#
      if (is.null(inFile))#
          return(NULL)#
      df<- read.csv(inFile$datapath,header=TRUE,sep=",")#
      return(df)#
  })#
  output$upload_table <- DT::renderDataTable({#
      df <- userEset()#
      datatable(df, options=list(#
          searching=TRUE, #
          paging=TRUE,#
          scrollX=TRUE, #
          scrollY='25vh',#
          scrollCollapse=TRUE,#
          fixedHeader=TRUE,#
          autoWidth=FALSE))#
      })#
  observeEvent(input$uploadButton, {#
      showModal(modalDialog(title="Select your data to upload for analysis","Make sure things look right before proceeding. There is the ability to add some options here, if I want to make it slightly more flexible (e.g. separator, header).", radioButtons("speciesSelection", "Choose species:", choices = c("Mouse" = "mouse", "Human" = "human")),#
          fileInput('eset_upload','Choose file to upload', accept = c('text/csv','text/comma-separated-values','.csv')),#
          DT::dataTableOutput("upload_table"),#
          easyClose = TRUE,#
          footer = tagList(#
              actionButton("uploaded","Upload read table"))))#
  })#
  # 'uploaded file' flag#
  eset_is_uploaded = FALSE#
  observeEvent(input$uploaded, {#
      eset_is_uploaded <<- TRUE#
      removeModal()#
      uploadSamples <- userEset()#
      tableRows <- ncol(uploadSamples)#
      userSamples$df <<- data.frame(samples = colnames(uploadSamples), category = rep("Not yet assigned", tableRows), features = rep(nrow(uploadSamples), tableRows), description = rep("User uploaded samples",tableRows))#
      updateTabsetPanel(session = session, inputId = "searchpanel", selected = "2")  ## jump to 'Assign' tab#
  })#
#
  observeEvent(input$clear_upload, {#
      eset_is_uploaded <<- FALSE#
      userSamples$df <<- data.frame()#
      removeModal()#
  })#
# Add sample (array) record to the current experiment #
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  observeEvent(input$addButton, {#
      if(eset_is_uploaded){#
          showModal(modalDialog(title = "Alert! Uploaded data detected.", "Continuing with public arrays will erase uploaded dataset.",#
              easyClose = TRUE, footer = tagList(actionButton("clear_upload","Proceed"), modalButton("Cancel"))))#
      } else {#
      gsm_selected <- searchGSM()[input$searchResultsGSM_rows_selected,]#
      gsm_selected$category <- rep("Not yet assigned", nrow(gsm_selected))#
      userSamples$df <<- rbind(userSamples$df,gsm_selected)#
      proxy.search %>% selectRows(NULL)#
      updateTabsetPanel(session = session, inputId = "searchpanel", selected = "2")#
      }#
  })#
#
# Assign categories to each sample (GSM)#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  observeEvent(input$assignButton, {#
        userSamples$df[,"category"] <<- as.character(userSamples$df[,"category"])#
        userSamples$df[input$gsm_table_rows_selected,"category"] <<- input$selection#
        userSamples$df[,"category"] <<- as.factor(userSamples$df[,"category"])#
  })      #
  output$gsm_table <- DT::renderDataTable({#
      if(input$assignButton == 0){#
         return (datatable(userSamples$df, extensions = 'Buttons', options=list(#
               dom = 'Bfrtip',#
               buttons = list(list(extend = 'colvis')),#
               searching=TRUE, #
               paging=FALSE,#
               scrollX=TRUE, #
               scrollY='60vh', #
               scrollCollapse=TRUE,#
               fixedHeader=TRUE,#
               autoWidth=TRUE,#
               columnDefs=list(list(#
             targets = "_all",#
             render = JS(#
                 "function(data, type, row, meta) {",#
                     "return type === 'display' && typeof data === 'string' && data.length > 100 ?",#
                     "'<span title=\"' + data + '\">' + data.substr(0, 100) + '...</span>' : data;",#
                     "}")#
                     )))))#
      } else {#
         return (datatable(userSamples$df, extensions = 'Buttons', options=list(#
             dom = 'Bfrtip',#
             buttons = list(list(extend = 'colvis')),#
             searching=TRUE, #
             paging=FALSE,#
             scrollX=TRUE, #
             scrollY='60vh', #
             scrollCollapse=TRUE,#
             fixedHeader=TRUE,#
             autoWidth=TRUE,#
             columnDefs=list(list(#
             targets = "_all",#
             render = JS(#
                 "function(data, type, row, meta) {",#
                     "return type === 'display' && typeof data === 'string' && data.length > 100 ?",#
                     "'<span title=\"' + data + '\">' + data.substr(0, 100) + '...</span>' : data;",#
                     "}")#
                     )))) %>%#
                     formatStyle('category', target="row", backgroundColor=styleEqual(c(input$cat1, input$cat2, input$cat3), c(rowCol[1], rowCol[2], rowCol[3]))))#
      }#
  })#
  proxy.gsm = dataTableProxy('gsm_table')#
  observeEvent(input$assignButton,{#
      proxy.gsm %>% selectRows(NULL)#
  }) #
  ## UI output#
#
    output$categorySelect <- renderUI(#
      fluidRow(#
        column(12,#
               selectizeInput("selection", "Select a Category",#
                           c("category1" <- {input$cat1},#
                             "category2" <- {input$cat2},#
                             "category3" <- {input$cat3},#
                             "category4" <- "Not included")#
                             # , options = list(create=TRUE, plugins = list("remove_button")))  ### <- "remove_button" isn't what I thought it was. I would also like the "create" option but I will need to link this to the table as cat1-3 are linked (otherwise new variables are not coloured or sent along for processing)#
        )#
      )     ### 2018-12-10 I'd like to have a button to add category 3#
    )#
    )  #
# Finished table, to ultimately lead to CEL download#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
userSamples$finishedtable <- NULL#
#
observeEvent(input$assignButton, {#
    userSamples$finishedtable <<- dplyr::filter(userSamples$df, category %in% c(input$cat1, input$cat2, input$cat3))#
})#
  output$finishedtable <- DT::renderDataTable({#
      if(!is.null(userSamples$finishedtable)){#
      datatable(userSamples$finishedtable,#
      options=list(#
          searching=FALSE, #
          paging=FALSE,#
          scrollX=TRUE, #
          scrollY='60vh', #
          scrollCollapse=TRUE,#
          fixedHeader=TRUE,#
          autoWidth=TRUE,#
          columnDefs=list(list(#
          targets = "_all",#
          render = JS(#
              "function(data, type, row, meta) {",#
                  "return type === 'display' && typeof data === 'string' && data.length > 100 ?",#
                  "'<span title=\"' + data + '\">' + data.substr(0, 100) + '...</span>' : data;",#
                  "}")#
          )))) %>%#
      formatStyle('category',target="row",#
      backgroundColor=styleEqual(c(input$cat1,input$cat2,input$cat3),c(rowCol[1],rowCol[2],rowCol[3]))#
  )}})#
#
rv <- reactiveValues(download_flag = 0)#
  output$report <- downloadHandler(#
      filename = function(){paste(input$downloadId,"GSM_report.csv",sep="_")},#
      content = function(file){#
          write.csv(userSamples$finishedtable,file)#
          rv$download_flag <- rv$download_flag + 1#
      })#
# Modal confirming CEL download, and processing function#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_     #
observeEvent(input$downloadCEL, {#
    if (!eset_is_uploaded){#
        userSamples$finishedtable %>% group_by(category) %>% summarise(n.gse = n_distinct(series_id)) -> gse.check#
        warning <- "Please click below to begin processing the data."#
        numCat <- length(gse.check$category)>1#
        if(length(which(gse.check$n.gse==1))!=0){#
            catAlert <- paste(gse.check$category[which(gse.check$n.gse==1)], collapse = ", ")#
            warning <- paste("WARNING: The following categories contain samples from a single experiment (GSE) and as such they will be confounded by batch effects: ",catAlert,".<br>Please proceed with caution or cancel and select additional samples to add to these categories.",sep="")#
        }#
        if(!numCat){#
            showModal(modalDialog(title="Error! A minimum of two categories are needed.","Experimental samples need to be organized into 2 or 3 categories for appropriate downstream analysis. If you are interested in only one type of sample, we suggest choosing samples to act as 'background', which will allow for differential analysis to identify which receptor genes are enriched or depleted in your sample of interest.",#
            easyClose = TRUE,#
            footer = tagList(#
                modalButton("Cancel")))) #
        } else {#
            showModal(modalDialog(title="Important! Downloading raw .CEL files from the NCBI server.",HTML(paste("June 20th, 2019<br>",warning)),#
            easyClose = TRUE,#
            footer = tagList(#
                modalButton("Cancel"),#
                actionButton("processCEL","Proceed"))))      #
        }}#
# If the flag is TRUE, confirm and process uploaded data#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_             #
    else { #
        shinyjs::disable("downloadCEL")#
        userID <<- processDataUpload(userSamples$finishedtable, userEset(), input$downloadId, input$comments, input$speciesSelection, poolUserData)#
        global$DatasetTable <<- loadUserDatasets(poolUserData)#
        showModal(modalDialog(title="Your dataset was successfully processed!","Analyse your data in the 'Load Expression Datasets' tab. You can also download a report from this page.",#
        easyClose = TRUE,#
        footer = tagList(#
            modalButton("OK"))))# modal#
    }#
  })#
#
observeEvent(input$processCEL, {#
    shinyjs::disable("processCEL")#
    userID <<- processData(userSamples$finishedtable, input$downloadId, input$comments, input$gplSelection, poolUserData)#
    global$DatasetTable <<- loadUserDatasets(poolUserData)#
    removeModal()#
    showModal(modalDialog(title="Your dataset was successfully processed!","Analyse your data in the 'Load Expression Datasets' tab. You can also download a report from this page.",#
    easyClose = TRUE,#
    footer = tagList(#
        modalButton("OK"))))# modal#
  })#
# Reset button, modal confirmation#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  observeEvent(input$linkReset, {#
      showModal(modalDialog(title="Important! Are you sure you want to reset everything?","All searches and categorized samples will be lost. This can not be undone.",#
      footer = tagList(#
          modalButton("Cancel"),#
          actionButton("buttonReset","Yes, reset."))))# modal#
      # confirm reset (all categories, sample search, gone)#
      observeEvent(input$buttonReset, {#
          shinyjs::enable("gplSelection")#
          userSamples$df <<- userSamples$df[0,]#
          reset("searchText")#
          reset("cat1")#
          reset("cat2")#
          reset("cat3")#
          reset("downloadId")#
          replaceData(proxy.search, NULL)#
          replaceData(proxy.gsm, NULL)#
          userSamples$finishedtable <<- NULL#
          removeModal()#
          updateTabsetPanel(session = session, inputId = "searchpanel", selected = "1")#
        })#
  })#
#   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-#
#  / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \#
# `-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'#
#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
## This is where the analysis begins#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
#
# Quick link from the main page#
observeEvent(input$linkLoad, {#
  updateNavbarPage(session, "receptorMain", selected="expressionPanel")#
})#
#
# Conditional nav tabs#
hideTab(inputId = "receptorMain", target = "Gene-level Expression")#
hideTab(inputId = "receptorMain", target = "Sample-level Expression")#
#
observeEvent(input$user_data,{#
    if(input$user_data!="none"){#
        showTab(inputId = "receptorMain", target = "Gene-level Expression")#
        showTab(inputId = "receptorMain", target = "Sample-level Expression")#
    } else {#
        hideTab(inputId = "receptorMain", target = "Gene-level Expression")#
        hideTab(inputId = "receptorMain", target = "Sample-level Expression")#
#
    }#
})#
#
# Load dataset#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
output$loadUserExperiments = renderUI({#
    selectizeInput(inputId="user_data",label="Select an experiment for analysis",choices=c("none"="none",split(global$DatasetTable$desc, global$DatasetTable$species)),selected="none")#
})#
observeEvent(input$user_data,{#
    id <- NULL#
    datasetToLoad <- NULL#
   if(input$user_data=="none"){#
        mapped_probes<<-NULL  ### this is going to be the key for detecting upload data#
        uploaded_features<<-NULL ## ^ this set will be used for uploaded data#
        eset<<-NULL#
        de_choices<<-NULL#
        sig_genes_lfc<<-NULL#
    }else{         #
        id <- global$DatasetTable$userID[which(global$DatasetTable$desc == input$user_data)]#
        assign(#
              x = "species", value = global$DatasetTable$species[which(global$DatasetTable$desc == input$user_data)], envir = .GlobalEnv#
           )#
           uploaded_features <<-NULL ## I think this might have to be here for non-uploaded datasets#
        datasetToLoad <- paste("./data/app_data_", id, ".rda", sep='')#
        withProgress(message="Loading dataset",value=0.2,{#
            load(datasetToLoad,envir=.GlobalEnv)#
            incProgress(0.3, message = "Loading contrasts")#
            updateCheckboxGroupInput(session, "tissues", choices = groups, selected = groups)#
            updateCheckboxGroupInput(session, "pls_tissues", choices = groups, selected = groups)#
            updateCheckboxGroupInput(session, "de", choices = de_choices, selected = de_choices[1])#
            incProgress(0.3, message ="Loading genelists")#
            updateCheckboxGroupInput(session, "genelist", label = NULL, choices = names(gene_lists[[species]]), selected = NULL, inline = FALSE)#
            incProgress(0.2, message = "Loading gene names")#
            # updateSelectInput(session, "gene", choices = all_genes[species])#
            if(is.null(uploaded_features)){#
                updateSelectInput(session, "gene", choices = mapped_probes)#
            }#
            if(is.null(mapped_probes)){#
                updateSelectInput(session, "gene", choices = make.names(uploaded_features))#
            }#
        })#
    }#
})#
#
# Download DEG#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
#
rvDEG <- reactiveValues(download_flag = 0)#
#
  # proxy.finishedtable = dataTableProxy('finishedtable')#
  output$reportDEG <- downloadHandler(#
      filename = paste(input$user_data,"DEG_report.xlsx",sep="_"),#
      # filename = paste(input$user_data,"DEG_report.csv",sep="_"),#
      content = function(file){#
          write_xlsx(sig_genes_lfc, path=file)#
          rvDEG$download_flag <- rvDEG$download_flag + 1#
      })#
#
# QC output#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
#
output$QC = renderUI({#
  validate(#
    need(input$user_data!="none","No dataset selected"),#
    need(is.null(uploaded_features), "QC data not available for uploaded read table")#
  )#
#
  id <- global$DatasetTable$userID[which(global$DatasetTable$desc == input$user_data)]#
#
  fluidRow(#
      inlineCSS(list(#
          "#norm" = c("max-width:100%","width=100%"))),#
      h4("Expression normalization (array intensity, before and after)"), #
      tags$div(class="norm",#
          tags$img(src=paste("array_normalization_", id, ".png", sep=''))#
          ),#
      h4("RNA degradation plot (probe position along transcript vs intensity)"),#
      tags$img(src=paste("probe_degradation_", id, ".png", sep='')))#
})#
# Load genes tab#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
#
  geneList = reactive({#
    if (is.null(input$genelist) && is.null(input$gene)) {#
      return(NULL)#
    }#
    genes = c()#
#
    if (!is.null(input$genelist)) {#
      for (gene in input$genelist) {#
        genes = c(genes, gene_lists[[species]][[gene]])#
      }#
    }#
#
    if (!is.null(input$gene)) {#
      genes = c(genes, input$gene)#
    }#
    return(unname(genes))#
  })#
 summary_gene_data = reactive({#
     validate(#
       need(input$user_data!="none","No dataset selected. Please select an experiment for analysis."),#
       need(geneList(), "No genes selected. Please select receptor type(s) to analyse.")#
     )#
   get_expression_summary(eset, geneList())#
 })#
# Gene outputs#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  output$genes = DT::renderDataTable({#
      validate(#
        need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
        need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'.")#
      )#
     summary_gene_data() %>% datatable() %>% #
      formatRound(2:4)#
  })#
  # single gene plot#
 output$singleGenePlot = renderPlot({#
     validate(#
       need(input$user_data!="none","No dataset selected."),#
       need(geneList(), "No genes selected."),#
       need(input$genes_rows_selected >= 1, "Please select one or more genes from the 'Average Expression' table to inspect expression by tissue type.")#
     )#
    rows = as.integer(input$genes_rows_selected)#
    genes_to_plot = summary_gene_data()$Symbol[rows]#
    gene_data = get_gene_data(eset, genes_to_plot)#
    by_gene_violplot(gene_data,tissues=groups)#
  })#
#
# Expression tab#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  observe({#
    toggle("de_choices", anim = TRUE, condition = input$de_state )#
  })#
  genesToPlot = reactive({#
    validate(#
      need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
      need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'.")#
    )#
#
    genes = geneList()#
    if(input$de_state) {#
      selected_de = input$de#
      de_lists = lapply(selected_de, function(x) { as.character(get_de_genes(genes, x, sig_genes_lfc)$Symbol) })#
      genes = Reduce(union, de_lists)#
    } #
    return(genes) #
  }) #
# Heatmap plot#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  output$expressionPlot = renderPlot({#
      validate(#
          need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
          need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
          need(input$tissues, "No tissues selected. Please choose at least one tissue to plot receptor heatmap."),#
          need(length(genesToPlot())>10, if(input$de_state){paste("Based on the genes selected in 'Load Data', ", length(genesToPlot())," genes were differentially expressed in these tissues (",paste(input$tissues, collapse = ", "), "); try unselecting that option in the side menu.",sep="")}else{paste("No genes to plot as a heatmap (minimum = 10). Try including more receptor types in 'Load Data'.")})#
    )#
    selected_tissues = input$tissues#
    sub_eset = eset[, eset$tissue %in% selected_tissues]#
    genes = gene2probe(genesToPlot(), mapped_probes)#
    cat(file=stderr(), "Preparing heatmap:\n Tissues:", paste(input$tissues, collapse = ", "), "\n gene list: ",paste(genesToPlot(),collapse=", "),"\n genes: ", paste(genes,collapse=", "),"\n")#
    gene_heatmap(sub_eset, genes, scale = "row",#
                  probe_level = input$hm_probes,#
                  gsm_show = input$hm_gsm,#
                  show_rownames = input$hm_rownames,#
                  cluster_rows = input$hm_row_cluster,#
                  cluster_cols = input$hm_col_cluster,#
                  border_color = NA)#
    })#
  output$heatmap_ui = renderUI({#
    plotOutput("expressionPlot", height = input$hm_height, width = input$hm_width)#
  })#
#
# Overall expression#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  output$overallPlot = renderPlot({#
    validate(#
        need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
        need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
    need(input$tissues, "No tissues selected. Please choose at least one tissue to plot receptor heatmap."),#
    need(length(genesToPlot())>1, if(input$de_state){paste("Based on the genes selected in 'Load Data', ", length(genesToPlot())," genes were differentially expressed in these tissues (",paste(input$tissues, collapse = ", "), "); try unselecting that option in the side menu.",sep="")}else{paste("No genes to plot. Try including more receptor types in 'Load Data'.")}) #
    )#
    gene_data = get_gene_data(eset, genesToPlot())#
    overall_expression_boxplot(gene_data, tissues = input$tissues)#
  })#
# By gene boxplots ----------------------------------------------------------------------------#
#
  output$byGenePlot = renderPlot({#
      validate(#
          need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
          need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
      need(input$tissues, "No tissues selected. Please choose at least one tissue to plot receptor heatmap."),#
      need(length(genesToPlot())>1, if(input$de_state){paste("Based on the genes selected in 'Load Data', ", length(genesToPlot())," genes were differentially expressed in these tissues (",paste(input$tissues, collapse = ", "), "); try unselecting that option in the side menu.",sep="")}else{paste("No genes to plot. Try including more receptor types in 'Load Data'.")}) #
      )    #
    gene_data = get_gene_data(eset, genesToPlot())#
    by_gene_boxplot(gene_data, tissues = input$tissues)#
  })#
  plsdaData = reactive({#
    selected_tissues = input$pls_tissues#
    if(length(selected_tissues) < 2) {#
      return(NULL)#
    }#
    sub_eset = eset[, eset$tissue %in% selected_tissues]#
    genes = gene2probe(geneList(), mapped_probes)#
    # probe = input$pls_probe#
    get_plsda(sub_eset, genes, probe = FALSE) #
  })#
#
# PCA plot ----------------------------------------------------------------------------#
  output$indPlot = renderPlot({#
    validate(#
        need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
        need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
       need(length(input$pls_tissues) >= 2, "Please select at least two tissues for a PLS-DA plot.")#
    )#
    plotIndiv(plsdaData()$result, ind.names = FALSE, group = factor(plsdaData()$tissue_grps), pch = 16, #
              col.per.group = brewer.pal(3, "Set1")[1:length(input$pls_tissues)], legend = TRUE, cex = 2, ellipse=TRUE, title="Plot of individual arrays",style="graphics")#
  })#
#
# Correlation Circle plot ----------------------------------------------------------------------------  #
  output$varPlot = renderPlot({#
      validate(#
          need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
          need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
         need(length(input$pls_tissues) >= 2, "Please select at least two tissues for a Correlation circle plot.")#
      )#
      comp = as.integer(input$pls_ncomp)#
    plotVar(plsdaData()$result, var.names = list(plsdaData()$varNames), comp.select=comp, cex = 1, overlap=FALSE, col="grey",title="Correlation circle between genes and discriminant components", style="graphics")#
  })#
#
  output$numGenesUI = renderUI({#
    numericInput("pls_num_genes", "Select number of genes to show contributions for", #
                 value = 25, min = 1, max = length(geneList()), step = 1)#
  })#
# Loadings plot ----------------------------------------------------------------------------#
  output$contribPlot = renderPlot({#
      validate(#
          need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
          need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
         need(length(input$pls_tissues) >= 2, "Please select at least two tissues for a Loadings plot.")#
      )#
    grps = plsdaData()$result$names$colnames$Y#
    ndisplay = input$pls_num_genes#
    comp = as.integer(input$pls_ncomp)#
    plotLoadings(plsdaData()$result, name.var = plsdaData()$varNames, ndisplay = ndisplay, comp = comp, contrib='max', method='mean',legend.color = catCol[1:length(grps)],title=paste("Weight of the top ", ndisplay, " genes contributing to discriminant component ", comp, sep=""),size.title=1)#
  })#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$  #
  ## Kill shinyApp when session closes#
  session$onSessionEnded(stopApp)#
#
}
g()
eset
get_gene_data(eset,gene_list)
uploaded_features
ph = pData(eset) %>% tibble::rownames_to_column("Sample")
ph
ph$Sample <- colnames(exprs(eset)) # 2018-04-17 fix missing row names#
   if(!is.null(uploaded_features)){#
       keepCols <- c("Sample","expression","tissue","Symbol")#
       exprs(eset) %>% as.data.frame() %>% tibble::rownames_to_column("Symbol") %>% filter(Symbol %in% gene_list) %>% gather(Sample, expression, -one_of(keepCols)) %>% left_join(ph, by = "Sample")}
ph$Sample <- colnames(exprs(eset)) # 2018-04-17 fix missing row names#
   if(!is.null(uploaded_features)){#
       keepCols <- c("Sample","expression","tissue","Symbol")#
       exprs(eset) %>% as.data.frame() %>% tibble::rownames_to_column("Symbol") %>% filter(Symbol %in% gene_list) %>% gather(Sample, expression, -one_of(keepCols)) %>% left_join(ph, by = "Sample")} -> ggd
ggd
ggd$Symbol
get_gene_data(eset,gene_list)->ano
ano
gene_list
eset
get_gene_data(eset,c("ssc.let.7a","ssc.miR.378"))
source("functions.R")
get_gene_data(eset,c("ssc.let.7a","ssc.miR.378"))
source("functions.R")
get_gene_data(eset,c("ssc.let.7a","ssc.miR.378"))
source("functions.R")
get_gene_data(eset,c("ssc.let.7a","ssc.miR.378"))
source("functions.R")
get_gene_data(eset,c("ssc.let.7a","ssc.miR.378"))
source("functions.R")
get_gene_data(eset,c("ssc.let.7a","ssc.miR.378"))
source("functions.R")
get_gene_data(eset,c("ssc.let.7a","ssc.miR.378"))
get_gene_data(eset,c("ssc.let.7a","ssc.miR.378"))
source("functions.R")
get_gene_data(eset,c("ssc.let.7a","ssc.miR.378"))
get_gene_data
get_gene_data(eset,c("ssc.let.7a","ssc.miR.378"))
source("functions.R")
get_gene_data(eset,c("ssc.let.7a","ssc.miR.378"))
get_gene_data(eset,c("ssc.let.7a","ssc.miR.378"))->te
te
source("functions.R")
get_gene_data(eset,c("ssc.let.7a","ssc.miR.378"))->te
te
g()
g()
sig_genes_lfc
sig_genes_lfc[[cytoplasmic-buclear]]
sig_genes_lfc[[cytoplasmic-nuclear]]
sig_genes_lfc[['cytoplasmic-nuclear']]
sig_genes_lfc[[de_choice]] %>% tibble::rownames_to_column("Symbol") %>% filter(Symbol %in% gene_list)}
sig_genes_lfc[[de_choice]] %>% tibble::rownames_to_column("Symbol") %>% filter(Symbol %in% gene_list)
sig_genes_lfc[['cytoplasmic-nuclear']] %>% tibble::rownames_to_column("Symbol") %>% filter(Symbol %in% gene_list)
gene_list<-c(gene_list,"ssc.miR-19a")
gene_list<-c(gene_list,"ssc.miR.19a")
sig_genes_lfc[['cytoplasmic-nuclear']] %>% tibble::rownames_to_column("Symbol") %>% filter(Symbol %in% gene_list)
g()
g()
de_choice = 'cytoplasmic-nuclear'
get_de_genes
get_de_genes(gene_list,de_choice,sig_genes_lfc)
is.null(uploaded_features)
source("functions.R")
get_de_genes(gene_list,de_choice,sig_genes_lfc)
get_de_genes(gene_list,de_choice,sig_genes_lfc)$Symbol
g()
g()
server <- function(input, output, session) {#
#   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-#
#  / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \#
# `-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
## This is the database search begins#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
#
# Quick link from the main page#
observeEvent(input$linkSearch, {#
  updateNavbarPage(session, "receptorMain", selected="searchPanel")#
})#
# Set up colour environment#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  catCol <- brewer.pal(3, "Set1")#
  rowCol <-desat(catCol)#
  userID <- NULL#
# Search functions #
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  searchGSM <- eventReactive(input$searchButton, {#
      if(input$gplSelection=='human'){#
          sql<-"SELECT * FROM appgsm WHERE description MATCH ?id1 AND gpl LIKE 'GPL570';"#
      } else {#
          sql<-"SELECT * FROM appgsm WHERE description MATCH ?id1 AND gpl LIKE 'GPL1261';"#
      }#
      query<-sqlInterpolate(poolGEO,sql,id1=input$searchText)#
      queryGSM<-dbGetQuery(poolGEO,query)#
      shinyjs::disable("gplSelection")#
      return(queryGSM)#
  })#
#
  output$searchResultsGSM <- DT::renderDataTable({#
          searchGSM()}, extensions = 'Buttons', options=list(#
              dom = 'Bfrtip',#
              buttons = list(list(extend = 'colvis')),#
              searching=TRUE, #
              paging=FALSE,#
              scrollX=TRUE, #
              scrollY='60vh', #
              scrollCollapse=TRUE,#
              fixedHeader=TRUE,#
              autoWidth=TRUE,#
              columnDefs=list(list(#
              targets = "_all",#
              render = JS(#
                  "function(data, type, row, meta) {",#
                      "return type === 'display' && typeof data === 'string' && data.length > 100 ?",#
                      "'<span title=\"' + data + '\">' + data.substr(0, 100) + '...</span>' : data;",#
                      "}") #
                      )))) ## typeof data needs to be a string, as a "NA" converted to JS "NULL" breaks things#
#
# Set up tables to store user-selected data#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
#
  proxy.search = dataTableProxy('searchResultsGSM')#
#
  ## Set up reactive table to store experimental samples#
  userSamples <- reactiveValues()#
  userSamples$df <- data.frame()#
  # 2019-07-31 Upload user data#
  # Upload read count table#
  #_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  userEset <- reactive({#
      inFile <- input$eset_upload#
      if (is.null(inFile))#
          return(NULL)#
      df<- read.csv(inFile$datapath,header=TRUE,sep=",")#
      return(df)#
  })#
  output$upload_table <- DT::renderDataTable({#
      df <- userEset()#
      datatable(df, options=list(#
          searching=TRUE, #
          paging=TRUE,#
          scrollX=TRUE, #
          scrollY='25vh',#
          scrollCollapse=TRUE,#
          fixedHeader=TRUE,#
          autoWidth=FALSE))#
      })#
  observeEvent(input$uploadButton, {#
      showModal(modalDialog(title="Select your data to upload for analysis","Make sure things look right before proceeding. There is the ability to add some options here, if I want to make it slightly more flexible (e.g. separator, header).", radioButtons("speciesSelection", "Choose species:", choices = c("Mouse" = "mouse", "Human" = "human")),#
          fileInput('eset_upload','Choose file to upload', accept = c('text/csv','text/comma-separated-values','.csv')),#
          DT::dataTableOutput("upload_table"),#
          easyClose = TRUE,#
          footer = tagList(#
              actionButton("uploaded","Upload read table"))))#
  })#
  # 'uploaded file' flag#
  eset_is_uploaded = FALSE#
  observeEvent(input$uploaded, {#
      eset_is_uploaded <<- TRUE#
      removeModal()#
      uploadSamples <- userEset()#
      tableRows <- ncol(uploadSamples)#
      userSamples$df <<- data.frame(samples = colnames(uploadSamples), category = rep("Not yet assigned", tableRows), features = rep(nrow(uploadSamples), tableRows), description = rep("User uploaded samples",tableRows))#
      updateTabsetPanel(session = session, inputId = "searchpanel", selected = "2")  ## jump to 'Assign' tab#
  })#
#
  observeEvent(input$clear_upload, {#
      eset_is_uploaded <<- FALSE#
      userSamples$df <<- data.frame()#
      removeModal()#
  })#
# Add sample (array) record to the current experiment #
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  observeEvent(input$addButton, {#
      if(eset_is_uploaded){#
          showModal(modalDialog(title = "Alert! Uploaded data detected.", "Continuing with public arrays will erase uploaded dataset.",#
              easyClose = TRUE, footer = tagList(actionButton("clear_upload","Proceed"), modalButton("Cancel"))))#
      } else {#
      gsm_selected <- searchGSM()[input$searchResultsGSM_rows_selected,]#
      gsm_selected$category <- rep("Not yet assigned", nrow(gsm_selected))#
      userSamples$df <<- rbind(userSamples$df,gsm_selected)#
      proxy.search %>% selectRows(NULL)#
      updateTabsetPanel(session = session, inputId = "searchpanel", selected = "2")#
      }#
  })#
#
# Assign categories to each sample (GSM)#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  observeEvent(input$assignButton, {#
        userSamples$df[,"category"] <<- as.character(userSamples$df[,"category"])#
        userSamples$df[input$gsm_table_rows_selected,"category"] <<- input$selection#
        userSamples$df[,"category"] <<- as.factor(userSamples$df[,"category"])#
  })      #
  output$gsm_table <- DT::renderDataTable({#
      if(input$assignButton == 0){#
         return (datatable(userSamples$df, extensions = 'Buttons', options=list(#
               dom = 'Bfrtip',#
               buttons = list(list(extend = 'colvis')),#
               searching=TRUE, #
               paging=FALSE,#
               scrollX=TRUE, #
               scrollY='60vh', #
               scrollCollapse=TRUE,#
               fixedHeader=TRUE,#
               autoWidth=TRUE,#
               columnDefs=list(list(#
             targets = "_all",#
             render = JS(#
                 "function(data, type, row, meta) {",#
                     "return type === 'display' && typeof data === 'string' && data.length > 100 ?",#
                     "'<span title=\"' + data + '\">' + data.substr(0, 100) + '...</span>' : data;",#
                     "}")#
                     )))))#
      } else {#
         return (datatable(userSamples$df, extensions = 'Buttons', options=list(#
             dom = 'Bfrtip',#
             buttons = list(list(extend = 'colvis')),#
             searching=TRUE, #
             paging=FALSE,#
             scrollX=TRUE, #
             scrollY='60vh', #
             scrollCollapse=TRUE,#
             fixedHeader=TRUE,#
             autoWidth=TRUE,#
             columnDefs=list(list(#
             targets = "_all",#
             render = JS(#
                 "function(data, type, row, meta) {",#
                     "return type === 'display' && typeof data === 'string' && data.length > 100 ?",#
                     "'<span title=\"' + data + '\">' + data.substr(0, 100) + '...</span>' : data;",#
                     "}")#
                     )))) %>%#
                     formatStyle('category', target="row", backgroundColor=styleEqual(c(input$cat1, input$cat2, input$cat3), c(rowCol[1], rowCol[2], rowCol[3]))))#
      }#
  })#
  proxy.gsm = dataTableProxy('gsm_table')#
  observeEvent(input$assignButton,{#
      proxy.gsm %>% selectRows(NULL)#
  }) #
  ## UI output#
#
    output$categorySelect <- renderUI(#
      fluidRow(#
        column(12,#
               selectizeInput("selection", "Select a Category",#
                           c("category1" <- {input$cat1},#
                             "category2" <- {input$cat2},#
                             "category3" <- {input$cat3},#
                             "category4" <- "Not included")#
                             # , options = list(create=TRUE, plugins = list("remove_button")))  ### <- "remove_button" isn't what I thought it was. I would also like the "create" option but I will need to link this to the table as cat1-3 are linked (otherwise new variables are not coloured or sent along for processing)#
        )#
      )     ### 2018-12-10 I'd like to have a button to add category 3#
    )#
    )  #
# Finished table, to ultimately lead to CEL download#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
userSamples$finishedtable <- NULL#
#
observeEvent(input$assignButton, {#
    userSamples$finishedtable <<- dplyr::filter(userSamples$df, category %in% c(input$cat1, input$cat2, input$cat3))#
})#
  output$finishedtable <- DT::renderDataTable({#
      if(!is.null(userSamples$finishedtable)){#
      datatable(userSamples$finishedtable,#
      options=list(#
          searching=FALSE, #
          paging=FALSE,#
          scrollX=TRUE, #
          scrollY='60vh', #
          scrollCollapse=TRUE,#
          fixedHeader=TRUE,#
          autoWidth=TRUE,#
          columnDefs=list(list(#
          targets = "_all",#
          render = JS(#
              "function(data, type, row, meta) {",#
                  "return type === 'display' && typeof data === 'string' && data.length > 100 ?",#
                  "'<span title=\"' + data + '\">' + data.substr(0, 100) + '...</span>' : data;",#
                  "}")#
          )))) %>%#
      formatStyle('category',target="row",#
      backgroundColor=styleEqual(c(input$cat1,input$cat2,input$cat3),c(rowCol[1],rowCol[2],rowCol[3]))#
  )}})#
#
rv <- reactiveValues(download_flag = 0)#
  output$report <- downloadHandler(#
      filename = function(){paste(input$downloadId,"GSM_report.csv",sep="_")},#
      content = function(file){#
          write.csv(userSamples$finishedtable,file)#
          rv$download_flag <- rv$download_flag + 1#
      })#
# Modal confirming CEL download, and processing function#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_     #
observeEvent(input$downloadCEL, {#
    if (!eset_is_uploaded){#
        userSamples$finishedtable %>% group_by(category) %>% summarise(n.gse = n_distinct(series_id)) -> gse.check#
        warning <- "Please click below to begin processing the data."#
        numCat <- length(gse.check$category)>1#
        if(length(which(gse.check$n.gse==1))!=0){#
            catAlert <- paste(gse.check$category[which(gse.check$n.gse==1)], collapse = ", ")#
            warning <- paste("WARNING: The following categories contain samples from a single experiment (GSE) and as such they will be confounded by batch effects: ",catAlert,".<br>Please proceed with caution or cancel and select additional samples to add to these categories.",sep="")#
        }#
        if(!numCat){#
            showModal(modalDialog(title="Error! A minimum of two categories are needed.","Experimental samples need to be organized into 2 or 3 categories for appropriate downstream analysis. If you are interested in only one type of sample, we suggest choosing samples to act as 'background', which will allow for differential analysis to identify which receptor genes are enriched or depleted in your sample of interest.",#
            easyClose = TRUE,#
            footer = tagList(#
                modalButton("Cancel")))) #
        } else {#
            showModal(modalDialog(title="Important! Downloading raw .CEL files from the NCBI server.",HTML(paste("June 20th, 2019<br>",warning)),#
            easyClose = TRUE,#
            footer = tagList(#
                modalButton("Cancel"),#
                actionButton("processCEL","Proceed"))))      #
        }}#
# If the flag is TRUE, confirm and process uploaded data#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_             #
    else { #
        shinyjs::disable("downloadCEL")#
        userID <<- processDataUpload(userSamples$finishedtable, userEset(), input$downloadId, input$comments, input$speciesSelection, poolUserData)#
        global$DatasetTable <<- loadUserDatasets(poolUserData)#
        showModal(modalDialog(title="Your dataset was successfully processed!","Analyse your data in the 'Load Expression Datasets' tab. You can also download a report from this page.",#
        easyClose = TRUE,#
        footer = tagList(#
            modalButton("OK"))))# modal#
    }#
  })#
#
observeEvent(input$processCEL, {#
    shinyjs::disable("processCEL")#
    userID <<- processData(userSamples$finishedtable, input$downloadId, input$comments, input$gplSelection, poolUserData)#
    global$DatasetTable <<- loadUserDatasets(poolUserData)#
    removeModal()#
    showModal(modalDialog(title="Your dataset was successfully processed!","Analyse your data in the 'Load Expression Datasets' tab. You can also download a report from this page.",#
    easyClose = TRUE,#
    footer = tagList(#
        modalButton("OK"))))# modal#
  })#
# Reset button, modal confirmation#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  observeEvent(input$linkReset, {#
      showModal(modalDialog(title="Important! Are you sure you want to reset everything?","All searches and categorized samples will be lost. This can not be undone.",#
      footer = tagList(#
          modalButton("Cancel"),#
          actionButton("buttonReset","Yes, reset."))))# modal#
      # confirm reset (all categories, sample search, gone)#
      observeEvent(input$buttonReset, {#
          shinyjs::enable("gplSelection")#
          userSamples$df <<- userSamples$df[0,]#
          reset("searchText")#
          reset("cat1")#
          reset("cat2")#
          reset("cat3")#
          reset("downloadId")#
          replaceData(proxy.search, NULL)#
          replaceData(proxy.gsm, NULL)#
          userSamples$finishedtable <<- NULL#
          removeModal()#
          updateTabsetPanel(session = session, inputId = "searchpanel", selected = "1")#
        })#
  })#
#   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-#
#  / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \#
# `-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'#
#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
## This is where the analysis begins#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
#
# Quick link from the main page#
observeEvent(input$linkLoad, {#
  updateNavbarPage(session, "receptorMain", selected="expressionPanel")#
})#
#
# Conditional nav tabs#
hideTab(inputId = "receptorMain", target = "Gene-level Expression")#
hideTab(inputId = "receptorMain", target = "Sample-level Expression")#
#
observeEvent(input$user_data,{#
    if(input$user_data!="none"){#
        showTab(inputId = "receptorMain", target = "Gene-level Expression")#
        showTab(inputId = "receptorMain", target = "Sample-level Expression")#
    } else {#
        hideTab(inputId = "receptorMain", target = "Gene-level Expression")#
        hideTab(inputId = "receptorMain", target = "Sample-level Expression")#
#
    }#
})#
#
# Load dataset#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
output$loadUserExperiments = renderUI({#
    selectizeInput(inputId="user_data",label="Select an experiment for analysis",choices=c("none"="none",split(global$DatasetTable$desc, global$DatasetTable$species)),selected="none")#
})#
observeEvent(input$user_data,{#
    id <- NULL#
    datasetToLoad <- NULL#
   if(input$user_data=="none"){#
        mapped_probes<<-NULL  ### this is going to be the key for detecting upload data#
        uploaded_features<<-NULL ## ^ this set will be used for uploaded data#
        eset<<-NULL#
        de_choices<<-NULL#
        sig_genes_lfc<<-NULL#
    }else{         #
        id <- global$DatasetTable$userID[which(global$DatasetTable$desc == input$user_data)]#
        assign(#
              x = "species", value = global$DatasetTable$species[which(global$DatasetTable$desc == input$user_data)], envir = .GlobalEnv#
           )#
           uploaded_features <<-NULL ## I think this might have to be here for non-uploaded datasets#
        datasetToLoad <- paste("./data/app_data_", id, ".rda", sep='')#
        withProgress(message="Loading dataset",value=0.2,{#
            load(datasetToLoad,envir=.GlobalEnv)#
            incProgress(0.3, message = "Loading contrasts")#
            updateCheckboxGroupInput(session, "tissues", choices = groups, selected = groups)#
            updateCheckboxGroupInput(session, "pls_tissues", choices = groups, selected = groups)#
            updateCheckboxGroupInput(session, "de", choices = de_choices, selected = de_choices[1])#
            incProgress(0.3, message ="Loading genelists")#
            updateCheckboxGroupInput(session, "genelist", label = NULL, choices = names(gene_lists[[species]]), selected = NULL, inline = FALSE)#
            incProgress(0.2, message = "Loading gene names")#
            # updateSelectInput(session, "gene", choices = all_genes[species])#
            if(is.null(uploaded_features)){#
                updateSelectInput(session, "gene", choices = mapped_probes)#
            }#
            if(is.null(mapped_probes)){#
                updateSelectInput(session, "gene", choices = make.names(uploaded_features))#
            }#
        })#
    }#
})#
#
# Download DEG#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
#
rvDEG <- reactiveValues(download_flag = 0)#
#
  # proxy.finishedtable = dataTableProxy('finishedtable')#
  output$reportDEG <- downloadHandler(#
      filename = paste(input$user_data,"DEG_report.xlsx",sep="_"),#
      # filename = paste(input$user_data,"DEG_report.csv",sep="_"),#
      content = function(file){#
          write_xlsx(sig_genes_lfc, path=file)#
          rvDEG$download_flag <- rvDEG$download_flag + 1#
      })#
#
# QC output#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
#
output$QC = renderUI({#
  validate(#
    need(input$user_data!="none","No dataset selected"),#
    need(is.null(uploaded_features), "QC data not available for uploaded read table")#
  )#
#
  id <- global$DatasetTable$userID[which(global$DatasetTable$desc == input$user_data)]#
#
  fluidRow(#
      inlineCSS(list(#
          "#norm" = c("max-width:100%","width=100%"))),#
      h4("Expression normalization (array intensity, before and after)"), #
      tags$div(class="norm",#
          tags$img(src=paste("array_normalization_", id, ".png", sep=''))#
          ),#
      h4("RNA degradation plot (probe position along transcript vs intensity)"),#
      tags$img(src=paste("probe_degradation_", id, ".png", sep='')))#
})#
# Load genes tab#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
#
  geneList = reactive({#
    if (is.null(input$genelist) && is.null(input$gene)) {#
      return(NULL)#
    }#
    genes = c()#
#
    if (!is.null(input$genelist)) {#
      for (gene in input$genelist) {#
        genes = c(genes, gene_lists[[species]][[gene]])#
      }#
    }#
#
    if (!is.null(input$gene)) {#
      genes = c(genes, input$gene)#
    }#
    return(unname(genes))#
  })#
 summary_gene_data = reactive({#
     validate(#
       need(input$user_data!="none","No dataset selected. Please select an experiment for analysis."),#
       need(geneList(), "No genes selected. Please select receptor type(s) to analyse.")#
     )#
   get_expression_summary(eset, geneList())#
 })#
# Gene outputs#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  output$genes = DT::renderDataTable({#
      validate(#
        need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
        need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'.")#
      )#
     summary_gene_data() %>% datatable() %>% #
      formatRound(2:4)#
  })#
  # single gene plot#
 output$singleGenePlot = renderPlot({#
     validate(#
       need(input$user_data!="none","No dataset selected."),#
       need(geneList(), "No genes selected."),#
       need(input$genes_rows_selected >= 1, "Please select one or more genes from the 'Average Expression' table to inspect expression by tissue type.")#
     )#
    rows = as.integer(input$genes_rows_selected)#
    genes_to_plot = summary_gene_data()$Symbol[rows]#
    gene_data = get_gene_data(eset, genes_to_plot)#
    by_gene_violplot(gene_data,tissues=groups)#
  })#
#
# Expression tab#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  observe({#
    toggle("de_choices", anim = TRUE, condition = input$de_state )#
  })#
  genesToPlot = reactive({#
    validate(#
      need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
      need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'.")#
    )#
#
    genes = geneList()#
    if(input$de_state) {#
      selected_de = input$de#
      de_lists = lapply(selected_de, function(x) {as.character(get_de_genes(genes, x, sig_genes_lfc)$Symbol) })#
      genes = Reduce(union, de_lists)#
    } #
    return(genes) #
  }) #
# Heatmap plot#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  output$expressionPlot = renderPlot({#
      validate(#
          need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
          need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
          need(input$tissues, "No tissues selected. Please choose at least one tissue to plot receptor heatmap."),#
          need(length(genesToPlot())>10, if(input$de_state){paste("Based on the genes selected in 'Load Data', ", length(genesToPlot())," genes were differentially expressed in these tissues (",paste(input$tissues, collapse = ", "), "); try unselecting that option in the side menu.",sep="")}else{paste("No genes to plot as a heatmap (minimum = 10). Try including more receptor types in 'Load Data'.")})#
    )#
    selected_tissues = input$tissues#
    sub_eset = eset[, eset$tissue %in% selected_tissues]#
    genes = geneToPlot()#
    if(is.null(uploaded_features)){genes = gene2probe(genesToPlot(), mapped_probes)}#
    cat(file=stderr(), "Preparing heatmap:\n Tissues:", paste(input$tissues, collapse = ", "), "\n gene list: ",paste(genesToPlot(),collapse=", "),"\n genes: ", paste(genes,collapse=", "),"\n")#
    gene_heatmap(sub_eset, genes, scale = "row",#
                  probe_level = input$hm_probes,#
                  gsm_show = input$hm_gsm,#
                  show_rownames = input$hm_rownames,#
                  cluster_rows = input$hm_row_cluster,#
                  cluster_cols = input$hm_col_cluster,#
                  border_color = NA)#
    })#
  output$heatmap_ui = renderUI({#
    plotOutput("expressionPlot", height = input$hm_height, width = input$hm_width)#
  })#
#
# Overall expression#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  output$overallPlot = renderPlot({#
    validate(#
        need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
        need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
    need(input$tissues, "No tissues selected. Please choose at least one tissue to plot receptor heatmap."),#
    need(length(genesToPlot())>1, if(input$de_state){paste("Based on the genes selected in 'Load Data', ", length(genesToPlot())," genes were differentially expressed in these tissues (",paste(input$tissues, collapse = ", "), "); try unselecting that option in the side menu.",sep="")}else{paste("No genes to plot. Try including more receptor types in 'Load Data'.")}) #
    )#
    gene_data = get_gene_data(eset, genesToPlot())#
    overall_expression_boxplot(gene_data, tissues = input$tissues)#
  })#
# By gene boxplots ----------------------------------------------------------------------------#
#
  output$byGenePlot = renderPlot({#
      validate(#
          need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
          need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
      need(input$tissues, "No tissues selected. Please choose at least one tissue to plot receptor heatmap."),#
      need(length(genesToPlot())>1, if(input$de_state){paste("Based on the genes selected in 'Load Data', ", length(genesToPlot())," genes were differentially expressed in these tissues (",paste(input$tissues, collapse = ", "), "); try unselecting that option in the side menu.",sep="")}else{paste("No genes to plot. Try including more receptor types in 'Load Data'.")}) #
      )    #
    gene_data = get_gene_data(eset, genesToPlot())#
    by_gene_boxplot(gene_data, tissues = input$tissues)#
  })#
  plsdaData = reactive({#
    selected_tissues = input$pls_tissues#
    if(length(selected_tissues) < 2) {#
      return(NULL)#
    }#
    sub_eset = eset[, eset$tissue %in% selected_tissues]#
    genes = gene2probe(geneList(), mapped_probes)#
    # probe = input$pls_probe#
    get_plsda(sub_eset, genes, probe = FALSE) #
  })#
#
# PCA plot ----------------------------------------------------------------------------#
  output$indPlot = renderPlot({#
    validate(#
        need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
        need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
       need(length(input$pls_tissues) >= 2, "Please select at least two tissues for a PLS-DA plot.")#
    )#
    plotIndiv(plsdaData()$result, ind.names = FALSE, group = factor(plsdaData()$tissue_grps), pch = 16, #
              col.per.group = brewer.pal(3, "Set1")[1:length(input$pls_tissues)], legend = TRUE, cex = 2, ellipse=TRUE, title="Plot of individual arrays",style="graphics")#
  })#
#
# Correlation Circle plot ----------------------------------------------------------------------------  #
  output$varPlot = renderPlot({#
      validate(#
          need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
          need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
         need(length(input$pls_tissues) >= 2, "Please select at least two tissues for a Correlation circle plot.")#
      )#
      comp = as.integer(input$pls_ncomp)#
    plotVar(plsdaData()$result, var.names = list(plsdaData()$varNames), comp.select=comp, cex = 1, overlap=FALSE, col="grey",title="Correlation circle between genes and discriminant components", style="graphics")#
  })#
#
  output$numGenesUI = renderUI({#
    numericInput("pls_num_genes", "Select number of genes to show contributions for", #
                 value = 25, min = 1, max = length(geneList()), step = 1)#
  })#
# Loadings plot ----------------------------------------------------------------------------#
  output$contribPlot = renderPlot({#
      validate(#
          need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
          need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
         need(length(input$pls_tissues) >= 2, "Please select at least two tissues for a Loadings plot.")#
      )#
    grps = plsdaData()$result$names$colnames$Y#
    ndisplay = input$pls_num_genes#
    comp = as.integer(input$pls_ncomp)#
    plotLoadings(plsdaData()$result, name.var = plsdaData()$varNames, ndisplay = ndisplay, comp = comp, contrib='max', method='mean',legend.color = catCol[1:length(grps)],title=paste("Weight of the top ", ndisplay, " genes contributing to discriminant component ", comp, sep=""),size.title=1)#
  })#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$  #
  ## Kill shinyApp when session closes#
  session$onSessionEnded(stopApp)#
#
}
g()
server <- function(input, output, session) {#
#   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-#
#  / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \#
# `-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
## This is the database search begins#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
#
# Quick link from the main page#
observeEvent(input$linkSearch, {#
  updateNavbarPage(session, "receptorMain", selected="searchPanel")#
})#
# Set up colour environment#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  catCol <- brewer.pal(3, "Set1")#
  rowCol <-desat(catCol)#
  userID <- NULL#
# Search functions #
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  searchGSM <- eventReactive(input$searchButton, {#
      if(input$gplSelection=='human'){#
          sql<-"SELECT * FROM appgsm WHERE description MATCH ?id1 AND gpl LIKE 'GPL570';"#
      } else {#
          sql<-"SELECT * FROM appgsm WHERE description MATCH ?id1 AND gpl LIKE 'GPL1261';"#
      }#
      query<-sqlInterpolate(poolGEO,sql,id1=input$searchText)#
      queryGSM<-dbGetQuery(poolGEO,query)#
      shinyjs::disable("gplSelection")#
      return(queryGSM)#
  })#
#
  output$searchResultsGSM <- DT::renderDataTable({#
          searchGSM()}, extensions = 'Buttons', options=list(#
              dom = 'Bfrtip',#
              buttons = list(list(extend = 'colvis')),#
              searching=TRUE, #
              paging=FALSE,#
              scrollX=TRUE, #
              scrollY='60vh', #
              scrollCollapse=TRUE,#
              fixedHeader=TRUE,#
              autoWidth=TRUE,#
              columnDefs=list(list(#
              targets = "_all",#
              render = JS(#
                  "function(data, type, row, meta) {",#
                      "return type === 'display' && typeof data === 'string' && data.length > 100 ?",#
                      "'<span title=\"' + data + '\">' + data.substr(0, 100) + '...</span>' : data;",#
                      "}") #
                      )))) ## typeof data needs to be a string, as a "NA" converted to JS "NULL" breaks things#
#
# Set up tables to store user-selected data#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
#
  proxy.search = dataTableProxy('searchResultsGSM')#
#
  ## Set up reactive table to store experimental samples#
  userSamples <- reactiveValues()#
  userSamples$df <- data.frame()#
  # 2019-07-31 Upload user data#
  # Upload read count table#
  #_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  userEset <- reactive({#
      inFile <- input$eset_upload#
      if (is.null(inFile))#
          return(NULL)#
      df<- read.csv(inFile$datapath,header=TRUE,sep=",")#
      return(df)#
  })#
  output$upload_table <- DT::renderDataTable({#
      df <- userEset()#
      datatable(df, options=list(#
          searching=TRUE, #
          paging=TRUE,#
          scrollX=TRUE, #
          scrollY='25vh',#
          scrollCollapse=TRUE,#
          fixedHeader=TRUE,#
          autoWidth=FALSE))#
      })#
  observeEvent(input$uploadButton, {#
      showModal(modalDialog(title="Select your data to upload for analysis","Make sure things look right before proceeding. There is the ability to add some options here, if I want to make it slightly more flexible (e.g. separator, header).", radioButtons("speciesSelection", "Choose species:", choices = c("Mouse" = "mouse", "Human" = "human")),#
          fileInput('eset_upload','Choose file to upload', accept = c('text/csv','text/comma-separated-values','.csv')),#
          DT::dataTableOutput("upload_table"),#
          easyClose = TRUE,#
          footer = tagList(#
              actionButton("uploaded","Upload read table"))))#
  })#
  # 'uploaded file' flag#
  eset_is_uploaded = FALSE#
  observeEvent(input$uploaded, {#
      eset_is_uploaded <<- TRUE#
      removeModal()#
      uploadSamples <- userEset()#
      tableRows <- ncol(uploadSamples)#
      userSamples$df <<- data.frame(samples = colnames(uploadSamples), category = rep("Not yet assigned", tableRows), features = rep(nrow(uploadSamples), tableRows), description = rep("User uploaded samples",tableRows))#
      updateTabsetPanel(session = session, inputId = "searchpanel", selected = "2")  ## jump to 'Assign' tab#
  })#
#
  observeEvent(input$clear_upload, {#
      eset_is_uploaded <<- FALSE#
      userSamples$df <<- data.frame()#
      removeModal()#
  })#
# Add sample (array) record to the current experiment #
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  observeEvent(input$addButton, {#
      if(eset_is_uploaded){#
          showModal(modalDialog(title = "Alert! Uploaded data detected.", "Continuing with public arrays will erase uploaded dataset.",#
              easyClose = TRUE, footer = tagList(actionButton("clear_upload","Proceed"), modalButton("Cancel"))))#
      } else {#
      gsm_selected <- searchGSM()[input$searchResultsGSM_rows_selected,]#
      gsm_selected$category <- rep("Not yet assigned", nrow(gsm_selected))#
      userSamples$df <<- rbind(userSamples$df,gsm_selected)#
      proxy.search %>% selectRows(NULL)#
      updateTabsetPanel(session = session, inputId = "searchpanel", selected = "2")#
      }#
  })#
#
# Assign categories to each sample (GSM)#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  observeEvent(input$assignButton, {#
        userSamples$df[,"category"] <<- as.character(userSamples$df[,"category"])#
        userSamples$df[input$gsm_table_rows_selected,"category"] <<- input$selection#
        userSamples$df[,"category"] <<- as.factor(userSamples$df[,"category"])#
  })      #
  output$gsm_table <- DT::renderDataTable({#
      if(input$assignButton == 0){#
         return (datatable(userSamples$df, extensions = 'Buttons', options=list(#
               dom = 'Bfrtip',#
               buttons = list(list(extend = 'colvis')),#
               searching=TRUE, #
               paging=FALSE,#
               scrollX=TRUE, #
               scrollY='60vh', #
               scrollCollapse=TRUE,#
               fixedHeader=TRUE,#
               autoWidth=TRUE,#
               columnDefs=list(list(#
             targets = "_all",#
             render = JS(#
                 "function(data, type, row, meta) {",#
                     "return type === 'display' && typeof data === 'string' && data.length > 100 ?",#
                     "'<span title=\"' + data + '\">' + data.substr(0, 100) + '...</span>' : data;",#
                     "}")#
                     )))))#
      } else {#
         return (datatable(userSamples$df, extensions = 'Buttons', options=list(#
             dom = 'Bfrtip',#
             buttons = list(list(extend = 'colvis')),#
             searching=TRUE, #
             paging=FALSE,#
             scrollX=TRUE, #
             scrollY='60vh', #
             scrollCollapse=TRUE,#
             fixedHeader=TRUE,#
             autoWidth=TRUE,#
             columnDefs=list(list(#
             targets = "_all",#
             render = JS(#
                 "function(data, type, row, meta) {",#
                     "return type === 'display' && typeof data === 'string' && data.length > 100 ?",#
                     "'<span title=\"' + data + '\">' + data.substr(0, 100) + '...</span>' : data;",#
                     "}")#
                     )))) %>%#
                     formatStyle('category', target="row", backgroundColor=styleEqual(c(input$cat1, input$cat2, input$cat3), c(rowCol[1], rowCol[2], rowCol[3]))))#
      }#
  })#
  proxy.gsm = dataTableProxy('gsm_table')#
  observeEvent(input$assignButton,{#
      proxy.gsm %>% selectRows(NULL)#
  }) #
  ## UI output#
#
    output$categorySelect <- renderUI(#
      fluidRow(#
        column(12,#
               selectizeInput("selection", "Select a Category",#
                           c("category1" <- {input$cat1},#
                             "category2" <- {input$cat2},#
                             "category3" <- {input$cat3},#
                             "category4" <- "Not included")#
                             # , options = list(create=TRUE, plugins = list("remove_button")))  ### <- "remove_button" isn't what I thought it was. I would also like the "create" option but I will need to link this to the table as cat1-3 are linked (otherwise new variables are not coloured or sent along for processing)#
        )#
      )     ### 2018-12-10 I'd like to have a button to add category 3#
    )#
    )  #
# Finished table, to ultimately lead to CEL download#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
userSamples$finishedtable <- NULL#
#
observeEvent(input$assignButton, {#
    userSamples$finishedtable <<- dplyr::filter(userSamples$df, category %in% c(input$cat1, input$cat2, input$cat3))#
})#
  output$finishedtable <- DT::renderDataTable({#
      if(!is.null(userSamples$finishedtable)){#
      datatable(userSamples$finishedtable,#
      options=list(#
          searching=FALSE, #
          paging=FALSE,#
          scrollX=TRUE, #
          scrollY='60vh', #
          scrollCollapse=TRUE,#
          fixedHeader=TRUE,#
          autoWidth=TRUE,#
          columnDefs=list(list(#
          targets = "_all",#
          render = JS(#
              "function(data, type, row, meta) {",#
                  "return type === 'display' && typeof data === 'string' && data.length > 100 ?",#
                  "'<span title=\"' + data + '\">' + data.substr(0, 100) + '...</span>' : data;",#
                  "}")#
          )))) %>%#
      formatStyle('category',target="row",#
      backgroundColor=styleEqual(c(input$cat1,input$cat2,input$cat3),c(rowCol[1],rowCol[2],rowCol[3]))#
  )}})#
#
rv <- reactiveValues(download_flag = 0)#
  output$report <- downloadHandler(#
      filename = function(){paste(input$downloadId,"GSM_report.csv",sep="_")},#
      content = function(file){#
          write.csv(userSamples$finishedtable,file)#
          rv$download_flag <- rv$download_flag + 1#
      })#
# Modal confirming CEL download, and processing function#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_     #
observeEvent(input$downloadCEL, {#
    if (!eset_is_uploaded){#
        userSamples$finishedtable %>% group_by(category) %>% summarise(n.gse = n_distinct(series_id)) -> gse.check#
        warning <- "Please click below to begin processing the data."#
        numCat <- length(gse.check$category)>1#
        if(length(which(gse.check$n.gse==1))!=0){#
            catAlert <- paste(gse.check$category[which(gse.check$n.gse==1)], collapse = ", ")#
            warning <- paste("WARNING: The following categories contain samples from a single experiment (GSE) and as such they will be confounded by batch effects: ",catAlert,".<br>Please proceed with caution or cancel and select additional samples to add to these categories.",sep="")#
        }#
        if(!numCat){#
            showModal(modalDialog(title="Error! A minimum of two categories are needed.","Experimental samples need to be organized into 2 or 3 categories for appropriate downstream analysis. If you are interested in only one type of sample, we suggest choosing samples to act as 'background', which will allow for differential analysis to identify which receptor genes are enriched or depleted in your sample of interest.",#
            easyClose = TRUE,#
            footer = tagList(#
                modalButton("Cancel")))) #
        } else {#
            showModal(modalDialog(title="Important! Downloading raw .CEL files from the NCBI server.",HTML(paste("June 20th, 2019<br>",warning)),#
            easyClose = TRUE,#
            footer = tagList(#
                modalButton("Cancel"),#
                actionButton("processCEL","Proceed"))))      #
        }}#
# If the flag is TRUE, confirm and process uploaded data#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_             #
    else { #
        shinyjs::disable("downloadCEL")#
        userID <<- processDataUpload(userSamples$finishedtable, userEset(), input$downloadId, input$comments, input$speciesSelection, poolUserData)#
        global$DatasetTable <<- loadUserDatasets(poolUserData)#
        showModal(modalDialog(title="Your dataset was successfully processed!","Analyse your data in the 'Load Expression Datasets' tab. You can also download a report from this page.",#
        easyClose = TRUE,#
        footer = tagList(#
            modalButton("OK"))))# modal#
    }#
  })#
#
observeEvent(input$processCEL, {#
    shinyjs::disable("processCEL")#
    userID <<- processData(userSamples$finishedtable, input$downloadId, input$comments, input$gplSelection, poolUserData)#
    global$DatasetTable <<- loadUserDatasets(poolUserData)#
    removeModal()#
    showModal(modalDialog(title="Your dataset was successfully processed!","Analyse your data in the 'Load Expression Datasets' tab. You can also download a report from this page.",#
    easyClose = TRUE,#
    footer = tagList(#
        modalButton("OK"))))# modal#
  })#
# Reset button, modal confirmation#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  observeEvent(input$linkReset, {#
      showModal(modalDialog(title="Important! Are you sure you want to reset everything?","All searches and categorized samples will be lost. This can not be undone.",#
      footer = tagList(#
          modalButton("Cancel"),#
          actionButton("buttonReset","Yes, reset."))))# modal#
      # confirm reset (all categories, sample search, gone)#
      observeEvent(input$buttonReset, {#
          shinyjs::enable("gplSelection")#
          userSamples$df <<- userSamples$df[0,]#
          reset("searchText")#
          reset("cat1")#
          reset("cat2")#
          reset("cat3")#
          reset("downloadId")#
          replaceData(proxy.search, NULL)#
          replaceData(proxy.gsm, NULL)#
          userSamples$finishedtable <<- NULL#
          removeModal()#
          updateTabsetPanel(session = session, inputId = "searchpanel", selected = "1")#
        })#
  })#
#   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-#
#  / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \#
# `-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'#
#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
## This is where the analysis begins#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
#
# Quick link from the main page#
observeEvent(input$linkLoad, {#
  updateNavbarPage(session, "receptorMain", selected="expressionPanel")#
})#
#
# Conditional nav tabs#
hideTab(inputId = "receptorMain", target = "Gene-level Expression")#
hideTab(inputId = "receptorMain", target = "Sample-level Expression")#
#
observeEvent(input$user_data,{#
    if(input$user_data!="none"){#
        showTab(inputId = "receptorMain", target = "Gene-level Expression")#
        showTab(inputId = "receptorMain", target = "Sample-level Expression")#
    } else {#
        hideTab(inputId = "receptorMain", target = "Gene-level Expression")#
        hideTab(inputId = "receptorMain", target = "Sample-level Expression")#
#
    }#
})#
#
# Load dataset#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
output$loadUserExperiments = renderUI({#
    selectizeInput(inputId="user_data",label="Select an experiment for analysis",choices=c("none"="none",split(global$DatasetTable$desc, global$DatasetTable$species)),selected="none")#
})#
observeEvent(input$user_data,{#
    id <- NULL#
    datasetToLoad <- NULL#
   if(input$user_data=="none"){#
        mapped_probes<<-NULL  ### this is going to be the key for detecting upload data#
        uploaded_features<<-NULL ## ^ this set will be used for uploaded data#
        eset<<-NULL#
        de_choices<<-NULL#
        sig_genes_lfc<<-NULL#
    }else{         #
        id <- global$DatasetTable$userID[which(global$DatasetTable$desc == input$user_data)]#
        assign(#
              x = "species", value = global$DatasetTable$species[which(global$DatasetTable$desc == input$user_data)], envir = .GlobalEnv#
           )#
           uploaded_features <<-NULL ## I think this might have to be here for non-uploaded datasets#
        datasetToLoad <- paste("./data/app_data_", id, ".rda", sep='')#
        withProgress(message="Loading dataset",value=0.2,{#
            load(datasetToLoad,envir=.GlobalEnv)#
            incProgress(0.3, message = "Loading contrasts")#
            updateCheckboxGroupInput(session, "tissues", choices = groups, selected = groups)#
            updateCheckboxGroupInput(session, "pls_tissues", choices = groups, selected = groups)#
            updateCheckboxGroupInput(session, "de", choices = de_choices, selected = de_choices[1])#
            incProgress(0.3, message ="Loading genelists")#
            updateCheckboxGroupInput(session, "genelist", label = NULL, choices = names(gene_lists[[species]]), selected = NULL, inline = FALSE)#
            incProgress(0.2, message = "Loading gene names")#
            # updateSelectInput(session, "gene", choices = all_genes[species])#
            if(is.null(uploaded_features)){#
                updateSelectInput(session, "gene", choices = mapped_probes)#
            }#
            if(is.null(mapped_probes)){#
                updateSelectInput(session, "gene", choices = make.names(uploaded_features))#
            }#
        })#
    }#
})#
#
# Download DEG#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
#
rvDEG <- reactiveValues(download_flag = 0)#
#
  # proxy.finishedtable = dataTableProxy('finishedtable')#
  output$reportDEG <- downloadHandler(#
      filename = paste(input$user_data,"DEG_report.xlsx",sep="_"),#
      # filename = paste(input$user_data,"DEG_report.csv",sep="_"),#
      content = function(file){#
          write_xlsx(sig_genes_lfc, path=file)#
          rvDEG$download_flag <- rvDEG$download_flag + 1#
      })#
#
# QC output#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
#
output$QC = renderUI({#
  validate(#
    need(input$user_data!="none","No dataset selected"),#
    need(is.null(uploaded_features), "QC data not available for uploaded read table")#
  )#
#
  id <- global$DatasetTable$userID[which(global$DatasetTable$desc == input$user_data)]#
#
  fluidRow(#
      inlineCSS(list(#
          "#norm" = c("max-width:100%","width=100%"))),#
      h4("Expression normalization (array intensity, before and after)"), #
      tags$div(class="norm",#
          tags$img(src=paste("array_normalization_", id, ".png", sep=''))#
          ),#
      h4("RNA degradation plot (probe position along transcript vs intensity)"),#
      tags$img(src=paste("probe_degradation_", id, ".png", sep='')))#
})#
# Load genes tab#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
#
  geneList = reactive({#
    if (is.null(input$genelist) && is.null(input$gene)) {#
      return(NULL)#
    }#
    genes = c()#
#
    if (!is.null(input$genelist)) {#
      for (gene in input$genelist) {#
        genes = c(genes, gene_lists[[species]][[gene]])#
      }#
    }#
#
    if (!is.null(input$gene)) {#
      genes = c(genes, input$gene)#
    }#
    return(unname(genes))#
  })#
 summary_gene_data = reactive({#
     validate(#
       need(input$user_data!="none","No dataset selected. Please select an experiment for analysis."),#
       need(geneList(), "No genes selected. Please select receptor type(s) to analyse.")#
     )#
   get_expression_summary(eset, geneList())#
 })#
# Gene outputs#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  output$genes = DT::renderDataTable({#
      validate(#
        need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
        need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'.")#
      )#
     summary_gene_data() %>% datatable() %>% #
      formatRound(2:4)#
  })#
  # single gene plot#
 output$singleGenePlot = renderPlot({#
     validate(#
       need(input$user_data!="none","No dataset selected."),#
       need(geneList(), "No genes selected."),#
       need(input$genes_rows_selected >= 1, "Please select one or more genes from the 'Average Expression' table to inspect expression by tissue type.")#
     )#
    rows = as.integer(input$genes_rows_selected)#
    genes_to_plot = summary_gene_data()$Symbol[rows]#
    gene_data = get_gene_data(eset, genes_to_plot)#
    by_gene_violplot(gene_data,tissues=groups)#
  })#
#
# Expression tab#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  observe({#
    toggle("de_choices", anim = TRUE, condition = input$de_state )#
  })#
  genesToPlot = reactive({#
    validate(#
      need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
      need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'.")#
    )#
#
    genes = geneList()#
    if(input$de_state) {#
      selected_de = input$de#
      de_lists = lapply(selected_de, function(x) {as.character(get_de_genes(genes, x, sig_genes_lfc)$Symbol) })#
      genes = Reduce(union, de_lists)#
    } #
    return(genes) #
  }) #
# Heatmap plot#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  output$expressionPlot = renderPlot({#
      validate(#
          need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
          need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
          need(input$tissues, "No tissues selected. Please choose at least one tissue to plot receptor heatmap."),#
          need(length(genesToPlot())>10, if(input$de_state){paste("Based on the genes selected in 'Load Data', ", length(genesToPlot())," genes were differentially expressed in these tissues (",paste(input$tissues, collapse = ", "), "); try unselecting that option in the side menu.",sep="")}else{paste("No genes to plot as a heatmap (minimum = 10). Try including more receptor types in 'Load Data'.")})#
    )#
    selected_tissues = input$tissues#
    sub_eset = eset[, eset$tissue %in% selected_tissues]#
    genes = genesToPlot()#
    if(is.null(uploaded_features)){genes = gene2probe(genesToPlot(), mapped_probes)}#
    cat(file=stderr(), "Preparing heatmap:\n Tissues:", paste(input$tissues, collapse = ", "), "\n gene list: ",paste(genesToPlot(),collapse=", "),"\n genes: ", paste(genes,collapse=", "),"\n")#
    gene_heatmap(sub_eset, genes, scale = "row",#
                  probe_level = input$hm_probes,#
                  gsm_show = input$hm_gsm,#
                  show_rownames = input$hm_rownames,#
                  cluster_rows = input$hm_row_cluster,#
                  cluster_cols = input$hm_col_cluster,#
                  border_color = NA)#
    })#
  output$heatmap_ui = renderUI({#
    plotOutput("expressionPlot", height = input$hm_height, width = input$hm_width)#
  })#
#
# Overall expression#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  output$overallPlot = renderPlot({#
    validate(#
        need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
        need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
    need(input$tissues, "No tissues selected. Please choose at least one tissue to plot receptor heatmap."),#
    need(length(genesToPlot())>1, if(input$de_state){paste("Based on the genes selected in 'Load Data', ", length(genesToPlot())," genes were differentially expressed in these tissues (",paste(input$tissues, collapse = ", "), "); try unselecting that option in the side menu.",sep="")}else{paste("No genes to plot. Try including more receptor types in 'Load Data'.")}) #
    )#
    gene_data = get_gene_data(eset, genesToPlot())#
    overall_expression_boxplot(gene_data, tissues = input$tissues)#
  })#
# By gene boxplots ----------------------------------------------------------------------------#
#
  output$byGenePlot = renderPlot({#
      validate(#
          need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
          need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
      need(input$tissues, "No tissues selected. Please choose at least one tissue to plot receptor heatmap."),#
      need(length(genesToPlot())>1, if(input$de_state){paste("Based on the genes selected in 'Load Data', ", length(genesToPlot())," genes were differentially expressed in these tissues (",paste(input$tissues, collapse = ", "), "); try unselecting that option in the side menu.",sep="")}else{paste("No genes to plot. Try including more receptor types in 'Load Data'.")}) #
      )    #
    gene_data = get_gene_data(eset, genesToPlot())#
    by_gene_boxplot(gene_data, tissues = input$tissues)#
  })#
  plsdaData = reactive({#
    selected_tissues = input$pls_tissues#
    if(length(selected_tissues) < 2) {#
      return(NULL)#
    }#
    sub_eset = eset[, eset$tissue %in% selected_tissues]#
    genes = gene2probe(geneList(), mapped_probes)#
    # probe = input$pls_probe#
    get_plsda(sub_eset, genes, probe = FALSE) #
  })#
#
# PCA plot ----------------------------------------------------------------------------#
  output$indPlot = renderPlot({#
    validate(#
        need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
        need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
       need(length(input$pls_tissues) >= 2, "Please select at least two tissues for a PLS-DA plot.")#
    )#
    plotIndiv(plsdaData()$result, ind.names = FALSE, group = factor(plsdaData()$tissue_grps), pch = 16, #
              col.per.group = brewer.pal(3, "Set1")[1:length(input$pls_tissues)], legend = TRUE, cex = 2, ellipse=TRUE, title="Plot of individual arrays",style="graphics")#
  })#
#
# Correlation Circle plot ----------------------------------------------------------------------------  #
  output$varPlot = renderPlot({#
      validate(#
          need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
          need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
         need(length(input$pls_tissues) >= 2, "Please select at least two tissues for a Correlation circle plot.")#
      )#
      comp = as.integer(input$pls_ncomp)#
    plotVar(plsdaData()$result, var.names = list(plsdaData()$varNames), comp.select=comp, cex = 1, overlap=FALSE, col="grey",title="Correlation circle between genes and discriminant components", style="graphics")#
  })#
#
  output$numGenesUI = renderUI({#
    numericInput("pls_num_genes", "Select number of genes to show contributions for", #
                 value = 25, min = 1, max = length(geneList()), step = 1)#
  })#
# Loadings plot ----------------------------------------------------------------------------#
  output$contribPlot = renderPlot({#
      validate(#
          need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
          need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
         need(length(input$pls_tissues) >= 2, "Please select at least two tissues for a Loadings plot.")#
      )#
    grps = plsdaData()$result$names$colnames$Y#
    ndisplay = input$pls_num_genes#
    comp = as.integer(input$pls_ncomp)#
    plotLoadings(plsdaData()$result, name.var = plsdaData()$varNames, ndisplay = ndisplay, comp = comp, contrib='max', method='mean',legend.color = catCol[1:length(grps)],title=paste("Weight of the top ", ndisplay, " genes contributing to discriminant component ", comp, sep=""),size.title=1)#
  })#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$  #
  ## Kill shinyApp when session closes#
  session$onSessionEnded(stopApp)#
#
}
g()
mat = exprs(eset)[c(gene_list),]
gene_list
mat = exprs(eset)[c(gene_list)]
mat
exprs(eset)
mat = exprs(eset)[c(gene_list),]
mat = exprs(eset)[gene_list,]
mat = exprs(eset)
mat[c(gene_list),]
sub_eset = eset[, eset$tissue %in% c("cytoplasmic","nuclear")]
sub_eset
mat = exprs(sub_eset)[c(subset_probes),]
mat = exprs(sub_eset)[c(gene_list),]
gene_list
mat = exprs(sub_eset)[paste(gene_list),]
mat = exprs(sub_eset)[paste(gene_list)]
mat
mat = exprs(sub_eset)[c(gene_list)]
mat
mat = exprs(sub_eset)[,c(gene_list)]
load("~/Documents/Retina/CNIB_TuckMacPhee/Bioinformatics/2018-04-13_app_data.rda")
eset
sub_eset = eset[, eset$tissue %in% c("whole.retina")]
mat = exprs(sub_eset)[,c("Rho","Acvr2a")]
gene_heatmap(subeset,c("Rho","Acvr2a"))
gene_heatmap(sub_eset,c("Rho","Acvr2a"))
mat<-exprs(eset)
class(mat)
mat[c("Rho"),]
mat[1,]
mat
head(mat)
mat[1415670_at,]
mat[c("1415670_at"),]
mat = mat[c("1415670_at"),]
mat
source("functions.R")
g()
myprobes<-c("Rho","Acvr2a","Gapdh","Polr2a","Acvr","Acvr1a","Gpr75","Kdr","Hprt","Tbp")
g()
g()
?order
mat
load('~/Desktop/shiny-server/receptoR_final/data/app_data_20190731-1955.rda')
eset
subprob<-c("ssc.let.7a","ssc.miR.378")
gene_heatmap(eset,subprob)
mat = exprs(eset)#
       mat = mat[c(subset_probes),]#
       cat(file=stderr(), "attempting to load ", length(rownames(mat)), "uploaded features\n")#
       row_labs = rownames(mat)
mat
subset_probes
mat
mat = mat[c(subset_probes),]
mat = mat[c(subprob),]
mat
row_labs = rownames(mat)
row_labs
mat = mat[order(rownames(mat)),]
mat
gene_heatmap(eset,subprob)
source("functions.R")
gene_heatmap(eset,subprob)
g()
get_plsda(eset,subprob,FALSE)
source("functions.R")
get_plsda(eset,subprob,FALSE)
g()
g()
x1<-read.csv("~/Downloads/GSE135028_HL60_s-shRNA_2_count.txt",sep="\t")
head(x1)
x2<-read.csv("~/Downloads/GSE135028_HL60_s-shRNA_1_count.txt",sep="\t")
x3<-read.csv("~/Downloads/GSE135028_HL60-CD97-KD_2_count.txt",sep="\t")
x4<-read.csv("~/Downloads/GSE135028_HL60-CD97-KD_1_count.txt",sep="\t")
dim(x1)
dim(x2)
dim(x3)
dim(x4)
big<-left_join(x1,x2)
big<-left_join(big,x3)
big<-left_join(big,x4)
head(big)
write.csv(big,"~/Desktop/seq.csv")
g()
load("~/Desktop/shiny-server/receptoR_final/data/app_data_20190731-2241.rda")
eset
pData(eset)
rownames(exprs(eset))
head(uploaded_features)
g()
load("~/Desktop/shiny-server/receptoR_final/data/app_data_20190731-2252.rda")
eset
head(uploaded_features)
get_expression_summary(eset, c("ALA"D))
get_expression_summary(eset, c("ALAD"))
get_gene_data(eset,c("ALAD"))
by_gene_violplot(gene_data,tissues=groups)
mydat<-get_gene_data(eset,c("ALAD"))
by_gene_violplot(mydat,tissues=groups)
mydat %>% #
      filter(tissue %in% tissues) %>%#
      ggplot(aes(x = tissue, y = expression)) +#
        geom_violin(aes(fill = tissue)) +#
        facet_wrap(~Symbol) +#
        theme_bw() + theme(axis.text.x = element_blank()) +#
        scale_fill_brewer(palette = "Set1")
mydat %>% #
      filter(tissue %in% c("KD","shRNA")) %>%#
      ggplot(aes(x = tissue, y = expression)) +#
        geom_violin(aes(fill = tissue)) +#
        facet_wrap(~Symbol) +#
        theme_bw() + theme(axis.text.x = element_blank()) +#
        scale_fill_brewer(palette = "Set1")
by_gene_boxplot(mydat,)
gene_data = get_gene_data(eset, c('ALAD'))
gene_data
gene_data %>% summarize(Symbol,tissue)
gene_data %>% summarize(count=Symbol~tissue)
gene_data %>% summarize(count=n(),Symbol,tissue)
gene_data %>% summarize(count=n(Sample~tissue))
gene_data %>% group_by(tissue)
gene_data %>% group_by(tissue) %>% summarize(count=n(Sample))
gene_data %>% group_by(tissue) %>% summarize(count=n())
density$count < 3
density<-gene_data %>% group_by(tissue) %>% summarize(count=n())
density$count < 3
any(density$count<3)
source("functions.R")
server <- function(input, output, session) {#
#   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-#
#  / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \#
# `-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
## This is the database search begins#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
#
# Quick link from the main page#
observeEvent(input$linkSearch, {#
  updateNavbarPage(session, "receptorMain", selected="searchPanel")#
})#
# Set up colour environment#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  catCol <- brewer.pal(3, "Set1")#
  rowCol <-desat(catCol)#
  userID <- NULL#
# Search functions #
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  searchGSM <- eventReactive(input$searchButton, {#
      if(input$gplSelection=='human'){#
          sql<-"SELECT * FROM appgsm WHERE description MATCH ?id1 AND gpl LIKE 'GPL570';"#
      } else {#
          sql<-"SELECT * FROM appgsm WHERE description MATCH ?id1 AND gpl LIKE 'GPL1261';"#
      }#
      query<-sqlInterpolate(poolGEO,sql,id1=input$searchText)#
      queryGSM<-dbGetQuery(poolGEO,query)#
      shinyjs::disable("gplSelection")#
      return(queryGSM)#
  })#
#
  output$searchResultsGSM <- DT::renderDataTable({#
          searchGSM()}, extensions = 'Buttons', options=list(#
              dom = 'Bfrtip',#
              buttons = list(list(extend = 'colvis')),#
              searching=TRUE, #
              paging=FALSE,#
              scrollX=TRUE, #
              scrollY='60vh', #
              scrollCollapse=TRUE,#
              fixedHeader=TRUE,#
              autoWidth=TRUE,#
              columnDefs=list(list(#
              targets = "_all",#
              render = JS(#
                  "function(data, type, row, meta) {",#
                      "return type === 'display' && typeof data === 'string' && data.length > 100 ?",#
                      "'<span title=\"' + data + '\">' + data.substr(0, 100) + '...</span>' : data;",#
                      "}") #
                      )))) ## typeof data needs to be a string, as a "NA" converted to JS "NULL" breaks things#
#
# Set up tables to store user-selected data#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
#
  proxy.search = dataTableProxy('searchResultsGSM')#
#
  ## Set up reactive table to store experimental samples#
  userSamples <- reactiveValues()#
  userSamples$df <- data.frame()#
  # 2019-07-31 Upload user data#
  # Upload read count table#
  #_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  userEset <- reactive({#
      inFile <- input$eset_upload#
      if (is.null(inFile))#
          return(NULL)#
      df<- read.csv(inFile$datapath,header=TRUE,sep=",")#
      return(df)#
  })#
  output$upload_table <- DT::renderDataTable({#
      df <- userEset()#
      datatable(df, options=list(#
          searching=TRUE, #
          paging=TRUE,#
          scrollX=TRUE, #
          scrollY='25vh',#
          scrollCollapse=TRUE,#
          fixedHeader=TRUE,#
          autoWidth=FALSE))#
      })#
  observeEvent(input$uploadButton, {#
      showModal(modalDialog(title="Select your data to upload for analysis","Make sure things look right before proceeding. There is the ability to add some options here, if I want to make it slightly more flexible (e.g. separator, header).", radioButtons("speciesSelection", "Choose species:", choices = c("Mouse" = "mouse", "Human" = "human")),#
          fileInput('eset_upload','Choose file to upload', accept = c('text/csv','text/comma-separated-values','.csv')),#
          DT::dataTableOutput("upload_table"),#
          easyClose = TRUE,#
          footer = tagList(#
              actionButton("uploaded","Upload read table"))))#
  })#
  # 'uploaded file' flag#
  eset_is_uploaded = FALSE#
  observeEvent(input$uploaded, {#
      eset_is_uploaded <<- TRUE#
      removeModal()#
      uploadSamples <- userEset()#
      tableRows <- ncol(uploadSamples)#
      userSamples$df <<- data.frame(samples = colnames(uploadSamples), category = rep("Not yet assigned", tableRows), features = rep(nrow(uploadSamples), tableRows), description = rep("User uploaded samples",tableRows))#
      updateTabsetPanel(session = session, inputId = "searchpanel", selected = "2")  ## jump to 'Assign' tab#
  })#
#
  observeEvent(input$clear_upload, {#
      eset_is_uploaded <<- FALSE#
      userSamples$df <<- data.frame()#
      removeModal()#
  })#
# Add sample (array) record to the current experiment #
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  observeEvent(input$addButton, {#
      if(eset_is_uploaded){#
          showModal(modalDialog(title = "Alert! Uploaded data detected.", "Continuing with public arrays will erase uploaded dataset.",#
              easyClose = TRUE, footer = tagList(actionButton("clear_upload","Proceed"), modalButton("Cancel"))))#
      } else {#
      gsm_selected <- searchGSM()[input$searchResultsGSM_rows_selected,]#
      gsm_selected$category <- rep("Not yet assigned", nrow(gsm_selected))#
      userSamples$df <<- rbind(userSamples$df,gsm_selected)#
      proxy.search %>% selectRows(NULL)#
      updateTabsetPanel(session = session, inputId = "searchpanel", selected = "2")#
      }#
  })#
#
# Assign categories to each sample (GSM)#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  observeEvent(input$assignButton, {#
        userSamples$df[,"category"] <<- as.character(userSamples$df[,"category"])#
        userSamples$df[input$gsm_table_rows_selected,"category"] <<- input$selection#
        userSamples$df[,"category"] <<- as.factor(userSamples$df[,"category"])#
  })      #
  output$gsm_table <- DT::renderDataTable({#
      if(input$assignButton == 0){#
         return (datatable(userSamples$df, extensions = 'Buttons', options=list(#
               dom = 'Bfrtip',#
               buttons = list(list(extend = 'colvis')),#
               searching=TRUE, #
               paging=FALSE,#
               scrollX=TRUE, #
               scrollY='60vh', #
               scrollCollapse=TRUE,#
               fixedHeader=TRUE,#
               autoWidth=TRUE,#
               columnDefs=list(list(#
             targets = "_all",#
             render = JS(#
                 "function(data, type, row, meta) {",#
                     "return type === 'display' && typeof data === 'string' && data.length > 100 ?",#
                     "'<span title=\"' + data + '\">' + data.substr(0, 100) + '...</span>' : data;",#
                     "}")#
                     )))))#
      } else {#
         return (datatable(userSamples$df, extensions = 'Buttons', options=list(#
             dom = 'Bfrtip',#
             buttons = list(list(extend = 'colvis')),#
             searching=TRUE, #
             paging=FALSE,#
             scrollX=TRUE, #
             scrollY='60vh', #
             scrollCollapse=TRUE,#
             fixedHeader=TRUE,#
             autoWidth=TRUE,#
             columnDefs=list(list(#
             targets = "_all",#
             render = JS(#
                 "function(data, type, row, meta) {",#
                     "return type === 'display' && typeof data === 'string' && data.length > 100 ?",#
                     "'<span title=\"' + data + '\">' + data.substr(0, 100) + '...</span>' : data;",#
                     "}")#
                     )))) %>%#
                     formatStyle('category', target="row", backgroundColor=styleEqual(c(input$cat1, input$cat2, input$cat3), c(rowCol[1], rowCol[2], rowCol[3]))))#
      }#
  })#
  proxy.gsm = dataTableProxy('gsm_table')#
  observeEvent(input$assignButton,{#
      proxy.gsm %>% selectRows(NULL)#
  }) #
  ## UI output#
#
    output$categorySelect <- renderUI(#
      fluidRow(#
        column(12,#
               selectizeInput("selection", "Select a Category",#
                           c("category1" <- {input$cat1},#
                             "category2" <- {input$cat2},#
                             "category3" <- {input$cat3},#
                             "category4" <- "Not included")#
                             # , options = list(create=TRUE, plugins = list("remove_button")))  ### <- "remove_button" isn't what I thought it was. I would also like the "create" option but I will need to link this to the table as cat1-3 are linked (otherwise new variables are not coloured or sent along for processing)#
        )#
      )     ### 2018-12-10 I'd like to have a button to add category 3#
    )#
    )  #
# Finished table, to ultimately lead to CEL download#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
userSamples$finishedtable <- NULL#
#
observeEvent(input$assignButton, {#
    userSamples$finishedtable <<- dplyr::filter(userSamples$df, category %in% c(input$cat1, input$cat2, input$cat3))#
})#
  output$finishedtable <- DT::renderDataTable({#
      if(!is.null(userSamples$finishedtable)){#
      datatable(userSamples$finishedtable,#
      options=list(#
          searching=FALSE, #
          paging=FALSE,#
          scrollX=TRUE, #
          scrollY='60vh', #
          scrollCollapse=TRUE,#
          fixedHeader=TRUE,#
          autoWidth=TRUE,#
          columnDefs=list(list(#
          targets = "_all",#
          render = JS(#
              "function(data, type, row, meta) {",#
                  "return type === 'display' && typeof data === 'string' && data.length > 100 ?",#
                  "'<span title=\"' + data + '\">' + data.substr(0, 100) + '...</span>' : data;",#
                  "}")#
          )))) %>%#
      formatStyle('category',target="row",#
      backgroundColor=styleEqual(c(input$cat1,input$cat2,input$cat3),c(rowCol[1],rowCol[2],rowCol[3]))#
  )}})#
#
rv <- reactiveValues(download_flag = 0)#
  output$report <- downloadHandler(#
      filename = function(){paste(input$downloadId,"GSM_report.csv",sep="_")},#
      content = function(file){#
          write.csv(userSamples$finishedtable,file)#
          rv$download_flag <- rv$download_flag + 1#
      })#
# Modal confirming CEL download, and processing function#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_     #
observeEvent(input$downloadCEL, {#
    if (!eset_is_uploaded){#
        userSamples$finishedtable %>% group_by(category) %>% summarise(n.gse = n_distinct(series_id)) -> gse.check#
        warning <- "Please click below to begin processing the data."#
        numCat <- length(gse.check$category)>1#
        if(length(which(gse.check$n.gse==1))!=0){#
            catAlert <- paste(gse.check$category[which(gse.check$n.gse==1)], collapse = ", ")#
            warning <- paste("WARNING: The following categories contain samples from a single experiment (GSE) and as such they will be confounded by batch effects: ",catAlert,".<br>Please proceed with caution or cancel and select additional samples to add to these categories.",sep="")#
        }#
        if(!numCat){#
            showModal(modalDialog(title="Error! A minimum of two categories are needed.","Experimental samples need to be organized into 2 or 3 categories for appropriate downstream analysis. If you are interested in only one type of sample, we suggest choosing samples to act as 'background', which will allow for differential analysis to identify which receptor genes are enriched or depleted in your sample of interest.",#
            easyClose = TRUE,#
            footer = tagList(#
                modalButton("Cancel")))) #
        } else {#
            showModal(modalDialog(title="Important! Downloading raw .CEL files from the NCBI server.",HTML(paste("June 20th, 2019<br>",warning)),#
            easyClose = TRUE,#
            footer = tagList(#
                modalButton("Cancel"),#
                actionButton("processCEL","Proceed"))))      #
        }}#
# If the flag is TRUE, confirm and process uploaded data#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_             #
    else { #
        shinyjs::disable("downloadCEL")#
        userID <<- processDataUpload(userSamples$finishedtable, userEset(), input$downloadId, input$comments, input$speciesSelection, poolUserData)#
        global$DatasetTable <<- loadUserDatasets(poolUserData)#
        showModal(modalDialog(title="Your dataset was successfully processed!","Analyse your data in the 'Load Expression Datasets' tab. You can also download a report from this page.",#
        easyClose = TRUE,#
        footer = tagList(#
            modalButton("OK"))))# modal#
    }#
  })#
#
observeEvent(input$processCEL, {#
    shinyjs::disable("processCEL")#
    userID <<- processData(userSamples$finishedtable, input$downloadId, input$comments, input$gplSelection, poolUserData)#
    global$DatasetTable <<- loadUserDatasets(poolUserData)#
    removeModal()#
    showModal(modalDialog(title="Your dataset was successfully processed!","Analyse your data in the 'Load Expression Datasets' tab. You can also download a report from this page.",#
    easyClose = TRUE,#
    footer = tagList(#
        modalButton("OK"))))# modal#
  })#
# Reset button, modal confirmation#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  observeEvent(input$linkReset, {#
      showModal(modalDialog(title="Important! Are you sure you want to reset everything?","All searches and categorized samples will be lost. This can not be undone.",#
      footer = tagList(#
          modalButton("Cancel"),#
          actionButton("buttonReset","Yes, reset."))))# modal#
      # confirm reset (all categories, sample search, gone)#
      observeEvent(input$buttonReset, {#
          shinyjs::enable("gplSelection")#
          userSamples$df <<- userSamples$df[0,]#
          reset("searchText")#
          reset("cat1")#
          reset("cat2")#
          reset("cat3")#
          reset("downloadId")#
          replaceData(proxy.search, NULL)#
          replaceData(proxy.gsm, NULL)#
          userSamples$finishedtable <<- NULL#
          removeModal()#
          updateTabsetPanel(session = session, inputId = "searchpanel", selected = "1")#
        })#
  })#
#   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-#
#  / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \#
# `-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'#
#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
## This is where the analysis begins#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
#
# Quick link from the main page#
observeEvent(input$linkLoad, {#
  updateNavbarPage(session, "receptorMain", selected="expressionPanel")#
})#
#
# Conditional nav tabs#
hideTab(inputId = "receptorMain", target = "Gene-level Expression")#
hideTab(inputId = "receptorMain", target = "Sample-level Expression")#
#
observeEvent(input$user_data,{#
    if(input$user_data!="none"){#
        showTab(inputId = "receptorMain", target = "Gene-level Expression")#
        showTab(inputId = "receptorMain", target = "Sample-level Expression")#
    } else {#
        hideTab(inputId = "receptorMain", target = "Gene-level Expression")#
        hideTab(inputId = "receptorMain", target = "Sample-level Expression")#
#
    }#
})#
#
# Load dataset#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
output$loadUserExperiments = renderUI({#
    selectizeInput(inputId="user_data",label="Select an experiment for analysis",choices=c("none"="none",split(global$DatasetTable$desc, global$DatasetTable$species)),selected="none")#
})#
observeEvent(input$user_data,{#
    id <- NULL#
    datasetToLoad <- NULL#
   if(input$user_data=="none"){#
        mapped_probes<<-NULL  ### this is going to be the key for detecting upload data#
        uploaded_features<<-NULL ## ^ this set will be used for uploaded data#
        eset<<-NULL#
        de_choices<<-NULL#
        sig_genes_lfc<<-NULL#
    }else{         #
        id <- global$DatasetTable$userID[which(global$DatasetTable$desc == input$user_data)]#
        assign(#
              x = "species", value = global$DatasetTable$species[which(global$DatasetTable$desc == input$user_data)], envir = .GlobalEnv#
           )#
           uploaded_features <<-NULL ## I think this might have to be here for non-uploaded datasets#
        datasetToLoad <- paste("./data/app_data_", id, ".rda", sep='')#
        withProgress(message="Loading dataset",value=0.2,{#
            load(datasetToLoad,envir=.GlobalEnv)#
            incProgress(0.3, message = "Loading contrasts")#
            updateCheckboxGroupInput(session, "tissues", choices = groups, selected = groups)#
            updateCheckboxGroupInput(session, "pls_tissues", choices = groups, selected = groups)#
            updateCheckboxGroupInput(session, "de", choices = de_choices, selected = de_choices[1])#
            incProgress(0.3, message ="Loading genelists")#
            updateCheckboxGroupInput(session, "genelist", label = NULL, choices = names(gene_lists[[species]]), selected = NULL, inline = FALSE)#
            incProgress(0.2, message = "Loading gene names")#
            # updateSelectInput(session, "gene", choices = all_genes[species])#
            if(is.null(uploaded_features)){#
                updateSelectInput(session, "gene", choices = mapped_probes)#
            }#
            if(is.null(mapped_probes)){#
                updateSelectInput(session, "gene", choices = make.names(uploaded_features))#
            }#
        })#
    }#
})#
#
# Download DEG#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
#
rvDEG <- reactiveValues(download_flag = 0)#
#
  # proxy.finishedtable = dataTableProxy('finishedtable')#
  output$reportDEG <- downloadHandler(#
      filename = paste(input$user_data,"DEG_report.xlsx",sep="_"),#
      # filename = paste(input$user_data,"DEG_report.csv",sep="_"),#
      content = function(file){#
          write_xlsx(sig_genes_lfc, path=file)#
          rvDEG$download_flag <- rvDEG$download_flag + 1#
      })#
#
# QC output#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
#
output$QC = renderUI({#
  validate(#
    need(input$user_data!="none","No dataset selected"),#
    need(is.null(uploaded_features), "QC data not available for uploaded read table")#
  )#
#
  id <- global$DatasetTable$userID[which(global$DatasetTable$desc == input$user_data)]#
#
  fluidRow(#
      inlineCSS(list(#
          "#norm" = c("max-width:100%","width=100%"))),#
      h4("Expression normalization (array intensity, before and after)"), #
      tags$div(class="norm",#
          tags$img(src=paste("array_normalization_", id, ".png", sep=''))#
          ),#
      h4("RNA degradation plot (probe position along transcript vs intensity)"),#
      tags$img(src=paste("probe_degradation_", id, ".png", sep='')))#
})#
# Load genes tab#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
#
  geneList = reactive({#
    if (is.null(input$genelist) && is.null(input$gene)) {#
      return(NULL)#
    }#
    genes = c()#
#
    if (!is.null(input$genelist)) {#
      for (gene in input$genelist) {#
        genes = c(genes, gene_lists[[species]][[gene]])#
      }#
    }#
#
    if (!is.null(input$gene)) {#
      genes = c(genes, input$gene)#
    }#
    return(unname(genes))#
  })#
 summary_gene_data = reactive({#
     validate(#
       need(input$user_data!="none","No dataset selected. Please select an experiment for analysis."),#
       need(geneList(), "No genes selected. Please select receptor type(s) to analyse.")#
     )#
   get_expression_summary(eset, geneList())#
 })#
# Gene outputs#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  output$genes = DT::renderDataTable({#
      validate(#
        need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
        need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'.")#
      )#
     summary_gene_data() %>% datatable() %>% #
      formatRound(2:4)#
  })#
  # single gene plot#
 output$singleGenePlot = renderPlot({#
     validate(#
       need(input$user_data!="none","No dataset selected."),#
       need(geneList(), "No genes selected."),#
       need(input$genes_rows_selected >= 1, "Please select one or more genes from the 'Average Expression' table to inspect expression by tissue type.")#
     )#
    rows = as.integer(input$genes_rows_selected)#
    genes_to_plot = summary_gene_data()$Symbol[rows]#
    gene_data = get_gene_data(eset, genes_to_plot)#
    density <- gene_data %>% group_by(tissue) %>% summarise(count=n())#
    if (any(density$count < 3)) {by_gene_violplot(gene_data,tissues=groups)}#
        else {by_gene_boxplot(gene_data,tissues=groups)}#
  })#
#
# Expression tab#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  observe({#
    toggle("de_choices", anim = TRUE, condition = input$de_state )#
  })#
  genesToPlot = reactive({#
    validate(#
      need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
      need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'.")#
    )#
#
    genes = geneList()#
    if(input$de_state) {#
      selected_de = input$de#
      de_lists = lapply(selected_de, function(x) {as.character(get_de_genes(genes, x, sig_genes_lfc)$Symbol) })#
      genes = Reduce(union, de_lists)#
    } #
    return(genes) #
  }) #
# Heatmap plot#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  output$expressionPlot = renderPlot({#
      validate(#
          need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
          need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
          need(input$tissues, "No tissues selected. Please choose at least one tissue to plot receptor heatmap."),#
          need(length(genesToPlot())>10, if(input$de_state){paste("Based on the genes selected in 'Load Data', ", length(genesToPlot())," genes were differentially expressed in these tissues (",paste(input$tissues, collapse = ", "), "); try unselecting that option in the side menu.",sep="")}else{paste("No genes to plot as a heatmap (minimum = 10). Try including more receptor types in 'Load Data'.")})#
    )#
    selected_tissues = input$tissues#
    sub_eset = eset[, eset$tissue %in% selected_tissues]#
    genes = genesToPlot()#
    if(is.null(uploaded_features)){genes = gene2probe(genesToPlot(), mapped_probes)}#
    cat(file=stderr(), "Preparing heatmap:\n Tissues:", paste(input$tissues, collapse = ", "), "\n gene list: ",paste(genesToPlot(),collapse=", "),"\n genes: ", paste(genes,collapse=", "),"\n")#
    gene_heatmap(sub_eset, genes, scale = "row",#
                  probe_level = input$hm_probes,#
                  gsm_show = input$hm_gsm,#
                  show_rownames = input$hm_rownames,#
                  cluster_rows = input$hm_row_cluster,#
                  cluster_cols = input$hm_col_cluster,#
                  border_color = NA)#
    })#
  output$heatmap_ui = renderUI({#
    plotOutput("expressionPlot", height = input$hm_height, width = input$hm_width)#
  })#
#
# Overall expression#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  output$overallPlot = renderPlot({#
    validate(#
        need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
        need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
    need(input$tissues, "No tissues selected. Please choose at least one tissue to plot receptor heatmap."),#
    need(length(genesToPlot())>1, if(input$de_state){paste("Based on the genes selected in 'Load Data', ", length(genesToPlot())," genes were differentially expressed in these tissues (",paste(input$tissues, collapse = ", "), "); try unselecting that option in the side menu.",sep="")}else{paste("No genes to plot. Try including more receptor types in 'Load Data'.")}) #
    )#
    gene_data = get_gene_data(eset, genesToPlot())#
    overall_expression_boxplot(gene_data, tissues = input$tissues)#
  })#
# By gene boxplots ----------------------------------------------------------------------------#
#
  output$byGenePlot = renderPlot({#
      validate(#
          need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
          need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
      need(input$tissues, "No tissues selected. Please choose at least one tissue to plot receptor heatmap."),#
      need(length(genesToPlot())>1, if(input$de_state){paste("Based on the genes selected in 'Load Data', ", length(genesToPlot())," genes were differentially expressed in these tissues (",paste(input$tissues, collapse = ", "), "); try unselecting that option in the side menu.",sep="")}else{paste("No genes to plot. Try including more receptor types in 'Load Data'.")}) #
      )    #
    gene_data = get_gene_data(eset, genesToPlot())#
    by_gene_boxplot(gene_data, tissues = input$tissues)#
  })#
  plsdaData = reactive({#
    selected_tissues = input$pls_tissues#
    if(length(selected_tissues) < 2) {#
      return(NULL)#
    }#
    sub_eset = eset[, eset$tissue %in% selected_tissues]#
    genes = gene2probe(geneList(), mapped_probes)#
    # probe = input$pls_probe#
    get_plsda(sub_eset, genes, probe = FALSE) #
  })#
#
# PCA plot ----------------------------------------------------------------------------#
  output$indPlot = renderPlot({#
    validate(#
        need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
        need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
       need(length(input$pls_tissues) >= 2, "Please select at least two tissues for a PLS-DA plot.")#
    )#
    plotIndiv(plsdaData()$result, ind.names = FALSE, group = factor(plsdaData()$tissue_grps), pch = 16, #
              col.per.group = brewer.pal(3, "Set1")[1:length(input$pls_tissues)], legend = TRUE, cex = 2, ellipse=TRUE, title="Plot of individual arrays",style="graphics")#
  })#
#
# Correlation Circle plot ----------------------------------------------------------------------------  #
  output$varPlot = renderPlot({#
      validate(#
          need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
          need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
         need(length(input$pls_tissues) >= 2, "Please select at least two tissues for a Correlation circle plot.")#
      )#
      comp = as.integer(input$pls_ncomp)#
    plotVar(plsdaData()$result, var.names = list(plsdaData()$varNames), comp.select=comp, cex = 1, overlap=FALSE, col="grey",title="Correlation circle between genes and discriminant components", style="graphics")#
  })#
#
  output$numGenesUI = renderUI({#
    numericInput("pls_num_genes", "Select number of genes to show contributions for", #
                 value = 25, min = 1, max = length(geneList()), step = 1)#
  })#
# Loadings plot ----------------------------------------------------------------------------#
  output$contribPlot = renderPlot({#
      validate(#
          need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
          need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
         need(length(input$pls_tissues) >= 2, "Please select at least two tissues for a Loadings plot.")#
      )#
    grps = plsdaData()$result$names$colnames$Y#
    ndisplay = input$pls_num_genes#
    comp = as.integer(input$pls_ncomp)#
    plotLoadings(plsdaData()$result, name.var = plsdaData()$varNames, ndisplay = ndisplay, comp = comp, contrib='max', method='mean',legend.color = catCol[1:length(grps)],title=paste("Weight of the top ", ndisplay, " genes contributing to discriminant component ", comp, sep=""),size.title=1)#
  })#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$  #
  ## Kill shinyApp when session closes#
  session$onSessionEnded(stopApp)#
#
}
g()
q()
