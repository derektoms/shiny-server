EnhancedVolcano(locres1s,lab=rownames(sno.local),x='log2FoldChange',y='pvalue',xlim=c(-3,3),FCcutoff = 1.5,title = "Differences in snoRNA localization",transcriptLabSize = 3.0)
EnhancedVolcano(locres1s,lab=rownames(sno.local),x='log2FoldChange',y='pvalue',xlim=c(-3,3),FCcutoff = 1.5,title = "Differences in snoRNA localization",transcriptLabSize = 3.0,transcriptPointSize =3)
EnhancedVolcano(locres1s,lab=rownames(sno.local),x='log2FoldChange',y='pvalue',xlim=c(-3,3),FCcutoff = 1.5,title = "Differences in snoRNA localization",transcriptLabSize = 3.0,transcriptPointSize =2)
?EnchancedVolcano
?EnhancedVolcano
EnhancedVolcano(locres1s,lab=rownames(sno.local),x='log2FoldChange',y='pvalue',xlim=c(-3,3),FCcutoff = 1.5,title = "Differences in snoRNA localization",transcriptLabSize = 3.0,transcriptPointSize =2,DrawConnectors=TRUE)
EnhancedVolcano(locres1s,lab=rownames(sno.local),x='log2FoldChange',y='padj',xlim=c(-3,3),FCcutoff = 1.5,title = "Differences in snoRNA localization",transcriptLabSize = 3.0,transcriptPointSize =2,DrawConnectors=TRUE)
locres1s
sno.local
EnhancedVolcano(locres1s,lab=rownames(sno.local),x='log2FoldChange',y='padj',xlim=c(-3,3),FCcutoff = 1,title = "Differences in snoRNA localization",transcriptLabSize = 3.0,transcriptPointSize =2,DrawConnectors=TRUE)
keyvals <- rep("grey",nrow(locres1s))#
names(keyvals) <- rep('equal expression',nrow(locres1s))#
#
keyvales[which[locres1s$log2FoldChange > 1]] <- ann_col$subcell[3]#
names(keyvales[which[locres1s$log2FoldChange > 1]]) <- 'nucleus-enriched'#
#
keyvales[which[locres1s$log2FoldChange < -1]] <- ann_col$subcell[4]#
names(keyvales[which[locres1s$log2FoldChange < -1]]) <- 'cytoplasm-enriched'#
#
EnhancedVolcano(locres1s,lab=rownames(sno.local),x='log2FoldChange',y='pvalue',xlim=c(-3,3),FCcutoff = 1.5,colCustom=keyvals)
keyvals <- rep("grey",nrow(locres1s))#
names(keyvals) <- rep('equal expression',nrow(locres1s))#
#
keyvals[which[locres1s$log2FoldChange > 1]] <- ann_col$subcell[3]#
names(keyvals[which[locres1s$log2FoldChange > 1]]) <- 'nucleus-enriched'#
#
keyvals[which[locres1s$log2FoldChange < -1]] <- ann_col$subcell[4]#
names(keyvals[which[locres1s$log2FoldChange < -1]]) <- 'cytoplasm-enriched'#
#
EnhancedVolcano(locres1s,lab=rownames(sno.local),x='log2FoldChange',y='pvalue',xlim=c(-3,3),FCcutoff = 1.5,colCustom=keyvals)
keyvals <- rep("grey",nrow(locres1s))#
names(keyvals) <- rep('equal expression',nrow(locres1s))#
#
keyvals[which[locres1s$log2FoldChange > 1]] <- pull(ann_col$subcell[3])#
names(keyvals[which[locres1s$log2FoldChange > 1]]) <- 'nucleus-enriched'#
#
keyvals[which[locres1s$log2FoldChange < -1]] <- pull(ann_col$subcell[4])#
names(keyvals[which[locres1s$log2FoldChange < -1]]) <- 'cytoplasm-enriched'
keyvals <- rep("grey",nrow(locres1s))#
names(keyvals) <- rep('equal expression',nrow(locres1s))#
#
keyvals[which[locres1s$log2FoldChange > 1]] <- ann_col$subcell[3]
keyvals
keyvals[which(locres1s$log2FoldChange > 1) <- ann_col$subcell[3]#
names(keyvals[which(locres1s$log2FoldChange > 1)]) <- 'nucleus-enriched'#
#
keyvals[which(locres1s$log2FoldChange < -1)] <- ann_col$subcell[4]#
names(keyvals[which(locres1s$log2FoldChange < -1)]) <- 'cytoplasm-enriched'
keyvals <- rep("grey",nrow(locres1s))#
names(keyvals) <- rep('equal expression',nrow(locres1s))#
#
keyvals[which(locres1s$log2FoldChange > 1)] <- ann_col$subcell[3]#
names(keyvals[which(locres1s$log2FoldChange > 1)]) <- 'nucleus-enriched'#
#
keyvals[which(locres1s$log2FoldChange < -1)] <- ann_col$subcell[4]#
names(keyvals[which(locres1s$log2FoldChange < -1)]) <- 'cytoplasm-enriched'
head(keyvals)
keyvals
keyvals[which(locres1s$log2FoldChange > 1)]
ann_col$subcell[1]
keyvals[which(locres1s$log2FoldChange > 1)] <- ann_col$subcell[1]#
names(keyvals[which(locres1s$log2FoldChange > 1)]) <- 'nucleus-enriched'#
#
keyvals[which(locres1s$log2FoldChange < -1)] <- ann_col$subcell[2]#
names(keyvals[which(locres1s$log2FoldChange < -1)]) <- 'cytoplasm-enriched'
keyvals[which(locres1s$log2FoldChange > 1)]
names(keyvals[which(locres1s$log2FoldChange > 1)])
names(keyvals[which(locres1s$log2FoldChange > 1)])<-"nucleus-enriched"
names(keyvals[which(locres1s$log2FoldChange > 1)])
names(keyvals[which(locres1s$log2FoldChange > 1)])<-rep("nucleus-enriched",6)
names(keyvals[which(locres1s$log2FoldChange > 1)])
keyvals[which(locres1s$log2FoldChange > 1)] <- ann_col$subcell[1]#
names(keyvals)[which(locres1s$log2FoldChange > 1)] <- 'nucleus-enriched'#
#
keyvals[which(locres1s$log2FoldChange < -1)] <- ann_col$subcell[2]#
names(keyvals)[which(locres1s$log2FoldChange < -1)] <- 'cytoplasm-enriched'
unique(names(keyvals))
EnhancedVolcano(locres1s,lab=rownames(sno.local),x='log2FoldChange',y='pvalue',xlim=c(-3,3),FCcutoff = 1.5,ColCustom=keyvals)
?EnchancedVolcano
?EnhancedVolcano
EnhancedVolcano(locres1s,lab=rownames(sno.local),x='log2FoldChange',y='pvalue',xlim=c(-3,3),FCcutoff = 1.5,colOverride=keyvals)
EnhancedVolcano(locres1s, lab=rownames(sno.local), x='log2FoldChange', y='pvalue', xlim=c(-3,3), FCcutoff = 1, colOverride=keyvals, title = "Differences in snoRNA localization", transcriptLabSize = 3.0, transcriptPointSize =2, DrawConnectors=TRUE)
keyvals <- rep("grey",nrow(locres1s))#
names(keyvals) <- rep('similar expression',nrow(locres1s))#
#
keyvals[which(locres1s$log2FoldChange > 1)] <- ann_col$subcell[1]#
names(keyvals)[which(locres1s$log2FoldChange > 1)] <- 'nucleus-enriched'#
#
keyvals[which(locres1s$log2FoldChange < -1)] <- ann_col$subcell[2]#
names(keyvals)[which(locres1s$log2FoldChange < -1)] <- 'cytoplasm-enriched'#
#
EnhancedVolcano(locres1s, lab=rownames(sno.local), x='log2FoldChange', y='pvalue', xlim=c(-3,3), FCcutoff = 1, colOverride=keyvals, title = "Differences in snoRNA localization", transcriptLabSize = 3.0, transcriptPointSize =2, DrawConnectors=TRUE)
nrow(locres1s)
write.csv("Desktop/snoRNA.csv",rownames(locres1s))
write.csv(rownames(locres1s),"Desktop/snoRNA.csv")
CD <- c("RF00016","RF00049","RF00055","RF00067","RF00068","RF00069","RF00071")#
#
keyvals.shape <- rep(21,nrow(locres1s))#
names(keyvals.shape) <- rep('uncategorized',nrow(locres1s))#
#
keyvals.shape[which(rownames(locres1s) %in% CD)] <- 24#
names(keyvals.shape)[which(rownames(locres1s) %in% CD)] <- 'C/D Box'
?EnhancedVolcano
devtools::install_github('kevinblighe/EnhancedVolcano')
library(EnhancedVolcano)
EnhancedVolcano(locres1s, lab=rownames(sno.local), x='log2FoldChange', y='pvalue', xlim=c(-3,3), FCcutoff = 1, colOverride=keyvals, title = "Differences in snoRNA localization", transcriptLabSize = 3.0, transcriptPointSize =2, DrawConnectors=TRUE)
EnhancedVolcano(locres1s, lab=rownames(sno.local), x='log2FoldChange', y='pvalue', xlim=c(-3,3), FCcutoff = 1, colOverride=keyvals, title = "Differences in snoRNA localization", transcriptLabSize = 3.0, transcriptPointSize =2, drawConnectors=TRUE)
ver(EnhancedVolcano)
ver(EnhancedVolcano)packageVersion
packageVersion(EnhancedVolcano)
packageVersion("EnhancedVolcano")
detach_package <- function(pkg, character.only = FALSE)#
{#
  if(!character.only)#
  {#
    pkg <- deparse(substitute(pkg))#
  }#
  search_item <- paste("package", pkg, sep = ":")#
  while(search_item %in% search())#
  {#
    detach(search_item, unload = TRUE, character.only = TRUE)#
  }#
}
detach_package(9vegan)
detach_package(EnhancedVolcano)
library(EnhancedVolcano)
packageVersion("EnhancedVolcano")
?enhancedVolcano
?EnhancedVolcano
remove.packages("EnhancedVolcano")
detach_package(EnhancedVolcano)
remove.packages("EnhancedVolcano")
devtools::install_github('kevinblighe/EnhancedVolcano')
EnhancedVolcano(locres1s, lab=rownames(sno.local), x='log2FoldChange', y='pvalue', xlim=c(-3,3), FCcutoff = 1, colOverride=keyvals, title = "Differences in snoRNA localization", transcriptLabSize = 3.0, transcriptPointSize =2, DrawConnectors=TRUE)
EnhancedVolcano(locres1s, lab=rownames(sno.local), x='log2FoldChange', y='pvalue', xlim=c(-3,3), FCcutoff = 1, colCustom=keyvals, shapeCustom=keyvals.shape, title = "Differences in snoRNA localization", transcriptLabSize = 3.0, transcriptPointSize =2, drawConnectors=TRUE)
keyvals.shape <- rep(16,nrow(locres1s))#
names(keyvals.shape) <- rep('uncategorized',nrow(locres1s))#
#
keyvals.shape[which(rownames(locres1s) %in% CD)] <- 17#
names(keyvals.shape)[which(rownames(locres1s) %in% CD)] <- 'C/D Box'#
EnhancedVolcano(locres1s, lab=rownames(sno.local), x='log2FoldChange', y='pvalue', xlim=c(-3,3), FCcutoff = 1, colCustom=keyvals, shapeCustom=keyvals.shape, title = "Differences in snoRNA localization", transcriptLabSize = 3.0, transcriptPointSize =2, drawConnectors=TRUE)
keyvals.shape <- rep(16,nrow(locres1s))#
names(keyvals.shape) <- rep('uncategorized',nrow(locres1s))#
#
keyvals.shape[which(rownames(locres1s) %in% CD)] <- 17#
names(keyvals.shape)[which(rownames(locres1s) %in% CD)] <- 'C/D Box'#
#
keyvals.shape[which(rownames(locres1s) %in% HACA)] <- 15#
names(keyvals.shape)[which(rownames(locres1s) %in% HACA)] <- 'H/ACA Box'#
EnhancedVolcano(locres1s, lab=rownames(sno.local), x='log2FoldChange', y='pvalue', xlim=c(-3,3), FCcutoff = 1, colCustom=keyvals, shapeCustom=keyvals.shape, title = "Differences in snoRNA localization", transcriptLabSize = 3.0, transcriptPointSize =2, drawConnectors=TRUE)
HACA <- c("RF00045","RF00056","RF00072")#
#
keyvals.shape <- rep(16,nrow(locres1s))#
names(keyvals.shape) <- rep('uncategorized',nrow(locres1s))#
#
keyvals.shape[which(rownames(locres1s) %in% CD)] <- 17#
names(keyvals.shape)[which(rownames(locres1s) %in% CD)] <- 'C/D Box'#
#
keyvals.shape[which(rownames(locres1s) %in% HACA)] <- 15#
names(keyvals.shape)[which(rownames(locres1s) %in% HACA)] <- 'H/ACA Box'#
EnhancedVolcano(locres1s, lab=rownames(sno.local), x='log2FoldChange', y='pvalue', xlim=c(-3,3), FCcutoff = 1, colCustom=keyvals, shapeCustom=keyvals.shape, title = "Differences in snoRNA localization", transcriptLabSize = 3.0, transcriptPointSize =2, drawConnectors=TRUE)
EnhancedVolcano(locres1s, lab=rownames(sno.local), x='log2FoldChange', y='pvalue', xlim=c(-3,3), FCcutoff = 1, colCustom=keyvals, shapeCustom=keyvals.shape, title = "Differences in snoRNA localization", transcriptLabSize = 3.0, transcriptPointSize =2, drawConnectors=TRUE, legendPosition='right')
EnhancedVolcano(locres1s, lab=rownames(sno.local), x='log2FoldChange', y='pvalue', xlim=c(-3,3), FCcutoff = 1, colCustom=keyvals, shapeCustom=keyvals.shape, title = "Differences in snoRNA localization", transcriptLabSize = 3.0, transcriptPointSize =2, drawConnectors=TRUE, legendPosition='right', legendLabSize = 16, legendIconSize = 5.0)
EnhancedVolcano(locres1s, lab=rownames(sno.local), x='log2FoldChange', y='pvalue', xlim=c(-3,3), FCcutoff = 1, colCustom=keyvals, shapeCustom=keyvals.shape, title = "Differences in snoRNA localization", transcriptLabSize = 3.0, transcriptPointSize =2, drawConnectors=TRUE, legendPosition='right', legendLabSize = 10, legendIconSize = 2.0)
EnhancedVolcano(locres1s, lab=rownames(sno.local), x='log2FoldChange', y='pvalue', xlim=c(-3,3), FCcutoff = 1, colCustom=keyvals, shapeCustom=keyvals.shape, title = "Differences in snoRNA localization", transcriptLabSize = 3.0, transcriptPointSize =2, drawConnectors=TRUE, colConnectors="grey50", legendPosition='right', legendLabSize = 10, legendIconSize = 2.0)
EnhancedVolcano(locres1s, lab=rownames(sno.local), x='log2FoldChange', y='padj', xlim=c(-3,3), FCcutoff = 1, colCustom=keyvals, shapeCustom=keyvals.shape, title = "Differences in snoRNA localization", transcriptLabSize = 3.0, transcriptPointSize =2, drawConnectors=TRUE, colConnectors="grey50", legendPosition='right', legendLabSize = 10, legendIconSize = 2.0)
EnhancedVolcano(locres1s, lab=rownames(sno.local), x='log2FoldChange', y='pvalue', xlim=c(-3,3), FCcutoff = 1, colCustom=keyvals, shapeCustom=keyvals.shape, title = "Differences in snoRNA localization", transcriptLabSize = 3.0, transcriptPointSize =2, drawConnectors=TRUE, colConnectors="grey50", legendPosition='right', legendLabSize = 10, legendIconSize = 2.0)
EnhancedVolcano(locres1s, lab=rownames(sno.local), x='log2FoldChange', y='padj', xlim=c(-3,3), FCcutoff = 1, colCustom=keyvals, shapeCustom=keyvals.shape, title = "Differences in snoRNA localization", transcriptLabSize = 3.0, transcriptPointSize =2, drawConnectors=TRUE, colConnectors="grey50", legendPosition='right', legendLabSize = 10, legendIconSize = 2.0)
EnhancedVolcano(locres1s, lab=rownames(sno.local), x='log2FoldChange', y='pvalue', xlim=c(-3,3), FCcutoff = 1, colCustom=keyvals, shapeCustom=keyvals.shape, title = "Differences in snoRNA localization", transcriptLabSize = 3.0, transcriptPointSize =2, drawConnectors=TRUE, colConnectors="grey50", legendPosition='right', legendLabSize = 10, legendIconSize = 2.0)
HACA <- c("RF00045","RF00056","RF00072","RF00428")
keyvals.shape <- rep(16,nrow(locres1s))#
names(keyvals.shape) <- rep('uncategorized',nrow(locres1s))#
#
keyvals.shape[which(rownames(locres1s) %in% CD)] <- 17#
names(keyvals.shape)[which(rownames(locres1s) %in% CD)] <- 'C/D Box'#
#
keyvals.shape[which(rownames(locres1s) %in% HACA)] <- 15#
names(keyvals.shape)[which(rownames(locres1s) %in% HACA)] <- 'H/ACA Box'#
EnhancedVolcano(locres1s, lab=rownames(sno.local), x='log2FoldChange', y='pvalue', xlim=c(-3,3), FCcutoff = 1, colCustom=keyvals, shapeCustom=keyvals.shape, title = "Differences in snoRNA localization", transcriptLabSize = 3.0, transcriptPointSize =2, drawConnectors=TRUE, colConnectors="grey50", legendPosition='right', legendLabSize = 10, legendIconSize = 2.0)
CD <- c("RF00016","RF00049","RF00055","RF00067","RF00068","RF00069","RF00071","RF00580","RF00594","RF01191")#
HACA <- c("RF00045","RF00056","RF00072","RF00400","RF00428")#
#
keyvals.shape <- rep(16,nrow(locres1s))#
names(keyvals.shape) <- rep('uncategorized',nrow(locres1s))#
#
keyvals.shape[which(rownames(locres1s) %in% CD)] <- 17#
names(keyvals.shape)[which(rownames(locres1s) %in% CD)] <- 'C/D Box'#
#
keyvals.shape[which(rownames(locres1s) %in% HACA)] <- 15#
names(keyvals.shape)[which(rownames(locres1s) %in% HACA)] <- 'H/ACA Box'#
EnhancedVolcano(locres1s, lab=rownames(sno.local), x='log2FoldChange', y='pvalue', xlim=c(-3,3), FCcutoff = 1, colCustom=keyvals, shapeCustom=keyvals.shape, title = "Differences in snoRNA localization", transcriptLabSize = 3.0, transcriptPointSize =2, drawConnectors=TRUE, colConnectors="grey50", legendPosition='right', legendLabSize = 10, legendIconSize = 2.0)
coldata<-read.csv('~/Documents/Manuscripts/Nuclear microRNA/Bioinformatics/column_data2.csv')
coldata
samples <- data.frame(label=substr(piF,1,3), size=c(rep("large",4),rep("small",4),rep("large",4),rep("small",3)), local=c(rep("cyt",8),rep("nuc",7)),batch=c(1,1,1,2,1,1,1,2,1,1,1,2,1,1,1))
samples <- data.frame(label=substr(snoF,1,3), size=c(rep("large",4),rep("small",4),rep("large",4),rep("small",3)), local=c(rep("cyt",8),rep("nuc",7)),batch=c(1,1,1,2,1,1,1,2,1,1,1,2,1,1,1))
samples
samples$label <- as.character(samples$label)
snoMat <- DESeqDataSetFromMatrix(countData = sno.reads2, colData = samples[-8:-1,], design=~size+batch)
samples <- data.frame(label=substr(snoF,1,3), size=c(rep("large",4),rep("small",4),rep("large",4),rep("small",3)), local=c(rep("cyt",8),rep("nuc",7)),batch=factor(c(1,1,1,2,1,1,1,2,1,1,1,2,1,1,1)))#
samples$label <- as.character(samples$label)
snoMat <- DESeqDataSetFromMatrix(countData = sno.reads2, colData = samples[-8:-1,], design=~size+batch)
dds1s <- DESeq(snoMat)#
sno.size <- results(dds1s)#
sno.size[which(sno.size$padj<0.1),]
resultsNames(sno.size)
resultsNames(dds1s)
sno.size <- results(dds1s,contrast = "size_small_vs_large")#
sno.size[which(sno.size$padj<0.1),]
sno.size <- results(dds1s,contrast = c("size","small","large"))
sno.size[which(sno.size$padj<0.1),]
ggplot(as(sno.size, "data.frame"), aes(x = pvalue)) + geom_histogram(binwidth = 0.01, fill = "darkslategray", boundary = 0) # adjusted p-values are all between 0.99 and 1.00!
mapped.sno2 <- all.sno %>% group_by(gene,size,label) %>% tally() # number of reads mapped to each reference snoRNA#
all.sno.reads <- mapped.sno2[-2] %>% ungroup %>% group_by(gene) %>% spread(label,n,fill=0)#
#
## Set up the matrix#
all.sno.reads <- as.data.frame(all.sno.reads)#
row.names(all.sno.reads) <- all.sno.reads$gene#
all.sno.reads <- all.sno.reads[,-1] # drop genes as column#
snoMat2 <- DESeqDataSetFromMatrix(countData = all.sno.reads, colData = samples, design=~size+batch)#
#
## snoRNA comparison, combining all localizations dds2s#
dds2s <- DESeq(snoMat2)#
sno.size2 <- results(dds2s)#
sno.size2[which(sno.size2$padj<0.1),]
sno.size2 <- results(dds2s,contrast = c("size","small","large"))#
sno.size2[which(sno.size2$padj<0.1),]
design(snoMat2) <- ~size*local+batch#
dds3s<-DESeq(snoMat2)
resultsNames(dds3s)
sno.size.local <- results(dds3s,contrast = c("size","small","large"))#
sno.size.local[which(sno.size.local$padj<0.1),]
sno.size.local <- results(dds3s,contrast = c("local","nuc","cyt"))#
sno.size.local[which(sno.size.local$padj<0.1),]
sno.size.local <- results(dds3s,contrast = 5)#
sno.size.local[which(sno.size.local$padj<0.1),]
?results
sno.size.local <- results(dds3s,contrast = "sizesmall.localnuc")#
sno.size.local[which(sno.size.local$padj<0.1),]
sno.size.local <- results(dds3s,contrast = list("sizesmall.localnuc"))#
sno.size.local[which(sno.size.local$padj<0.1),]
sno.size.local <- results(dds3s,contrast = list("local_nuc_vs_cyt"))#
sno.size.local[which(sno.size.local$padj<0.1),]
design(snoMat2) <- ~local+batch#
dds4s<-DESeq(snoMat2)
resultsNames(dds4s)
sno.local <- results(dds4s, contrast = c("local","nuc","cyt"))#
sno.local[which(sno.local$padj<0.1),]
ggplot(as(sno.local, "data.frame"), aes(x = padj)) + geom_histogram(binwidth = 0.01, fill = "darkslategray", boundary = 0) # 106 DEGs
locres1s <- lfcShrink(dds4s, coef="local_nuc_vs_cyt", type="apeglm")
design(snoMat2) <- ~group+batch#
dds5s<-DESeq(snoMat2)#
resultsNames(dds5s)#
#
sno.nuc.sizes<-results(dds5s, contrast=c("group","largenuc","smallnuc")) # 0#
sno.cyt.sizes<-results(dds5s, contrast=c("group","largecyt","smallcyt")) # 0#
sno.lg.local<-results(dds5s, contrast=c("group","largenuc","largecyt")) # 64#
sno.sm.local<-results(dds5s, contrast=c("group","smallnuc","smallcyt")) # 64
snoMat2$group <- factor(paste0(snoMat2$size,snoMat2$local))#
design(snoMat2) <- ~group+batch#
dds5s<-DESeq(snoMat2)#
resultsNames(dds5s)#
#
sno.nuc.sizes<-results(dds5s, contrast=c("group","largenuc","smallnuc")) # 0#
sno.cyt.sizes<-results(dds5s, contrast=c("group","largecyt","smallcyt")) # 0#
sno.lg.local<-results(dds5s, contrast=c("group","largenuc","largecyt")) # 64#
sno.sm.local<-results(dds5s, contrast=c("group","smallnuc","smallcyt")) # 64
s<-sno.sm.local#
s[which(s$padj<0.1),] # replace s to calculate for the comparisons above
s<-sno.lg.local#
s[which(s$padj<0.1),] # replace s to calculate for the comparisons above
s<-sno.nuc.sizes#
s[which(s$padj<0.1),] # replace s to calculate for the comparisons above
s<-sno.cyt.sizes#
s[which(s$padj<0.1),] # replace s to calculate for the comparisons above
EnhancedVolcano(locres1s, lab=rownames(sno.local), x='log2FoldChange', y='pvalue', xlim=c(-3,3), FCcutoff = 1, colCustom=keyvals, shapeCustom=keyvals.shape, title = "Differences in snoRNA localization", transcriptLabSize = 3.0, transcriptPointSize =2, drawConnectors=TRUE, colConnectors="grey50", legendPosition='right', legendLabSize = 10, legendIconSize = 2.0)
names(keyvals) <- rep('similar expression',nrow(locres1s))#
#
keyvals[which(locres1s$log2FoldChange > 1)] <- ann_col$subcell[1]#
names(keyvals)[which(locres1s$log2FoldChange > 1)] <- 'nucleus-enriched'#
#
keyvals[which(locres1s$log2FoldChange < -1)] <- ann_col$subcell[2]#
names(keyvals)[which(locres1s$log2FoldChange < -1)] <- 'cytoplasm-enriched'#
#
CD <- c("RF00016","RF00049","RF00055","RF00067","RF00068","RF00069","RF00071","RF00580","RF00594","RF01191")#
HACA <- c("RF00045","RF00056","RF00072","RF00400","RF00428","RF00399")#
#
keyvals.shape <- rep(16,nrow(locres1s))#
names(keyvals.shape) <- rep('uncategorized',nrow(locres1s))#
#
keyvals.shape[which(rownames(locres1s) %in% CD)] <- 17#
names(keyvals.shape)[which(rownames(locres1s) %in% CD)] <- 'C/D'#
#
keyvals.shape[which(rownames(locres1s) %in% HACA)] <- 15#
names(keyvals.shape)[which(rownames(locres1s) %in% HACA)] <- 'H/ACA'#
EnhancedVolcano(locres1s, lab=rownames(sno.local), x='log2FoldChange', y='pvalue', xlim=c(-3,3), FCcutoff = 1, colCustom=keyvals, shapeCustom=keyvals.shape, title = "Differences in snoRNA localization", transcriptLabSize = 3.0, transcriptPointSize =2, drawConnectors=TRUE, colConnectors="grey50", legendPosition='right', legendLabSize = 10, legendIconSize = 2.0)
sno.group<- results(dds5s)
sno.group
resultsNames(dds5s)
sno.names <- substring(rownames(sno.local),3)
EnhancedVolcano(locres1s, lab=sno.names, x='log2FoldChange', y='pvalue', xlim=c(-3,3), FCcutoff = 1, colCustom=keyvals, shapeCustom=keyvals.shape, title = "Differences in snoRNA localization", transcriptLabSize = 3.0, transcriptPointSize =2, drawConnectors=TRUE, colConnectors="grey50", legendPosition='right', legendLabSize = 10, legendIconSize = 2.0)
sno.cyt.sizes
s<-sno.lg.local#
s<-s[which(s$padj<0.1),]#
# s<-s[which(s$log2FoldChange>0),] # nuclear enriched#
# s<-s[which(s$log2FoldChange<0),] # cytoplasm enriched#
sno.lgV<-row.names(s)
s<-sno.sm.local#
# s<-sno.lg.local#
s<-s[which(s$padj<0.1),]#
# s<-s[which(s$log2FoldChange>0),] # nuclear enriched#
# s<-s[which(s$log2FoldChange<0),] # cytoplasm enriched#
# sno.lgV<-row.names(s)#
sno.smV<-row.names(s)
DESeq2::plotMA(locres1s, ylim = c(-2.8, 2.8), main="Relative abundance of snoRNA in the nucleus")#
with(locres1s[sno.lgV,], {#
    points(baseMean, log2FoldChange, col=ann_col$size[2], lwd=2)#
    text(baseMean, log2FoldChange, sno.lgV, pos=3, col=ann_col$size[2],cex=0.5)#
})#
with(locres1s[sno.smV,], {#
    points(baseMean, log2FoldChange, col=ann_col$size[1], lwd=2)#
    text(baseMean, log2FoldChange, sno.smV, pos=3, col=ann_col$size[1],cex=0.5)#
})
sm.loc <- anti_join(tbl_df(sno.smV),tbl_df(sno.lgV))#
lg.loc <- anti_join(tbl_df(sno.lgV),tbl_df(sno.smV))#
#
DESeq2::plotMA(locres1s, ylim = c(-2.8, 2.8), main="Relative abundance of snoRNA in the nucleus")#
with(locres1s[pull(lg.loc),], {#
    points(baseMean, log2FoldChange, col=ann_col$size[2], lwd=2)#
    text(baseMean, log2FoldChange, pull(lg.loc), pos=3, col=ann_col$size[2],cex=0.5)#
})#
with(locres1s[pull(sm.loc),], {#
    points(baseMean, log2FoldChange, col=ann_col$size[1], lwd=2)#
    text(baseMean, log2FoldChange, pull(sm.loc), pos=3, col=ann_col$size[1],cex=0.5)#
})
sm.loc
lg.loc
pull(lg.loc)
keyvals <- rep("grey",nrow(locres1s))#
names(keyvals) <- rep('similar expression',nrow(locres1s))#
#
keyvals[which(locres1s$log2FoldChange > 1)] <- ann_col$subcell[1]#
names(keyvals)[which(locres1s$log2FoldChange > 1)] <- 'nucleus-enriched'#
#
keyvals[which(locres1s$log2FoldChange < -1)] <- ann_col$subcell[2]#
names(keyvals)[which(locres1s$log2FoldChange < -1)] <- 'cytoplasm-enriched'#
#
keyvals[which(rownames(locres1s) %in% pull(lg.loc))] <- ann_col$size[2]#
names(keyvals.shape)[which(rownames(locres1s) %in% CD)] <- 'LG'#
CD <- c("RF00016","RF00049","RF00055","RF00067","RF00068","RF00069","RF00071","RF00580","RF00594","RF01191")#
HACA <- c("RF00045","RF00056","RF00072","RF00400","RF00428","RF00399")#
#
keyvals.shape <- rep(16,nrow(locres1s))#
names(keyvals.shape) <- rep('uncategorized',nrow(locres1s))#
#
keyvals.shape[which(rownames(locres1s) %in% CD)] <- 17#
names(keyvals.shape)[which(rownames(locres1s) %in% CD)] <- 'C/D'#
#
keyvals.shape[which(rownames(locres1s) %in% HACA)] <- 15#
names(keyvals.shape)[which(rownames(locres1s) %in% HACA)] <- 'H/ACA'#
EnhancedVolcano(locres1s, lab=sno.names, x='log2FoldChange', y='pvalue', xlim=c(-3,3), FCcutoff = 1, colCustom=keyvals, shapeCustom=keyvals.shape, title = "Differences in snoRNA localization", transcriptLabSize = 3.0, transcriptPointSize =2, drawConnectors=TRUE, colConnectors="grey50", legendPosition='right', legendLabSize = 10, legendIconSize = 2.0)
keyvals <- rep("grey",nrow(locres1s))#
names(keyvals) <- rep('similar expression',nrow(locres1s))#
#
keyvals[which(locres1s$log2FoldChange > 1)] <- ann_col$subcell[1]#
names(keyvals)[which(locres1s$log2FoldChange > 1)] <- 'nucleus-enriched'#
#
keyvals[which(locres1s$log2FoldChange < -1)] <- ann_col$subcell[2]#
names(keyvals)[which(locres1s$log2FoldChange < -1)] <- 'cytoplasm-enriched'#
#
keyvals[which(rownames(locres1s) %in% pull(lg.loc))] <- ann_col$size[2]#
names(keyvals.shape)[which(rownames(locres1s) %in% CD)] <- 'LGC'#
#
keyvals[which(rownames(locres1s) %in% pull(sm.loc))] <- ann_col$size[1]#
names(keyvals.shape)[which(rownames(locres1s) %in% CD)] <- 'SGC'
EnhancedVolcano(locres1s, lab=sno.names, x='log2FoldChange', y='pvalue', xlim=c(-3,3), FCcutoff = 1, colCustom=keyvals, shapeCustom=keyvals.shape, title = "Differences in snoRNA localization", transcriptLabSize = 3.0, transcriptPointSize =2, drawConnectors=TRUE, colConnectors="grey50", legendPosition='right', legendLabSize = 10, legendIconSize = 2.0)
keyvals <- rep("grey",nrow(locres1s))#
names(keyvals) <- rep('similar expression',nrow(locres1s))#
#
keyvals[which(locres1s$log2FoldChange > 1)] <- ann_col$subcell[1]#
names(keyvals)[which(locres1s$log2FoldChange > 1)] <- 'nucleus-enriched'#
#
keyvals[which(locres1s$log2FoldChange < -1)] <- ann_col$subcell[2]#
names(keyvals)[which(locres1s$log2FoldChange < -1)] <- 'cytoplasm-enriched'#
#
keyvals[which(rownames(locres1s) %in% pull(lg.loc))] <- ann_col$size[2]#
names(keyvals)[which(rownames(locres1s) %in% CD)] <- 'LGC'#
#
keyvals[which(rownames(locres1s) %in% pull(sm.loc))] <- ann_col$size[1]#
names(keyvals)[which(rownames(locres1s) %in% CD)] <- 'SGC'#
#
CD <- c("RF00016","RF00049","RF00055","RF00067","RF00068","RF00069","RF00071","RF00580","RF00594","RF01191")#
HACA <- c("RF00045","RF00056","RF00072","RF00400","RF00428","RF00399")#
#
keyvals.shape <- rep(16,nrow(locres1s))#
names(keyvals.shape) <- rep('uncategorized',nrow(locres1s))#
#
keyvals.shape[which(rownames(locres1s) %in% CD)] <- 17#
names(keyvals.shape)[which(rownames(locres1s) %in% CD)] <- 'C/D'#
#
keyvals.shape[which(rownames(locres1s) %in% HACA)] <- 15#
names(keyvals.shape)[which(rownames(locres1s) %in% HACA)] <- 'H/ACA'
EnhancedVolcano(locres1s, lab=sno.names, x='log2FoldChange', y='pvalue', xlim=c(-3,3), FCcutoff = 1, colCustom=keyvals, shapeCustom=keyvals.shape, title = "Differences in snoRNA localization", transcriptLabSize = 3.0, transcriptPointSize =2, drawConnectors=TRUE, colConnectors="grey50", legendPosition='right', legendLabSize = 10, legendIconSize = 2.0)
keyvals
keyvals <- rep("grey",nrow(locres1s))#
names(keyvals) <- rep('similar expression',nrow(locres1s))
keyvals <- rep("grey",nrow(locres1s))#
names(keyvals) <- rep('similar expression',nrow(locres1s))#
#
keyvals[which(locres1s$log2FoldChange > 1)] <- ann_col$subcell[1]#
names(keyvals)[which(locres1s$log2FoldChange > 1)] <- 'nucleus-enriched'#
#
keyvals[which(locres1s$log2FoldChange < -1)] <- ann_col$subcell[2]#
names(keyvals)[which(locres1s$log2FoldChange < -1)] <- 'cytoplasm-enriched'#
#
keyvals[which(rownames(locres1s) %in% pull(lg.loc))] <- ann_col$size[2]#
names(keyvals)[which(rownames(locres1s) %in% pull(lg.loc))] <- 'LGC'#
#
keyvals[which(rownames(locres1s) %in% pull(sm.loc))] <- ann_col$size[1]#
names(keyvals)[which(rownames(locres1s) %in% pull(lg.loc))] <- 'SGC'#
#
CD <- c("RF00016","RF00049","RF00055","RF00067","RF00068","RF00069","RF00071","RF00580","RF00594","RF01191")#
HACA <- c("RF00045","RF00056","RF00072","RF00400","RF00428","RF00399")#
#
keyvals.shape <- rep(16,nrow(locres1s))#
names(keyvals.shape) <- rep('uncategorized',nrow(locres1s))#
#
keyvals.shape[which(rownames(locres1s) %in% CD)] <- 17#
names(keyvals.shape)[which(rownames(locres1s) %in% CD)] <- 'C/D'#
#
keyvals.shape[which(rownames(locres1s) %in% HACA)] <- 15#
names(keyvals.shape)[which(rownames(locres1s) %in% HACA)] <- 'H/ACA'#
EnhancedVolcano(locres1s, lab=sno.names, x='log2FoldChange', y='pvalue', xlim=c(-3,3), FCcutoff = 1, colCustom=keyvals, shapeCustom=keyvals.shape, title = "Differences in snoRNA localization", transcriptLabSize = 3.0, transcriptPointSize =2, drawConnectors=TRUE, colConnectors="grey50", legendPosition='right', legendLabSize = 10, legendIconSize = 2.0)
names(keyvals)[which(rownames(locres1s) %in% pull(lg.loc))]
keyvals <- rep("grey",nrow(locres1s))#
names(keyvals) <- rep('similar expression',nrow(locres1s))#
#
keyvals[which(locres1s$log2FoldChange > 1)] <- ann_col$subcell[1]#
names(keyvals)[which(locres1s$log2FoldChange > 1)] <- 'nucleus-enriched'#
#
keyvals[which(locres1s$log2FoldChange < -1)] <- ann_col$subcell[2]#
names(keyvals)[which(locres1s$log2FoldChange < -1)] <- 'cytoplasm-enriched'#
#
keyvals[which(rownames(locres1s) %in% pull(lg.loc))] <- ann_col$size[2]#
names(keyvals)[which(rownames(locres1s) %in% pull(lg.loc))] <- 'LGC'#
#
keyvals[which(rownames(locres1s) %in% pull(sm.loc))] <- ann_col$size[1]#
names(keyvals)[which(rownames(locres1s) %in% pull(sm.loc))] <- 'SGC'#
#
CD <- c("RF00016","RF00049","RF00055","RF00067","RF00068","RF00069","RF00071","RF00580","RF00594","RF01191")#
HACA <- c("RF00045","RF00056","RF00072","RF00400","RF00428","RF00399")#
#
keyvals.shape <- rep(16,nrow(locres1s))#
names(keyvals.shape) <- rep('uncategorized',nrow(locres1s))#
#
keyvals.shape[which(rownames(locres1s) %in% CD)] <- 17#
names(keyvals.shape)[which(rownames(locres1s) %in% CD)] <- 'C/D'#
#
keyvals.shape[which(rownames(locres1s) %in% HACA)] <- 15#
names(keyvals.shape)[which(rownames(locres1s) %in% HACA)] <- 'H/ACA'#
EnhancedVolcano(locres1s, lab=sno.names, x='log2FoldChange', y='pvalue', xlim=c(-3,3), FCcutoff = 1, colCustom=keyvals, shapeCustom=keyvals.shape, title = "Differences in snoRNA localization", transcriptLabSize = 3.0, transcriptPointSize =2, drawConnectors=TRUE, colConnectors="grey50", legendPosition='right', legendLabSize = 10, legendIconSize = 2.0)
keyvals <- rep("grey",nrow(locres1s))#
names(keyvals) <- rep('similar expression',nrow(locres1s))#
#
keyvals[which(locres1s$log2FoldChange > 1)] <- ann_col$subcell[1]#
names(keyvals)[which(locres1s$log2FoldChange > 1)] <- 'nucleus-enriched'#
#
keyvals[which(locres1s$log2FoldChange < -1)] <- ann_col$subcell[2]#
names(keyvals)[which(locres1s$log2FoldChange < -1)] <- 'cytoplasm-enriched'#
#
keyvals[which(rownames(locres1s) %in% pull(lg.loc))] <- ann_col$size[2]#
names(keyvals)[which(rownames(locres1s) %in% pull(lg.loc))] <- 'size: LGC'#
#
keyvals[which(rownames(locres1s) %in% pull(sm.loc))] <- ann_col$size[1]#
names(keyvals)[which(rownames(locres1s) %in% pull(sm.loc))] <- 'size: SGC'#
#
CD <- c("RF00016","RF00049","RF00055","RF00067","RF00068","RF00069","RF00071","RF00580","RF00594","RF01191")#
HACA <- c("RF00045","RF00056","RF00072","RF00400","RF00428","RF00399")#
#
keyvals.shape <- rep(16,nrow(locres1s))#
names(keyvals.shape) <- rep('uncategorized',nrow(locres1s))#
#
keyvals.shape[which(rownames(locres1s) %in% CD)] <- 17#
names(keyvals.shape)[which(rownames(locres1s) %in% CD)] <- 'C/D'#
#
keyvals.shape[which(rownames(locres1s) %in% HACA)] <- 15#
names(keyvals.shape)[which(rownames(locres1s) %in% HACA)] <- 'H/ACA'#
EnhancedVolcano(locres1s, lab=sno.names, x='log2FoldChange', y='pvalue', xlim=c(-3,3), FCcutoff = 1, colCustom=keyvals, shapeCustom=keyvals.shape, title = "Differences in snoRNA localization", transcriptLabSize = 3.0, transcriptPointSize =2, drawConnectors=TRUE, colConnectors="grey50", legendPosition='right', legendLabSize = 10, legendIconSize = 2.0)
sno.local <- results(dds4s, contrast = c("local","nuc","cyt"))#
sno.local[which(sno.local$padj<0.1),]#
ggplot(as(sno.local, "data.frame"), aes(x = padj)) + geom_histogram(binwidth = 0.01, fill = "darkslategray", boundary = 0) # 106 DEGs
venn.diagram(x=list("SGC"=sno.smV,"LGC" = sno.lgV),fill=ann_col$size,filename=NULL) -> venny#
grid.draw(venny)
EnhancedVolcano(locres1s, lab=sno.names, x='log2FoldChange', y='pvalue', xlim=c(-3,3), FCcutoff = 1, colCustom=keyvals, shapeCustom=keyvals.shape, title = "Differences in snoRNA localization", transcriptLabSize = 3.0, transcriptPointSize =2, drawConnectors=TRUE, colConnectors="grey50", legendPosition='right', legendLabSize = 10, legendIconSize = 2.0)
install.packages(rvset)
install.packages("rvest")
library(rvest)
webpage<-read_html("file:///Users/derektoms/Documents/Manuscripts/Nuclear%20microRNA/Bioinformatics/2019-04-10%20All-Samples/quantifier_with_novel/expression_1554967304.html")
webpage<-read_html("~/Users/derektoms/Documents/Manuscripts/Nuclear%20microRNA/Bioinformatics/2019-04-10%20All-Samples/quantifier_with_novel/expression_1554967304.html")
webpage<-read_html("~/Users/derektoms/Documents/Manuscripts/Nuclear microRNA/Bioinformatics/2019-04-10 All-Samples/quantifier_with_novel/expression_1554967304.html")
?read_html
webpage<-read_html("~/Documents/Manuscripts/Nuclear microRNA/Bioinformatics/2019-04-10 All-Samples/quantifier_with_novel/expression_1554967304.html")
tbls<-html_nodes(webpage)
tbls<-html_nodes(webpage,"table")
tbls
test<-html_table(webpage)
test<-html_table(webpage,fill=TRUE)
test
dim(test)
length(test)
tbls<-html_nodes(webpage,"table")
length(tbls)
test[1]
test[2]
test[3]
head(test[2])
head(test[2],1)
colnames(test[2])
head(test[[2]],1)
head(tbls)
test<-webpage %>% html_nodes("table") %>% %>% .[2] %>% html_table(webpage, fill=TRUE)
test<-webpage %>% html_nodes("table") %>% .[2] %>% html_table(webpage, fill=TRUE)
head(test[[1]],1)
head(test[[2]],1)
length(test)
test[[2]]$X144
q()
library(dplyr)#
library(tidyr)#
library(SLqPCR)#
library(gdata) # <- for Excel files#
#
test<-data.frame(cm1=c(18,20,27,33,23),cm2=c(33,28,27,28,23),sm1=c(23,25,26,24,34),sm2=c(26,37,23,32,22))#
rownames(test)<-c("gene1","gene2","gene3","gene4","gene5")#
#
test ## these should be Ct values, sample by gene#
#       cm1 cm2 sm1 sm2#
# gene1  18  33  23  26#
# gene2  20  28  25  37#
# gene3  27  27  26  23#
# gene4  33  28  24  32#
# gene5  23  23  34  22#
#
test <- t(test) ## if the data is in this format, you can transpose it, t()#
test ## we want the data in this format#
#     gene1 gene2 gene3 gene4 gene5#
# cm1    18    20    27    33    23#
# cm2    33    28    27    28    23#
# sm1    23    25    26    24    34#
# sm2    26    37    23    32    22#
#
## normalize data (lowest Ct value = 1)#
relData <- apply(test,2,function(x) relQuantPCR(as.numeric(x)))#
selectHKgenes(relData,geneSymbol=colnames(relData))#
o2 <- read.xls('/Users/derektoms/Desktop/Oxygen_experiment_Results_July29.xlsx')#
head(o2)#
#   Sample.Name Target.Name     CT Ct.Mean Ct.SD Replicate  X X.1 X.2 X.3 X.4 X.5#
# 1       HYPO1        G6PD 27.049  27.088 0.055         1 NA  NA  NA  NA  NA  NA#
# 2       HYPO1        G6PD 27.127  27.088 0.055         2 NA  NA  NA  NA  NA  NA#
# 3       HYPO2        G6PD 26.993  27.225 0.328         1 NA  NA  NA  NA  NA  NA#
# 4       HYPO2        G6PD 27.457  27.225 0.328         2 NA  NA  NA  NA  NA  NA#
# 5       HYPO3        G6PD 28.339  28.622 0.400         1 NA  NA  NA  NA  NA  NA#
# 6       HYPO3        G6PD 28.905  28.622 0.400         2 NA  NA  NA  NA  NA  NA#
#
o2<-o2[,1:5]#
head(o2)#
#   Sample.Name Target.Name     CT Ct.Mean Ct.SD#
# 1       HYPO1        G6PD 27.049  27.088 0.055#
# 2       HYPO1        G6PD 27.127  27.088 0.055#
# 3       HYPO2        G6PD 26.993  27.225 0.328#
# 4       HYPO2        G6PD 27.457  27.225 0.328#
# 5       HYPO3        G6PD 28.339  28.622 0.400#
# 6       HYPO3        G6PD 28.905  28.622 0.400#
#
o2M <- o2 %>% distinct(Sample.Name, Target.Name,.keep_all = TRUE)#
o2M <- o2M[,c(1,2,4)]#
Ct <- spread(o2M,Target.Name,Ct.Mean)#
Ct <- Ct[,-1]#
relData <- apply(Ct,2,function(x) relQuantPCR(as.numeric(x)))#
selectHKgenes(relData, geneSymbol=colnames(relData))
o2M
Ct
selectHKgenes(relData, geneSymbol=colnames(relData))
test
gather(test,key=gene1,value=gene3)
?spread
gather(test,key="gene",value="Ct")
test<-tbl_df(test)
gather(test,key="gene",value="Ct")
gather(test,key="gene",value="Ct",c("gene2","gene3"))
test %>% gather(key="gene",value="Ct")
test %>% gather(key="gene",value="Ct") %>% group_by(gene) %>% summarize(mean=mean())
test %>% gather(key="gene",value="Ct") %>% group_by(gene) %>% summarize(mean=mean(Ct))
test %>% gather(key="gene",value="Ct",c(-1,-2))
c(-1,-2,-3)
test %>% gather(key="gene",value="Ct",-1:-2)
ggplot(test)+geom_boxplot()
library(ggplto2)
library(ggplot2)
ggplot(test)+geom_boxplot()
ggplot(test, aes(x=gene,y=Ct))+geom_boxplot()
test
test<- test %>% gather(key="gene",value="Ct",-1:-2)
ggplot(test, aes(x=gene,y=Ct))+geom_boxplot()
ggplot(test, aes(x=gene,y=Ct))+geom_boxplot()+geom_jitter()
test
ggplot(test, aes(x=gene1,y=Ct))+geom_boxplot()+geom_jitter()
ggplot(test, aes(x=gene1,y=Ct,group=gene))+geom_boxplot()+geom_jitter()
ggplot(test, aes(x=gene1,y=Ct,group=gene))+geom_boxplot()+geom_point()
ggplot(test, aes(x=gene1,y=Ct,group=gene,colour=gene))+geom_boxplot()+geom_point()
ggplot(test, aes(x=gene1,y=Ct,group=gene,colour=gene))+geom_boxplot()+geom_point(aes(group=gene))
ggplot(test, aes(x=gene1,y=Ct,group=gene,colour=gene))+geom_boxplot()+geom_point(position=position_dodge(0.75))
ggplot(test, aes(x=gene1,y=Ct,group=gene,colour=gene))+geom_boxplot()+geom_point(position=position_dodge(0.5))
ggplot(test, aes(x=gene1,y=Ct,group=gene,colour=gene))+geom_boxplot()+geom_point(position=position_dodge(0.1))
ggplot(test, aes(x=gene1,y=Ct,group=gene,colour=gene))+geom_boxplot()+geom_point(position=position_dodge(0.01))
ggplot(test, aes(x=gene1,y=Ct,group=gene,colour=gene))+geom_boxplot()+geom_point(position=position_dodge(0.8))
ggplot(test, aes(x=gene1,y=Ct,group=gene,colour=gene))+geom_boxplot()+geom_point(position=position_dodge(width=0.8))
ggplot(test, aes(x=gene1,y=Ct,group=gene,colour=gene))+geom_boxplot()+geom_point(position=position_dodge(width=0.2))
ggplot(test, aes(x=gene1,y=Ct,group=gene,colour=gene))+geom_boxplot()+geom_point(position=position_dodge(width=1))
ggplot(test, aes(x=gene1,y=Ct,group=gene,colour=gene))+geom_boxplot()+geom_point(position=position_dodge(width=10))
ggplot(test, aes(x=gene1,y=Ct,group=gene,colour=gene))+geom_boxplot()+geom_point(position=position_dodge(width=100))
ggplot(test, aes(x=gene1,y=Ct,group=gene,colour=gene))+geom_boxplot()+geom_point(position=position_dodge(width=0.75))
ggplot(test, aes(x=gene1,y=Ct,group=gene,colour=gene))+geom_boxplot()+geom_point(position=position_dodge(width=0.75),group=gene)
ggplot(test, aes(x=gene1,y=Ct,group=gene,colour=gene))+geom_boxplot()+geom_point(position=position_dodge(width=0.75),aes(group=gene))
ggplot(test, aes(x=gene1,y=Ct,group=gene,colour=gene))+geom_boxplot()+geom_point(position=position_jitterdodge())
ggplot(test, aes(x=gene1,y=Ct,group=gene,colour=gene))+geom_boxplot()+geom_jitter(position=position_jitterdodge())
ggplot(test, aes(x=gene1,y=Ct,group=gene,colour=gene))+geom_boxplot()+geom_point(position=position_dodge(width=0.75),aes(group=group))
ggplot(test, aes(x=gene1,y=Ct,group=gene,colour=gene))+geom_boxplot()+geom_point(position=position_dodge(width=0.75),aes(group=gene))
test
ggplot(test, aes(x=gene,y=Ct,group=gene,colour=gene))+geom_boxplot()+geom_point(position=position_dodge(width=0.75),aes(group=gene))
ggplot(test, aes(x=gene,y=Ct,group=gene,colour=gene))+geom_boxplot()+geom_jitter(position=position_dodge(width=0.75),aes(group=gene))
ggplot(test, aes(x=gene,y=Ct,group=gene,colour=gene))+geom_boxplot()+geom_point(position=position_jitterdodge(width=0.75),aes(group=gene))
ggplot(test, aes(x=gene,y=Ct,group=gene,colour=gene))+geom_boxplot()+geom_point(position=position_jitterdodge(),aes(group=gene))
q()
#                          _        ____#
#  _ __ ___  ___ ___ _ __ | |_ ___ |  _ \#
# | '__/ _ \/ __/ _ \ '_ \| __/ _ \| |_) |#
# | | |  __/ (_|  __/ |_) | || (_) |  _ <#
# |_|  \___|\___\___| .__/ \__\___/|_| \_\#
#                   |_|#
##
# June 2019 receptoR v 1.3#
## Last update: 2019-06-22, Derek Toms#
## server.R#
#########################################
#$#$#$#$#$#$    HEADER     $#$#$#$#$#$#$#
#########################################
#
# App structural packages:#
#install.packages(c('dplyr','dbplyr','tidyr','ggplot2','RColorBrewer','readr','stringr','shiny','shinythemes','shinyjs','DT'))#
#
library(dplyr)#
library(tidyr)#
library(ggplot2)#
library(reshape2)#
library(RColorBrewer)#
library(readr)#
library(stringr)#
library(shiny)#
library(shinythemes)#
library(shinyjs)#
library(dbplyr)#
library(DT)#
#
# Bioinformatics packages installed via biocLite:#
#source("https://bioconductor.org/biocLite.R")#
#biocLite(c('limma','annotate','genefilter','ComplexHeatmap','pheatmap','cowplot','GEOmetadb','mouse4302.db','hgu133plus2.db'))#
#biocLite(c('mixOmics','MergeMaid','GEOquery','inSilicoMerging','affy','sva','Rtsne','metaArray','testthat'))#
#
library(GEOmetadb)#
library(GEOquery)#
library(affy)#
#
library(limma)#
library(annotate)#
library(pheatmap)#
library(mixOmics)#
library(cowplot)#
#
library(pool)#
library(writexl)#
#
# Microarray platform annotations:#
library(mouse4302.db)#
library(hgu133plus2.db)#
library(hgu133plus2cdf) # 2019-04-14 required#
library(mouse4302cdf)
setwd("~/Desktop/shiny-server/receptoR_final/")
source("functions.R")
load("~/Documents/Retina/CNIB_TuckMacPhee/Bioinformatics/2018-12_genelists.rda")#
poolGEO <- dbPool(#
  drv = RSQLite::SQLite(),#
  dbname = "/Volumes/ULTRA/across_array/GEOmetadb.sqlite"#
)#
#
poolUserData <- dbPool(#
  drv = RSQLite::SQLite(),#
  dbname = "~/Documents/Retina/CNIB_TuckMacPhee/Bioinformatics/2019-06-15 v1.3 Update/receptoRUserData.sqlite"#
)
load("~/Documents/Retina/CNIB_TuckMacPhee/Bioinformatics/2018-12_genelists.rda")#
poolGEO <- dbPool(#
  drv = RSQLite::SQLite(),#
  dbname = "/Volumes/ULTRA/across_array/GEOmetadb.sqlite"#
)#
#
poolUserData <- dbPool(#
  drv = RSQLite::SQLite(),#
  dbname = "~/Documents/Retina/CNIB_TuckMacPhee/Bioinformatics/2019-06-15 v1.3 Update/receptoRUserData.sqlite"#
)
## Initialize user experiments to load#
global <- reactiveValues (DatasetTable = loadUserDatasets(poolUserData))#
#
#########################################
#$#$#$#$#$#$#    SERVER    #$#$#$#$#$#$##
#########################################
#
server <- function(input, output, session) {#
#   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-#
#  / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \#
# `-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
## This is the database search begins#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
#
# Quick link from the main page#
observeEvent(input$linkSearch, {#
  updateNavbarPage(session, "receptorMain", selected="searchPanel")#
})#
# Set up colour environment#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  catCol <- brewer.pal(3, "Set1")#
  rowCol <-desat(catCol)#
  userID <- NULL#
# Search functions #
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  searchGSM <- eventReactive(input$searchButton, {#
      if(input$gplSelection=='human'){#
          sql<-"SELECT * FROM appgsm WHERE description MATCH ?id1 AND gpl LIKE 'GPL570';"#
      } else {#
          sql<-"SELECT * FROM appgsm WHERE description MATCH ?id1 AND gpl LIKE 'GPL1261';"#
      }#
      query<-sqlInterpolate(poolGEO,sql,id1=input$searchText)#
      queryGSM<-dbGetQuery(poolGEO,query)#
      shinyjs::disable("gplSelection")#
      return(queryGSM)#
  })#
#
  output$searchResultsGSM <- DT::renderDataTable({#
          searchGSM()}, extensions = 'Buttons', options=list(#
              dom = 'Bfrtip',#
              buttons = list(list(extend = 'colvis')),#
              searching=TRUE, #
              paging=FALSE,#
              scrollX=TRUE, #
              scrollY='60vh', #
              scrollCollapse=TRUE,#
              fixedHeader=TRUE,#
              autoWidth=TRUE,#
              columnDefs=list(list(#
              targets = "_all",#
              render = JS(#
                  "function(data, type, row, meta) {",#
                      "return type === 'display' && typeof data === 'string' && data.length > 100 ?",#
                      "'<span title=\"' + data + '\">' + data.substr(0, 100) + '...</span>' : data;",#
                      "}") #
                      )))) ## typeof data needs to be a string, as a "NA" converted to JS "NULL" breaks things#
#
# Set up tables to store user-selected data#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
#
  proxy.search = dataTableProxy('searchResultsGSM')#
#
  ## Set up reactive table to store experimental samples#
  userSamples <- reactiveValues()#
  userSamples$df <- data.frame()#
  # 2019-07-31 Upload user data#
  # Upload read count table#
  #_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  userEset <- reactive({#
      inFile <- input$eset_upload#
      if (is.null(inFile))#
          return(NULL)#
      df<- read.csv(inFile$datapath,header=TRUE,sep=",")#
      return(df)#
  })#
  output$upload_table <- DT::renderDataTable({#
      df <- userEset()#
      datatable(df, options=list(#
          searching=TRUE, #
          paging=TRUE,#
          scrollX=TRUE, #
          scrollY='25vh',#
          scrollCollapse=TRUE,#
          fixedHeader=TRUE,#
          autoWidth=FALSE))#
      })#
  observeEvent(input$uploadButton, {#
      showModal(modalDialog(title="Select your data to upload for analysis","Make sure things look right before proceeding. There is the ability to add some options here, if I want to make it slightly more flexible (e.g. separator, header).", radioButtons("speciesSelection", "Choose species:", choices = c("Mouse" = "mouse", "Human" = "human")),#
          fileInput('eset_upload','Choose file to upload', accept = c('text/csv','text/comma-separated-values','.csv')),#
          DT::dataTableOutput("upload_table"),#
          easyClose = TRUE,#
          footer = tagList(#
              actionButton("uploaded","Upload read table"))))#
  })#
  # 'uploaded file' flag#
  eset_is_uploaded = FALSE#
  observeEvent(input$uploaded, {#
      eset_is_uploaded <<- TRUE#
      removeModal()#
      uploadSamples <- userEset()#
      tableRows <- ncol(uploadSamples)#
      userSamples$df <<- data.frame(samples = colnames(uploadSamples), category = rep("Not yet assigned", tableRows), features = rep(nrow(uploadSamples), tableRows), description = rep("User uploaded samples",tableRows))#
      updateTabsetPanel(session = session, inputId = "searchpanel", selected = "2")  ## jump to 'Assign' tab#
  })#
#
  observeEvent(input$clear_upload, {#
      eset_is_uploaded <<- FALSE#
      userSamples$df <<- data.frame()#
      removeModal()#
  })#
# Add sample (array) record to the current experiment #
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  observeEvent(input$addButton, {#
      if(eset_is_uploaded){#
          showModal(modalDialog(title = "Alert! Uploaded data detected.", "Continuing with public arrays will erase uploaded dataset.",#
              easyClose = TRUE, footer = tagList(actionButton("clear_upload","Proceed"), modalButton("Cancel"))))#
      } else {#
      gsm_selected <- searchGSM()[input$searchResultsGSM_rows_selected,]#
      gsm_selected$category <- rep("Not yet assigned", nrow(gsm_selected))#
      userSamples$df <<- rbind(userSamples$df,gsm_selected)#
      proxy.search %>% selectRows(NULL)#
      updateTabsetPanel(session = session, inputId = "searchpanel", selected = "2")#
      }#
  })#
#
# Assign categories to each sample (GSM)#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  observeEvent(input$assignButton, {#
        userSamples$df[,"category"] <<- as.character(userSamples$df[,"category"])#
        userSamples$df[input$gsm_table_rows_selected,"category"] <<- input$selection#
        userSamples$df[,"category"] <<- as.factor(userSamples$df[,"category"])#
  })      #
  output$gsm_table <- DT::renderDataTable({#
      if(input$assignButton == 0){#
         return (datatable(userSamples$df, extensions = 'Buttons', options=list(#
               dom = 'Bfrtip',#
               buttons = list(list(extend = 'colvis')),#
               searching=TRUE, #
               paging=FALSE,#
               scrollX=TRUE, #
               scrollY='60vh', #
               scrollCollapse=TRUE,#
               fixedHeader=TRUE,#
               autoWidth=TRUE,#
               columnDefs=list(list(#
             targets = "_all",#
             render = JS(#
                 "function(data, type, row, meta) {",#
                     "return type === 'display' && typeof data === 'string' && data.length > 100 ?",#
                     "'<span title=\"' + data + '\">' + data.substr(0, 100) + '...</span>' : data;",#
                     "}")#
                     )))))#
      } else {#
         return (datatable(userSamples$df, extensions = 'Buttons', options=list(#
             dom = 'Bfrtip',#
             buttons = list(list(extend = 'colvis')),#
             searching=TRUE, #
             paging=FALSE,#
             scrollX=TRUE, #
             scrollY='60vh', #
             scrollCollapse=TRUE,#
             fixedHeader=TRUE,#
             autoWidth=TRUE,#
             columnDefs=list(list(#
             targets = "_all",#
             render = JS(#
                 "function(data, type, row, meta) {",#
                     "return type === 'display' && typeof data === 'string' && data.length > 100 ?",#
                     "'<span title=\"' + data + '\">' + data.substr(0, 100) + '...</span>' : data;",#
                     "}")#
                     )))) %>%#
                     formatStyle('category', target="row", backgroundColor=styleEqual(c(input$cat1, input$cat2, input$cat3), c(rowCol[1], rowCol[2], rowCol[3]))))#
      }#
  })#
  proxy.gsm = dataTableProxy('gsm_table')#
  observeEvent(input$assignButton,{#
      proxy.gsm %>% selectRows(NULL)#
  }) #
  ## UI output#
#
    output$categorySelect <- renderUI(#
      fluidRow(#
        column(12,#
               selectizeInput("selection", "Select a Category",#
                           c("category1" <- {input$cat1},#
                             "category2" <- {input$cat2},#
                             "category3" <- {input$cat3},#
                             "category4" <- "Not included")#
                             # , options = list(create=TRUE, plugins = list("remove_button")))  ### <- "remove_button" isn't what I thought it was. I would also like the "create" option but I will need to link this to the table as cat1-3 are linked (otherwise new variables are not coloured or sent along for processing)#
        )#
      )     ### 2018-12-10 I'd like to have a button to add category 3#
    )#
    )  #
# Finished table, to ultimately lead to CEL download#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
userSamples$finishedtable <- NULL#
#
observeEvent(input$assignButton, {#
    userSamples$finishedtable <<- dplyr::filter(userSamples$df, category %in% c(input$cat1, input$cat2, input$cat3))#
})#
  output$finishedtable <- DT::renderDataTable({#
      if(!is.null(userSamples$finishedtable)){#
      datatable(userSamples$finishedtable,#
      options=list(#
          searching=FALSE, #
          paging=FALSE,#
          scrollX=TRUE, #
          scrollY='60vh', #
          scrollCollapse=TRUE,#
          fixedHeader=TRUE,#
          autoWidth=TRUE,#
          columnDefs=list(list(#
          targets = "_all",#
          render = JS(#
              "function(data, type, row, meta) {",#
                  "return type === 'display' && typeof data === 'string' && data.length > 100 ?",#
                  "'<span title=\"' + data + '\">' + data.substr(0, 100) + '...</span>' : data;",#
                  "}")#
          )))) %>%#
      formatStyle('category',target="row",#
      backgroundColor=styleEqual(c(input$cat1,input$cat2,input$cat3),c(rowCol[1],rowCol[2],rowCol[3]))#
  )}})#
#
rv <- reactiveValues(download_flag = 0)#
  output$report <- downloadHandler(#
      filename = function(){paste(input$downloadId,"GSM_report.csv",sep="_")},#
      content = function(file){#
          write.csv(userSamples$finishedtable,file)#
          rv$download_flag <- rv$download_flag + 1#
      })#
# Modal confirming CEL download, and processing function#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_     #
observeEvent(input$downloadCEL, {#
    if (!eset_is_uploaded){#
        userSamples$finishedtable %>% group_by(category) %>% summarise(n.gse = n_distinct(series_id)) -> gse.check#
        warning <- "Please click below to begin processing the data."#
        numCat <- length(gse.check$category)>1#
        if(length(which(gse.check$n.gse==1))!=0){#
            catAlert <- paste(gse.check$category[which(gse.check$n.gse==1)], collapse = ", ")#
            warning <- paste("WARNING: The following categories contain samples from a single experiment (GSE) and as such they will be confounded by batch effects: ",catAlert,".<br>Please proceed with caution or cancel and select additional samples to add to these categories.",sep="")#
        }#
        if(!numCat){#
            showModal(modalDialog(title="Error! A minimum of two categories are needed.","Experimental samples need to be organized into 2 or 3 categories for appropriate downstream analysis. If you are interested in only one type of sample, we suggest choosing samples to act as 'background', which will allow for differential analysis to identify which receptor genes are enriched or depleted in your sample of interest.",#
            easyClose = TRUE,#
            footer = tagList(#
                modalButton("Cancel")))) #
        } else {#
            showModal(modalDialog(title="Important! Downloading raw .CEL files from the NCBI server.",HTML(paste("June 20th, 2019<br>",warning)),#
            easyClose = TRUE,#
            footer = tagList(#
                modalButton("Cancel"),#
                actionButton("processCEL","Proceed"))))      #
        }}#
# If the flag is TRUE, confirm and process uploaded data#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_             #
    else { #
        shinyjs::disable("downloadCEL")#
        userID <<- processDataUpload(userSamples$finishedtable, userEset(), input$downloadId, input$comments, input$speciesSelection, poolUserData)#
        global$DatasetTable <<- loadUserDatasets(poolUserData)#
        showModal(modalDialog(title="Your dataset was successfully processed!","Analyse your data in the 'Load Expression Datasets' tab. You can also download a report from this page.",#
        easyClose = TRUE,#
        footer = tagList(#
            modalButton("OK"))))# modal#
    }#
  })#
#
observeEvent(input$processCEL, {#
    shinyjs::disable("processCEL")#
    userID <<- processData(userSamples$finishedtable, input$downloadId, input$comments, input$gplSelection, poolUserData)#
    global$DatasetTable <<- loadUserDatasets(poolUserData)#
    removeModal()#
    showModal(modalDialog(title="Your dataset was successfully processed!","Analyse your data in the 'Load Expression Datasets' tab. You can also download a report from this page.",#
    easyClose = TRUE,#
    footer = tagList(#
        modalButton("OK"))))# modal#
  })#
# Reset button, modal confirmation#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  observeEvent(input$linkReset, {#
      showModal(modalDialog(title="Important! Are you sure you want to reset everything?","All searches and categorized samples will be lost. This can not be undone.",#
      footer = tagList(#
          modalButton("Cancel"),#
          actionButton("buttonReset","Yes, reset."))))# modal#
      # confirm reset (all categories, sample search, gone)#
      observeEvent(input$buttonReset, {#
          shinyjs::enable("gplSelection")#
          userSamples$df <<- userSamples$df[0,]#
          reset("searchText")#
          reset("cat1")#
          reset("cat2")#
          reset("cat3")#
          reset("downloadId")#
          replaceData(proxy.search, NULL)#
          replaceData(proxy.gsm, NULL)#
          userSamples$finishedtable <<- NULL#
          removeModal()#
          updateTabsetPanel(session = session, inputId = "searchpanel", selected = "1")#
        })#
  })#
#   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-#
#  / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \#
# `-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'#
#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
## This is where the analysis begins#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
#
# Quick link from the main page#
observeEvent(input$linkLoad, {#
  updateNavbarPage(session, "receptorMain", selected="expressionPanel")#
})#
#
# Conditional nav tabs#
hideTab(inputId = "receptorMain", target = "Gene-level Expression")#
hideTab(inputId = "receptorMain", target = "Sample-level Expression")#
#
observeEvent(input$user_data,{#
    if(input$user_data!="none"){#
        showTab(inputId = "receptorMain", target = "Gene-level Expression")#
        showTab(inputId = "receptorMain", target = "Sample-level Expression")#
    } else {#
        hideTab(inputId = "receptorMain", target = "Gene-level Expression")#
        hideTab(inputId = "receptorMain", target = "Sample-level Expression")#
#
    }#
})#
#
# Load dataset#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
output$loadUserExperiments = renderUI({#
    selectizeInput(inputId="user_data",label="Select an experiment for analysis",choices=c("none"="none",split(global$DatasetTable$desc, global$DatasetTable$species)),selected="none")#
})#
observeEvent(input$user_data,{#
    id <- NULL#
    datasetToLoad <- NULL#
   if(input$user_data=="none"){#
        mapped_probes<<-NULL  ### this is going to be the key for detecting upload data#
        uploaded_features<<-NULL ## ^ this set will be used for uploaded data#
        eset<<-NULL#
        de_choices<<-NULL#
        sig_genes_lfc<<-NULL#
    }else{         #
        id <- global$DatasetTable$userID[which(global$DatasetTable$desc == input$user_data)]#
        assign(#
              x = "species", value = global$DatasetTable$species[which(global$DatasetTable$desc == input$user_data)], envir = .GlobalEnv#
           )#
           uploaded_features <<-NULL ## I think this might have to be here for non-uploaded datasets#
        datasetToLoad <- paste("./data/app_data_", id, ".rda", sep='')#
        withProgress(message="Loading dataset",value=0.2,{#
            load(datasetToLoad,envir=.GlobalEnv)#
            incProgress(0.3, message = "Loading contrasts")#
            updateCheckboxGroupInput(session, "tissues", choices = groups, selected = groups)#
            updateCheckboxGroupInput(session, "pls_tissues", choices = groups, selected = groups)#
            updateCheckboxGroupInput(session, "de", choices = de_choices, selected = de_choices[1])#
            incProgress(0.3, message ="Loading genelists")#
            updateCheckboxGroupInput(session, "genelist", label = NULL, choices = names(gene_lists[[species]]), selected = NULL, inline = FALSE)#
            incProgress(0.2, message = "Loading gene names")#
            # updateSelectInput(session, "gene", choices = all_genes[species])#
            # if(is.null(uploaded_features)){#
            #     updateSelectInput(session, "gene", choices = mapped_probes)#
            # }#
            # if(is.null(mapped_probes)){#
            #     updateSelectInput(session, "gene", choices = make.names(uploaded_features))#
            # }#
        })#
    }#
})#
#
# Download DEG#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
#
rvDEG <- reactiveValues(download_flag = 0)#
#
  # proxy.finishedtable = dataTableProxy('finishedtable')#
  output$reportDEG <- downloadHandler(#
      filename = paste(input$user_data,"DEG_report.xlsx",sep="_"),#
      # filename = paste(input$user_data,"DEG_report.csv",sep="_"),#
      content = function(file){#
          write_xlsx(sig_genes_lfc, path=file)#
          rvDEG$download_flag <- rvDEG$download_flag + 1#
      })#
#
# QC output#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
#
output$QC = renderUI({#
  validate(#
    need(input$user_data!="none","No dataset selected"),#
    need(is.null(uploaded_features), "QC data not available for uploaded read table")#
  )#
#
  id <- global$DatasetTable$userID[which(global$DatasetTable$desc == input$user_data)]#
#
  fluidRow(#
      inlineCSS(list(#
          "#norm" = c("max-width:100%","width=100%"))),#
      h4("Expression normalization (array intensity, before and after)"), #
      tags$div(class="norm",#
          tags$img(src=paste("array_normalization_", id, ".png", sep=''))#
          ),#
      h4("RNA degradation plot (probe position along transcript vs intensity)"),#
      tags$img(src=paste("probe_degradation_", id, ".png", sep='')))#
})#
# Load genes tab#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
#
  geneList = reactive({#
    if (is.null(input$genelist) && is.null(input$gene)) {#
      return(NULL)#
    }#
    genes = c()#
#
    if (!is.null(input$genelist)) {#
      for (gene in input$genelist) {#
        genes = c(genes, gene_lists[[species]][[gene]])#
      }#
    }#
#
    if (!is.null(input$gene)) {#
      genes = c(genes, input$gene)#
    }#
    return(unname(genes))#
  })#
 summary_gene_data = reactive({#
     validate(#
       need(input$user_data!="none","No dataset selected. Please select an experiment for analysis."),#
       need(geneList(), "No genes selected. Please select receptor type(s) to analyse.")#
     )#
   get_expression_summary(eset, geneList())#
 })#
# Gene outputs#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  output$genes = DT::renderDataTable({#
      validate(#
        need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
        need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'.")#
      )#
     summary_gene_data() %>% datatable() %>% #
      formatRound(2:4)#
  })#
  # single gene plot#
 output$singleGenePlot = renderPlot({#
     validate(#
       need(input$user_data!="none","No dataset selected."),#
       need(geneList(), "No genes selected."),#
       need(input$genes_rows_selected >= 1, "Please select one or more genes from the 'Average Expression' table to inspect expression by tissue type.")#
     )#
    rows = as.integer(input$genes_rows_selected)#
    genes_to_plot = summary_gene_data()$Symbol[rows]#
    gene_data = get_gene_data(eset, genes_to_plot)#
    density <- gene_data %>% group_by(tissue) %>% summarise(count=n())#
    if (any(density$count < 3)) {by_gene_violplot(gene_data,tissues=groups)}#
        else {by_gene_boxplot(gene_data,tissues=groups)}#
  })#
#
# Expression tab#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  observe({#
    toggle("de_choices", anim = TRUE, condition = input$de_state )#
  })#
  genesToPlot = reactive({#
    validate(#
      need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
      need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'.")#
    )#
#
    genes = geneList()#
    if(input$de_state) {#
      selected_de = input$de#
      de_lists = lapply(selected_de, function(x) {as.character(get_de_genes(genes, x, sig_genes_lfc)$Symbol) })#
      genes = Reduce(union, de_lists)#
    } #
    return(genes) #
  }) #
# Heatmap plot#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  output$expressionPlot = renderPlot({#
      validate(#
          need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
          need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
          need(input$tissues, "No tissues selected. Please choose at least one tissue to plot receptor heatmap."),#
          need(length(genesToPlot())>10, if(input$de_state){paste("Based on the genes selected in 'Load Data', ", length(genesToPlot())," genes were differentially expressed in these tissues (",paste(input$tissues, collapse = ", "), "); try unselecting that option in the side menu.",sep="")}else{paste("No genes to plot as a heatmap (minimum = 10). Try including more receptor types in 'Load Data'.")})#
    )#
    selected_tissues = input$tissues#
    sub_eset = eset[, eset$tissue %in% selected_tissues]#
    genes = genesToPlot()#
    if(is.null(uploaded_features)){genes = gene2probe(genesToPlot(), mapped_probes)}#
    cat(file=stderr(), "Preparing heatmap:\n Tissues:", paste(input$tissues, collapse = ", "), "\n gene list: ",paste(genesToPlot(),collapse=", "),"\n genes: ", paste(genes,collapse=", "),"\n")#
    gene_heatmap(sub_eset, genes, scale = "row",#
                  probe_level = input$hm_probes,#
                  gsm_show = input$hm_gsm,#
                  show_rownames = input$hm_rownames,#
                  cluster_rows = input$hm_row_cluster,#
                  cluster_cols = input$hm_col_cluster,#
                  border_color = NA)#
    })#
  output$heatmap_ui = renderUI({#
    plotOutput("expressionPlot", height = input$hm_height, width = input$hm_width)#
  })#
#
# Overall expression#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  output$overallPlot = renderPlot({#
    validate(#
        need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
        need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
    need(input$tissues, "No tissues selected. Please choose at least one tissue to plot receptor heatmap."),#
    need(length(genesToPlot())>1, if(input$de_state){paste("Based on the genes selected in 'Load Data', ", length(genesToPlot())," genes were differentially expressed in these tissues (",paste(input$tissues, collapse = ", "), "); try unselecting that option in the side menu.",sep="")}else{paste("No genes to plot. Try including more receptor types in 'Load Data'.")}) #
    )#
    gene_data = get_gene_data(eset, genesToPlot())#
    overall_expression_boxplot(gene_data, tissues = input$tissues)#
  })#
# By gene boxplots ----------------------------------------------------------------------------#
#
  output$byGenePlot = renderPlot({#
      validate(#
          need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
          need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
      need(input$tissues, "No tissues selected. Please choose at least one tissue to plot receptor heatmap."),#
      need(length(genesToPlot())>1, if(input$de_state){paste("Based on the genes selected in 'Load Data', ", length(genesToPlot())," genes were differentially expressed in these tissues (",paste(input$tissues, collapse = ", "), "); try unselecting that option in the side menu.",sep="")}else{paste("No genes to plot. Try including more receptor types in 'Load Data'.")}) #
      )    #
    gene_data = get_gene_data(eset, genesToPlot())#
    by_gene_boxplot(gene_data, tissues = input$tissues)#
  })#
  plsdaData = reactive({#
    selected_tissues = input$pls_tissues#
    if(length(selected_tissues) < 2) {#
      return(NULL)#
    }#
    sub_eset = eset[, eset$tissue %in% selected_tissues]#
    genes = gene2probe(geneList(), mapped_probes)#
    # probe = input$pls_probe#
    get_plsda(sub_eset, genes, probe = FALSE) #
  })#
#
# PCA plot ----------------------------------------------------------------------------#
  output$indPlot = renderPlot({#
    validate(#
        need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
        need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
       need(length(input$pls_tissues) >= 2, "Please select at least two tissues for a PLS-DA plot.")#
    )#
    plotIndiv(plsdaData()$result, ind.names = FALSE, group = factor(plsdaData()$tissue_grps), pch = 16, #
              col.per.group = brewer.pal(3, "Set1")[1:length(input$pls_tissues)], legend = TRUE, cex = 2, ellipse=TRUE, title="Plot of individual arrays",style="graphics")#
  })#
#
# Correlation Circle plot ----------------------------------------------------------------------------  #
  output$varPlot = renderPlot({#
      validate(#
          need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
          need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
         need(length(input$pls_tissues) >= 2, "Please select at least two tissues for a Correlation circle plot.")#
      )#
      comp = as.integer(input$pls_ncomp)#
    plotVar(plsdaData()$result, var.names = list(plsdaData()$varNames), comp.select=comp, cex = 1, overlap=FALSE, col="grey",title="Correlation circle between genes and discriminant components", style="graphics")#
  })#
#
  output$numGenesUI = renderUI({#
    numericInput("pls_num_genes", "Select number of genes to show contributions for", #
                 value = 25, min = 1, max = length(geneList()), step = 1)#
  })#
# Loadings plot ----------------------------------------------------------------------------#
  output$contribPlot = renderPlot({#
      validate(#
          need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
          need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
         need(length(input$pls_tissues) >= 2, "Please select at least two tissues for a Loadings plot.")#
      )#
    grps = plsdaData()$result$names$colnames$Y#
    ndisplay = input$pls_num_genes#
    comp = as.integer(input$pls_ncomp)#
    plotLoadings(plsdaData()$result, name.var = plsdaData()$varNames, ndisplay = ndisplay, comp = comp, contrib='max', method='mean',legend.color = catCol[1:length(grps)],title=paste("Weight of the top ", ndisplay, " genes contributing to discriminant component ", comp, sep=""),size.title=1)#
  })#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$  #
  ## Kill shinyApp when session closes#
  session$onSessionEnded(stopApp)#
#
}
# this codes for the 'enter/return' key as an action button#
jscode <- '#
$(function() {#
  var $els = $("[data-proxy-click]");#
    $.each(#
    $els,#
    function(idx, el) {#
      var $el = $(el);#
      var $proxy = $("#" + $el.data("proxyClick"));#
      $el.keydown(function (e) {#
        if (e.keyCode == 13) {#
          $proxy.click();#
        }#
      });#
    }#
  );#
});#
'#
#
jscode2 <- '#
$(function() {#
    $(#receptorMain li a[data-value="Gene-level Expression"]).hide();#
    $(#receptorMain li a[data-value="Sample-level Expression"]).hide();#
});#
'#
#########################################
#$#$#$#$#$#$#$    UI     $#$#$#$#$#$#$#$#
#########################################
#
ui <- fluidPage(#
tags$head(tags$script(HTML(jscode))),#
tags$head(tags$script(HTML(jscode2))),#
tags$head(tags$link(rel = "stylesheet", type = "text/css", href = "receptor.CSS")),#
tags$head(tags$link(rel = "stylesheet", href = "https://use.fontawesome.com/releases/v5.6.3/css/all.css",  integrity="sha384-UHRtZLI+pbxtHCWp1t77Bi1L4ZtiqrqD80Kn4Z8NTSRyMA2Fd33n5dQ8lWUE00s/", crossorigin="anonymous"),#
tags$head(tags$style(#
        type="text/css",#
        "#QC img {max-width: 100%; width: 100%; height: auto}"#
    ))#
#
),#
# tags$script(HTML("$('body').addClass('fixed);")),#
shinyjs::useShinyjs(),#
navbarPage("receptoR",#
    id = "receptorMain",#
    theme = shinytheme("spacelab"),#
#
# Start page  ------------------------------------------------------------------------------#
#
    tabPanel("Start here",#
       value ="startPanel",#
       h3("Welcome to receptoR!"),#
       hr(),#
       sidebarLayout(#
           sidebarPanel(#
               # h4("An automated hypothesis generation software to identify cellular signaling pathways from transcriptomics data"),#
               p("This software allows you to browse and analyze public transcriptomics data. This is based on the idea that each cell type expresses a particular suite of cellular receptors that drive its behaviour."),#
               tags$ol(tags$li("A cell transcribes mRNA that will be translated into functional receptor proteins."),tags$li("Isolated RNA from this cell is converted to labeled cDNA, which is hybridized to an oligonucleotide probe array to measure expression."),tags$li("Each array represents a snapshot of a specific transcriptome. Thousands of these have been digitized and made publicly available."),tags$li("By mining this data, we can predict which receptors are expressed by our cells or tissues of interest to direct bioengineering strategies.")),#
               hr(),#
               #div#
               p("There are two ways to begin using receptor, either by ",#
               actionLink("linkSearch","searching for expression data"),#
               " to design your own experiment, or by ",#
               actionLink("linkLoad","loading and analysing an existing experiment.")),#
               # To proceed, click \'Search for datasets\', above"),#
               hr(),#
               p("code created by Derek Toms, Qing Yun Tong and Matthew Workentine"),#
               p("Copyright (C) 2019, code licensed under GPLv3")#
               #/div#
               ),#
           mainPanel(#
               img(src="overview.png",width="100%")#
               ))#
        ),#
#
# Search for GSM  ------------------------------------------------------------------------------#
#
    tabPanel("Search Transcriptome Database",#
       value = "searchPanel",#
       includeCSS("www/receptor.CSS"),#
       h3("Organize publicly available expression data"), ## change#
       hr(),#
       sidebarLayout(#
       sidebarPanel(#
           # style = "position:fixed;width:30%",#
           conditionalPanel(condition="input.searchpanel==1",#
           h4("Search Expression Data"),#
           p("Begin by searching the Gene Expression Omnibus (GEO) database for publicly available transcriptome data. Depending on availability, these may be available for specific tissues or isolated cell types. In the next step, these samples will be assigned to one of three categories to determine differential expression between sample types."),#
           br(),#
           radioButtons("gplSelection", "Choose species:", choices = c("Mouse (GPL1261)" = "mouse", "Human (GPL570)" = "human")),#
           tagAppendAttributes(textInput("searchText", "Enter search terms:", value = ""),`data-proxy-click` = "searchButton"),#
           helpText("Search for multiple keywords using the boolean operators 'AND','OR','NOT', and the wildcard '*'. For example: 'liver AND hepa* NOT brain'."),#
           actionButton("searchButton", "Search for arrays"),#
           actionButton("uploadButton", "I have my own data to analyze"),#
           hr(),#
           # HTML(paste("These experiments, each containing multiple biological samples, are refered to as ",span("G",style="font-weight:bold"),"EO data ",span("se",style="font-weight:bold"),"ries (GSE). Each ",span("G",style="font-weight:bold"),"EO ",span("s",style="font-weight:bold"), "a",span("m",style="font-weight:bold"),"ple (GSM) represents a digitized transcriptional snapshot.",sep="")),#
           p("Click \'Add array to experiment\' to retrieve array (GSM) information and then click on the \'Assign\' tab above to organize this data for analysis."),#
           actionButton("addButton", "Add array to experiment")),#
           conditionalPanel(condition="input.searchpanel==2",#
           h4("Define the categories that you wish to assign each sample (GSM) for comparison."),#
           p("Each sample of interest should be assigned to a category. In this way, experimental comparisons can be performed to determine differential expression between categories. A minimum of two and a maximum of three categories should be defined. If you are only interested in a single sample type it is recommended that this is compared to a 'background' sample to identify enriched receptor genes."),#
#
           tags$div(class="inputWithIcon", textInput("cat1", label=NULL, placeholder="Category 1 (e.g., pancreatic endocrine cells)"), tags$span(style="color:#E41A1C",icon("circle",class="fa-2x"))),#
#
           tags$div(class="inputWithIcon",textInput("cat2", label=NULL, placeholder="Category 2 (e.g., photoreceptors)"), tags$span(style="color:#377EB8",icon("circle",class="fa-2x"))),#
           tags$div(class="inputWithIcon",textInput("cat3", label=NULL, placeholder="Category 3 (optional)"),#
           tags$span(style="color:#4DAF4A",icon("circle",class="fa-2x"))),#
           hr(),#
           h4("Highlight samples, then click to Assign them to the specificed category."),#
           p("Using the table at right and the drop down menu below, click on samples and \'Assign\' them to different categories. Samples can be filtered using the search bar."),#
           fluidRow(column(8,uiOutput("categorySelect")),#
           column(4,actionButton("assignButton", "Assign")))#
           ),#
           conditionalPanel(condition="input.searchpanel==3",#
               h4("Thank you for using receptoR!"), # this should be slightly more informative, along the lines of Process data#
               p(" Please enter your name and any comments/bugs/questions/requests in the box below, then click the \'Download and Process\' button to retrieve the raw files from the NCBI server and process them based on their assigned categories."), # move this off of this page; separate "Help/Comments" button#
               textAreaInput("comments","Comments",width="100%",height="100px",resize="vertical"), # ditto#
               textInput("downloadId","Download ID"), # needs to be mandatory (or filled by default)#
               downloadButton("report","Download Report"),#
               actionButton("downloadCEL","Process")),#
           hr(),#
               # Help banner on the bottom -------------------------#
           # h4("Help me!"),#
           p("Click ",actionLink("linkReset","here "),"to start again.")#
       ),#
       mainPanel(#
           # Search GSE based on species#
        tabsetPanel(#
        tabPanel("Search", value=1,#
            h4("GEO microarrays (\'GSM\') matching your search query"), # return search here!#
            DT::dataTableOutput("searchResultsGSM")#
        ),#
        # Assign samples to categories ------------------------------------------------------#
        tabPanel("Assign", value=2,#
            h4("Assign individual arrays (GSM) to categories of your choosing"),#
            DT::dataTableOutput("gsm_table")#
        ),#
        # This will be where the CEL files are downloaded (confirmation, etc) ------------#
        tabPanel("Process", value=3,#
        h4("Please confirm samples are properly categorized before proceeding"),#
        p("Expression samples annotated:"),#
                DT::dataTableOutput("finishedtable")#
        ),#
        id = "searchpanel"#
        )#
        )#
        )#
    ),#
    # Load Gene Expression Data tab -------------------------------------#
    tabPanel("Load Expression Datasets",#
        value="expressionPanel",#
        h3("Pick from user-defined experiments to perform analyses"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Load Experiment"),#
            uiOutput("loadUserExperiments"),#
            hr(),#
            checkboxGroupInput("genelist", "Select a receptor type to analyze", #
                  choices = NULL),#
            br(),#
            selectInput("gene", "Select additional non-receptor coding gene(s) to include in the analysis.", choices = NULL, multiple = TRUE),#
            helpText("Search by gene symbol; availability of a given gene is based on microarray probe annotations."),#
            downloadButton("reportDEG","Download differential gene expression analysis"),#
            helpText("This Microsoft Excel file (.XSLX) contains all differentially expressed genes among these tissues. It can be further used for downstream analyses including functional enrichment analysis.")#
        ),#
        mainPanel(#
            tabsetPanel(type="tabs",selected="Gene-by-gene Expression",#
            tabPanel("Quality control",#
            uiOutput("QC")#
        ),#
            # tabPanel("Experimental design",h4("Category definitions and contrasts"),p("Coming soon!")),#
            tabPanel("Gene-by-gene Expression",#
                fluidRow(#
                column(6, h4("Average Expression"), DT::dataTableOutput("genes")),#
                column(6, h4("Gene Violin Plot"), plotOutput("singleGenePlot"))#
            )))#
        )#
        )#
    ),#
    # Magnitude expression tab ------------------------------------------------------------------------------#
    tabPanel("Gene-level Expression",#
        h3("Compare genes based on absolute expression and differential expression between experimental groups"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Gene expression"),#
            checkboxGroupInput("tissues", label = "Select tissues to include",#
            choices = NULL, selected = NULL),#
            br(),#
            checkboxInput("de_state", label = "Show differential expressed only", value = TRUE),#
            checkboxGroupInput("de", label = "Choose comparison(s) to show", choices = NULL, selected = NULL),#
            br(),#
            conditionalPanel(condition="input.absexpanel==1",#
                h5("Heatmap parameters"),#
                checkboxInput("hm_probes", "Show probe-level", value = FALSE),#
                checkboxInput("hm_gsm", "Show GSM (column names)", value = TRUE),#
                checkboxInput("hm_rownames", "Show gene symbols (row names)", value = TRUE),#
                checkboxInput("hm_col_cluster", "Cluster columns", value = TRUE),#
                checkboxInput("hm_row_cluster", "Cluster rows", value = TRUE),#
                numericInput("hm_width", "Plot width (px)", value = 900, min = 100, max = 2400, step = 10),#
                numericInput("hm_height", "Plot height (px)", value = 1200, min = 100, max = 2400, step = 10))#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("Heatmap", value=1, h4("Cluster analysis and a heatmap representation of gene expression."), p("Genes with similar expression patterns will cluster as rows, while individual microarrays cluster as columns."), uiOutput("heatmap_ui")),#
            tabPanel("Summary boxplots", h4("Boxplots of expression data by tissue."), plotOutput("overallPlot", height = 600)),#
            tabPanel("By-gene boxplots", h4("Boxplots of expression data by gene."), plotOutput("byGenePlot", height = 600)),#
            id = "absexpanel"#
        )#
        )#
        )#
    ),#
#
    # Mixomics tab ---------------------------------------------#
    tabPanel("Sample-level Expression",#
        h3("Compare trends in samples based on experimental groups"),#
        hr(),#
        sidebarLayout(#
        sidebarPanel(#
            h4("Sample expression"),#
            checkboxGroupInput("pls_tissues", label = "Select tissues to inclued",#
            choices = NULL, selected = NULL),#
            # checkboxInput("pls_probe", "Perform PLS-DA at probe level", value = FALSE),#
            br(),#
            h4("Gene contribution plot"),#
            uiOutput("numGenesUI"),#
            radioButtons("pls_ncomp", "Select component for gene contribution plot", choices = c(1,2)),#
            br()#
            # downloadButton("pls_download", "Download gene contribution data")#
        ),#
        mainPanel(#
            tabsetPanel(type = "tabs",#
            tabPanel("Discriminant Analysis", h4("Sparse Partial Least Squares Discriminant Analysis (sPLS-DA)  selects genes that are informative about a specific group. "), plotOutput("indPlot", height = 800)),#
            tabPanel("Component loadings plot", h4("Gene contribution to each principle component."), p("The longer the bar (in either direction) the more that gene contributes to that component."), plotOutput("contribPlot", height = 800)),#
            tabPanel("Circle variance", h4("Circle variance projections onto tissue."), p("Strongly correlated genes are projected in the same direction from the origin; the greater the distance the stronger the association."), plotOutput("varPlot", height = 800))#
        ),#
        position = c("right","left"),#
        fluid = TRUE#
        )#
        )#
    )#
)#
)
shinyApp(ui,server)
server <- function(input, output, session) {#
#   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-#
#  / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \#
# `-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
## This is the database search begins#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
#
# Quick link from the main page#
observeEvent(input$linkSearch, {#
  updateNavbarPage(session, "receptorMain", selected="searchPanel")#
})#
# Set up colour environment#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  catCol <- brewer.pal(3, "Set1")#
  rowCol <-desat(catCol)#
  userID <- NULL#
# Search functions #
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  searchGSM <- eventReactive(input$searchButton, {#
      if(input$gplSelection=='human'){#
          sql<-"SELECT * FROM appgsm WHERE description MATCH ?id1 AND gpl LIKE 'GPL570';"#
      } else {#
          sql<-"SELECT * FROM appgsm WHERE description MATCH ?id1 AND gpl LIKE 'GPL1261';"#
      }#
      query<-sqlInterpolate(poolGEO,sql,id1=input$searchText)#
      queryGSM<-dbGetQuery(poolGEO,query)#
      shinyjs::disable("gplSelection")#
      return(queryGSM)#
  })#
#
  output$searchResultsGSM <- DT::renderDataTable({#
          searchGSM()}, extensions = 'Buttons', options=list(#
              dom = 'Bfrtip',#
              buttons = list(list(extend = 'colvis')),#
              searching=TRUE, #
              paging=FALSE,#
              scrollX=TRUE, #
              scrollY='60vh', #
              scrollCollapse=TRUE,#
              fixedHeader=TRUE,#
              autoWidth=TRUE,#
              columnDefs=list(list(#
              targets = "_all",#
              render = JS(#
                  "function(data, type, row, meta) {",#
                      "return type === 'display' && typeof data === 'string' && data.length > 100 ?",#
                      "'<span title=\"' + data + '\">' + data.substr(0, 100) + '...</span>' : data;",#
                      "}") #
                      )))) ## typeof data needs to be a string, as a "NA" converted to JS "NULL" breaks things#
#
# Set up tables to store user-selected data#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
#
  proxy.search = dataTableProxy('searchResultsGSM')#
#
  ## Set up reactive table to store experimental samples#
  userSamples <- reactiveValues()#
  userSamples$df <- data.frame()#
  # 2019-07-31 Upload user data#
  # Upload read count table#
  #_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  userEset <- reactive({#
      inFile <- input$eset_upload#
      if (is.null(inFile))#
          return(NULL)#
      df<- read.csv(inFile$datapath,header=TRUE,sep=",")#
      return(df)#
  })#
  output$upload_table <- DT::renderDataTable({#
      df <- userEset()#
      datatable(df, options=list(#
          searching=TRUE, #
          paging=TRUE,#
          scrollX=TRUE, #
          scrollY='25vh',#
          scrollCollapse=TRUE,#
          fixedHeader=TRUE,#
          autoWidth=FALSE))#
      })#
  observeEvent(input$uploadButton, {#
      showModal(modalDialog(title="Select your data to upload for analysis","Make sure things look right before proceeding. There is the ability to add some options here, if I want to make it slightly more flexible (e.g. separator, header).", radioButtons("speciesSelection", "Choose species:", choices = c("Mouse" = "mouse", "Human" = "human")),#
          fileInput('eset_upload','Choose file to upload', accept = c('text/csv','text/comma-separated-values','.csv')),#
          DT::dataTableOutput("upload_table"),#
          easyClose = TRUE,#
          footer = tagList(#
              actionButton("uploaded","Upload read table"))))#
  })#
  # 'uploaded file' flag#
  eset_is_uploaded = FALSE#
  observeEvent(input$uploaded, {#
      eset_is_uploaded <<- TRUE#
      removeModal()#
      uploadSamples <- userEset()#
      tableRows <- ncol(uploadSamples)#
      userSamples$df <<- data.frame(samples = colnames(uploadSamples), category = rep("Not yet assigned", tableRows), features = rep(nrow(uploadSamples), tableRows), description = rep("User uploaded samples",tableRows))#
      updateTabsetPanel(session = session, inputId = "searchpanel", selected = "2")  ## jump to 'Assign' tab#
  })#
#
  observeEvent(input$clear_upload, {#
      eset_is_uploaded <<- FALSE#
      userSamples$df <<- data.frame()#
      removeModal()#
  })#
# Add sample (array) record to the current experiment #
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  observeEvent(input$addButton, {#
      if(eset_is_uploaded){#
          showModal(modalDialog(title = "Alert! Uploaded data detected.", "Continuing with public arrays will erase uploaded dataset.",#
              easyClose = TRUE, footer = tagList(actionButton("clear_upload","Proceed"), modalButton("Cancel"))))#
      } else {#
      gsm_selected <- searchGSM()[input$searchResultsGSM_rows_selected,]#
      gsm_selected$category <- rep("Not yet assigned", nrow(gsm_selected))#
      userSamples$df <<- rbind(userSamples$df,gsm_selected)#
      proxy.search %>% selectRows(NULL)#
      updateTabsetPanel(session = session, inputId = "searchpanel", selected = "2")#
      }#
  })#
#
# Assign categories to each sample (GSM)#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  observeEvent(input$assignButton, {#
        userSamples$df[,"category"] <<- as.character(userSamples$df[,"category"])#
        userSamples$df[input$gsm_table_rows_selected,"category"] <<- input$selection#
        userSamples$df[,"category"] <<- as.factor(userSamples$df[,"category"])#
  })      #
  output$gsm_table <- DT::renderDataTable({#
      if(input$assignButton == 0){#
         return (datatable(userSamples$df, extensions = 'Buttons', options=list(#
               dom = 'Bfrtip',#
               buttons = list(list(extend = 'colvis')),#
               searching=TRUE, #
               paging=FALSE,#
               scrollX=TRUE, #
               scrollY='60vh', #
               scrollCollapse=TRUE,#
               fixedHeader=TRUE,#
               autoWidth=TRUE,#
               columnDefs=list(list(#
             targets = "_all",#
             render = JS(#
                 "function(data, type, row, meta) {",#
                     "return type === 'display' && typeof data === 'string' && data.length > 100 ?",#
                     "'<span title=\"' + data + '\">' + data.substr(0, 100) + '...</span>' : data;",#
                     "}")#
                     )))))#
      } else {#
         return (datatable(userSamples$df, extensions = 'Buttons', options=list(#
             dom = 'Bfrtip',#
             buttons = list(list(extend = 'colvis')),#
             searching=TRUE, #
             paging=FALSE,#
             scrollX=TRUE, #
             scrollY='60vh', #
             scrollCollapse=TRUE,#
             fixedHeader=TRUE,#
             autoWidth=TRUE,#
             columnDefs=list(list(#
             targets = "_all",#
             render = JS(#
                 "function(data, type, row, meta) {",#
                     "return type === 'display' && typeof data === 'string' && data.length > 100 ?",#
                     "'<span title=\"' + data + '\">' + data.substr(0, 100) + '...</span>' : data;",#
                     "}")#
                     )))) %>%#
                     formatStyle('category', target="row", backgroundColor=styleEqual(c(input$cat1, input$cat2, input$cat3), c(rowCol[1], rowCol[2], rowCol[3]))))#
      }#
  })#
  proxy.gsm = dataTableProxy('gsm_table')#
  observeEvent(input$assignButton,{#
      proxy.gsm %>% selectRows(NULL)#
  }) #
  ## UI output#
#
    output$categorySelect <- renderUI(#
      fluidRow(#
        column(12,#
               selectizeInput("selection", "Select a Category",#
                           c("category1" <- {input$cat1},#
                             "category2" <- {input$cat2},#
                             "category3" <- {input$cat3},#
                             "category4" <- "Not included")#
                             # , options = list(create=TRUE, plugins = list("remove_button")))  ### <- "remove_button" isn't what I thought it was. I would also like the "create" option but I will need to link this to the table as cat1-3 are linked (otherwise new variables are not coloured or sent along for processing)#
        )#
      )     ### 2018-12-10 I'd like to have a button to add category 3#
    )#
    )  #
# Finished table, to ultimately lead to CEL download#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
userSamples$finishedtable <- NULL#
#
observeEvent(input$assignButton, {#
    userSamples$finishedtable <<- dplyr::filter(userSamples$df, category %in% c(input$cat1, input$cat2, input$cat3))#
})#
  output$finishedtable <- DT::renderDataTable({#
      if(!is.null(userSamples$finishedtable)){#
      datatable(userSamples$finishedtable,#
      options=list(#
          searching=FALSE, #
          paging=FALSE,#
          scrollX=TRUE, #
          scrollY='60vh', #
          scrollCollapse=TRUE,#
          fixedHeader=TRUE,#
          autoWidth=TRUE,#
          columnDefs=list(list(#
          targets = "_all",#
          render = JS(#
              "function(data, type, row, meta) {",#
                  "return type === 'display' && typeof data === 'string' && data.length > 100 ?",#
                  "'<span title=\"' + data + '\">' + data.substr(0, 100) + '...</span>' : data;",#
                  "}")#
          )))) %>%#
      formatStyle('category',target="row",#
      backgroundColor=styleEqual(c(input$cat1,input$cat2,input$cat3),c(rowCol[1],rowCol[2],rowCol[3]))#
  )}})#
#
rv <- reactiveValues(download_flag = 0)#
  output$report <- downloadHandler(#
      filename = function(){paste(input$downloadId,"GSM_report.csv",sep="_")},#
      content = function(file){#
          write.csv(userSamples$finishedtable,file)#
          rv$download_flag <- rv$download_flag + 1#
      })#
# Modal confirming CEL download, and processing function#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_     #
observeEvent(input$downloadCEL, {#
    if (!eset_is_uploaded){#
        userSamples$finishedtable %>% group_by(category) %>% summarise(n.gse = n_distinct(series_id)) -> gse.check#
        warning <- "Please click below to begin processing the data."#
        numCat <- length(gse.check$category)>1#
        if(length(which(gse.check$n.gse==1))!=0){#
            catAlert <- paste(gse.check$category[which(gse.check$n.gse==1)], collapse = ", ")#
            warning <- paste("WARNING: The following categories contain samples from a single experiment (GSE) and as such they will be confounded by batch effects: ",catAlert,".<br>Please proceed with caution or cancel and select additional samples to add to these categories.",sep="")#
        }#
        if(!numCat){#
            showModal(modalDialog(title="Error! A minimum of two categories are needed.","Experimental samples need to be organized into 2 or 3 categories for appropriate downstream analysis. If you are interested in only one type of sample, we suggest choosing samples to act as 'background', which will allow for differential analysis to identify which receptor genes are enriched or depleted in your sample of interest.",#
            easyClose = TRUE,#
            footer = tagList(#
                modalButton("Cancel")))) #
        } else {#
            showModal(modalDialog(title="Important! Downloading raw .CEL files from the NCBI server.",HTML(paste("June 20th, 2019<br>",warning)),#
            easyClose = TRUE,#
            footer = tagList(#
                modalButton("Cancel"),#
                actionButton("processCEL","Proceed"))))      #
        }}#
# If the flag is TRUE, confirm and process uploaded data#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_             #
    else { #
        shinyjs::disable("downloadCEL")#
        userID <<- processDataUpload(userSamples$finishedtable, userEset(), input$downloadId, input$comments, input$speciesSelection, poolUserData)#
        global$DatasetTable <<- loadUserDatasets(poolUserData)#
        showModal(modalDialog(title="Your dataset was successfully processed!","Analyse your data in the 'Load Expression Datasets' tab. You can also download a report from this page.",#
        easyClose = TRUE,#
        footer = tagList(#
            modalButton("OK"))))# modal#
    }#
  })#
#
observeEvent(input$processCEL, {#
    shinyjs::disable("processCEL")#
    userID <<- processData(userSamples$finishedtable, input$downloadId, input$comments, input$gplSelection, poolUserData)#
    global$DatasetTable <<- loadUserDatasets(poolUserData)#
    removeModal()#
    showModal(modalDialog(title="Your dataset was successfully processed!","Analyse your data in the 'Load Expression Datasets' tab. You can also download a report from this page.",#
    easyClose = TRUE,#
    footer = tagList(#
        modalButton("OK"))))# modal#
  })#
# Reset button, modal confirmation#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  observeEvent(input$linkReset, {#
      showModal(modalDialog(title="Important! Are you sure you want to reset everything?","All searches and categorized samples will be lost. This can not be undone.",#
      footer = tagList(#
          modalButton("Cancel"),#
          actionButton("buttonReset","Yes, reset."))))# modal#
      # confirm reset (all categories, sample search, gone)#
      observeEvent(input$buttonReset, {#
          shinyjs::enable("gplSelection")#
          userSamples$df <<- userSamples$df[0,]#
          reset("searchText")#
          reset("cat1")#
          reset("cat2")#
          reset("cat3")#
          reset("downloadId")#
          replaceData(proxy.search, NULL)#
          replaceData(proxy.gsm, NULL)#
          userSamples$finishedtable <<- NULL#
          removeModal()#
          updateTabsetPanel(session = session, inputId = "searchpanel", selected = "1")#
        })#
  })#
#   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-#
#  / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \#
# `-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'#
#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
## This is where the analysis begins#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
#
# Quick link from the main page#
observeEvent(input$linkLoad, {#
  updateNavbarPage(session, "receptorMain", selected="expressionPanel")#
})#
#
# Conditional nav tabs#
hideTab(inputId = "receptorMain", target = "Gene-level Expression")#
hideTab(inputId = "receptorMain", target = "Sample-level Expression")#
#
observeEvent(input$user_data,{#
    if(input$user_data!="none"){#
        showTab(inputId = "receptorMain", target = "Gene-level Expression")#
        showTab(inputId = "receptorMain", target = "Sample-level Expression")#
    } else {#
        hideTab(inputId = "receptorMain", target = "Gene-level Expression")#
        hideTab(inputId = "receptorMain", target = "Sample-level Expression")#
#
    }#
})#
#
# Load dataset#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
output$loadUserExperiments = renderUI({#
    selectizeInput(inputId="user_data",label="Select an experiment for analysis",choices=c("none"="none",split(global$DatasetTable$desc, global$DatasetTable$species)),selected="none")#
})#
observeEvent(input$user_data,{#
    id <- NULL#
    datasetToLoad <- NULL#
   if(input$user_data=="none"){#
        mapped_probes<<-NULL  ### this is going to be the key for detecting upload data#
        uploaded_features<<-NULL ## ^ this set will be used for uploaded data#
        eset<<-NULL#
        de_choices<<-NULL#
        sig_genes_lfc<<-NULL#
    }else{         #
        id <- global$DatasetTable$userID[which(global$DatasetTable$desc == input$user_data)]#
        assign(#
              x = "species", value = global$DatasetTable$species[which(global$DatasetTable$desc == input$user_data)], envir = .GlobalEnv#
           )#
           uploaded_features <<-NULL ## I think this might have to be here for non-uploaded datasets#
        datasetToLoad <- paste("./data/app_data_", id, ".rda", sep='')#
        withProgress(message="Loading dataset",value=0.2,{#
            load(datasetToLoad,envir=.GlobalEnv)#
            incProgress(0.3, message = "Loading contrasts")#
            updateCheckboxGroupInput(session, "tissues", choices = groups, selected = groups)#
            updateCheckboxGroupInput(session, "pls_tissues", choices = groups, selected = groups)#
            updateCheckboxGroupInput(session, "de", choices = de_choices, selected = de_choices[1])#
            incProgress(0.3, message ="Loading genelists")#
            updateCheckboxGroupInput(session, "genelist", label = NULL, choices = names(gene_lists[[species]]), selected = NULL, inline = FALSE)#
            incProgress(0.2, message = "Loading gene names")#
             updateSelectInput(session, "gene", choices = all_genes[species])#
            # if(is.null(uploaded_features)){#
            #     updateSelectInput(session, "gene", choices = mapped_probes)#
            # }#
            # if(is.null(mapped_probes)){#
            #     updateSelectInput(session, "gene", choices = make.names(uploaded_features))#
            # }#
        })#
    }#
})#
#
# Download DEG#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
#
rvDEG <- reactiveValues(download_flag = 0)#
#
  # proxy.finishedtable = dataTableProxy('finishedtable')#
  output$reportDEG <- downloadHandler(#
      filename = paste(input$user_data,"DEG_report.xlsx",sep="_"),#
      # filename = paste(input$user_data,"DEG_report.csv",sep="_"),#
      content = function(file){#
          write_xlsx(sig_genes_lfc, path=file)#
          rvDEG$download_flag <- rvDEG$download_flag + 1#
      })#
#
# QC output#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
#
output$QC = renderUI({#
  validate(#
    need(input$user_data!="none","No dataset selected"),#
    need(is.null(uploaded_features), "QC data not available for uploaded read table")#
  )#
#
  id <- global$DatasetTable$userID[which(global$DatasetTable$desc == input$user_data)]#
#
  fluidRow(#
      inlineCSS(list(#
          "#norm" = c("max-width:100%","width=100%"))),#
      h4("Expression normalization (array intensity, before and after)"), #
      tags$div(class="norm",#
          tags$img(src=paste("array_normalization_", id, ".png", sep=''))#
          ),#
      h4("RNA degradation plot (probe position along transcript vs intensity)"),#
      tags$img(src=paste("probe_degradation_", id, ".png", sep='')))#
})#
# Load genes tab#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
#
  geneList = reactive({#
    if (is.null(input$genelist) && is.null(input$gene)) {#
      return(NULL)#
    }#
    genes = c()#
#
    if (!is.null(input$genelist)) {#
      for (gene in input$genelist) {#
        genes = c(genes, gene_lists[[species]][[gene]])#
      }#
    }#
#
    if (!is.null(input$gene)) {#
      genes = c(genes, input$gene)#
    }#
    return(unname(genes))#
  })#
 summary_gene_data = reactive({#
     validate(#
       need(input$user_data!="none","No dataset selected. Please select an experiment for analysis."),#
       need(geneList(), "No genes selected. Please select receptor type(s) to analyse.")#
     )#
   get_expression_summary(eset, geneList())#
 })#
# Gene outputs#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  output$genes = DT::renderDataTable({#
      validate(#
        need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
        need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'.")#
      )#
     summary_gene_data() %>% datatable() %>% #
      formatRound(2:4)#
  })#
  # single gene plot#
 output$singleGenePlot = renderPlot({#
     validate(#
       need(input$user_data!="none","No dataset selected."),#
       need(geneList(), "No genes selected."),#
       need(input$genes_rows_selected >= 1, "Please select one or more genes from the 'Average Expression' table to inspect expression by tissue type.")#
     )#
    rows = as.integer(input$genes_rows_selected)#
    genes_to_plot = summary_gene_data()$Symbol[rows]#
    gene_data = get_gene_data(eset, genes_to_plot)#
    density <- gene_data %>% group_by(tissue) %>% summarise(count=n())#
    if (any(density$count < 3)) {by_gene_violplot(gene_data,tissues=groups)}#
        else {by_gene_boxplot(gene_data,tissues=groups)}#
  })#
#
# Expression tab#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  observe({#
    toggle("de_choices", anim = TRUE, condition = input$de_state )#
  })#
  genesToPlot = reactive({#
    validate(#
      need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
      need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'.")#
    )#
#
    genes = geneList()#
    if(input$de_state) {#
      selected_de = input$de#
      de_lists = lapply(selected_de, function(x) {as.character(get_de_genes(genes, x, sig_genes_lfc)$Symbol) })#
      genes = Reduce(union, de_lists)#
    } #
    return(genes) #
  }) #
# Heatmap plot#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  output$expressionPlot = renderPlot({#
      validate(#
          need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
          need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
          need(input$tissues, "No tissues selected. Please choose at least one tissue to plot receptor heatmap."),#
          need(length(genesToPlot())>10, if(input$de_state){paste("Based on the genes selected in 'Load Data', ", length(genesToPlot())," genes were differentially expressed in these tissues (",paste(input$tissues, collapse = ", "), "); try unselecting that option in the side menu.",sep="")}else{paste("No genes to plot as a heatmap (minimum = 10). Try including more receptor types in 'Load Data'.")})#
    )#
    selected_tissues = input$tissues#
    sub_eset = eset[, eset$tissue %in% selected_tissues]#
    genes = genesToPlot()#
    if(is.null(uploaded_features)){genes = gene2probe(genesToPlot(), mapped_probes)}#
    cat(file=stderr(), "Preparing heatmap:\n Tissues:", paste(input$tissues, collapse = ", "), "\n gene list: ",paste(genesToPlot(),collapse=", "),"\n genes: ", paste(genes,collapse=", "),"\n")#
    gene_heatmap(sub_eset, genes, scale = "row",#
                  probe_level = input$hm_probes,#
                  gsm_show = input$hm_gsm,#
                  show_rownames = input$hm_rownames,#
                  cluster_rows = input$hm_row_cluster,#
                  cluster_cols = input$hm_col_cluster,#
                  border_color = NA)#
    })#
  output$heatmap_ui = renderUI({#
    plotOutput("expressionPlot", height = input$hm_height, width = input$hm_width)#
  })#
#
# Overall expression#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  output$overallPlot = renderPlot({#
    validate(#
        need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
        need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
    need(input$tissues, "No tissues selected. Please choose at least one tissue to plot receptor heatmap."),#
    need(length(genesToPlot())>1, if(input$de_state){paste("Based on the genes selected in 'Load Data', ", length(genesToPlot())," genes were differentially expressed in these tissues (",paste(input$tissues, collapse = ", "), "); try unselecting that option in the side menu.",sep="")}else{paste("No genes to plot. Try including more receptor types in 'Load Data'.")}) #
    )#
    gene_data = get_gene_data(eset, genesToPlot())#
    overall_expression_boxplot(gene_data, tissues = input$tissues)#
  })#
# By gene boxplots ----------------------------------------------------------------------------#
#
  output$byGenePlot = renderPlot({#
      validate(#
          need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
          need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
      need(input$tissues, "No tissues selected. Please choose at least one tissue to plot receptor heatmap."),#
      need(length(genesToPlot())>1, if(input$de_state){paste("Based on the genes selected in 'Load Data', ", length(genesToPlot())," genes were differentially expressed in these tissues (",paste(input$tissues, collapse = ", "), "); try unselecting that option in the side menu.",sep="")}else{paste("No genes to plot. Try including more receptor types in 'Load Data'.")}) #
      )    #
    gene_data = get_gene_data(eset, genesToPlot())#
    by_gene_boxplot(gene_data, tissues = input$tissues)#
  })#
  plsdaData = reactive({#
    selected_tissues = input$pls_tissues#
    if(length(selected_tissues) < 2) {#
      return(NULL)#
    }#
    sub_eset = eset[, eset$tissue %in% selected_tissues]#
    genes = gene2probe(geneList(), mapped_probes)#
    # probe = input$pls_probe#
    get_plsda(sub_eset, genes, probe = FALSE) #
  })#
#
# PCA plot ----------------------------------------------------------------------------#
  output$indPlot = renderPlot({#
    validate(#
        need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
        need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
       need(length(input$pls_tissues) >= 2, "Please select at least two tissues for a PLS-DA plot.")#
    )#
    plotIndiv(plsdaData()$result, ind.names = FALSE, group = factor(plsdaData()$tissue_grps), pch = 16, #
              col.per.group = brewer.pal(3, "Set1")[1:length(input$pls_tissues)], legend = TRUE, cex = 2, ellipse=TRUE, title="Plot of individual arrays",style="graphics")#
  })#
#
# Correlation Circle plot ----------------------------------------------------------------------------  #
  output$varPlot = renderPlot({#
      validate(#
          need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
          need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
         need(length(input$pls_tissues) >= 2, "Please select at least two tissues for a Correlation circle plot.")#
      )#
      comp = as.integer(input$pls_ncomp)#
    plotVar(plsdaData()$result, var.names = list(plsdaData()$varNames), comp.select=comp, cex = 1, overlap=FALSE, col="grey",title="Correlation circle between genes and discriminant components", style="graphics")#
  })#
#
  output$numGenesUI = renderUI({#
    numericInput("pls_num_genes", "Select number of genes to show contributions for", #
                 value = 25, min = 1, max = length(geneList()), step = 1)#
  })#
# Loadings plot ----------------------------------------------------------------------------#
  output$contribPlot = renderPlot({#
      validate(#
          need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
          need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
         need(length(input$pls_tissues) >= 2, "Please select at least two tissues for a Loadings plot.")#
      )#
    grps = plsdaData()$result$names$colnames$Y#
    ndisplay = input$pls_num_genes#
    comp = as.integer(input$pls_ncomp)#
    plotLoadings(plsdaData()$result, name.var = plsdaData()$varNames, ndisplay = ndisplay, comp = comp, contrib='max', method='mean',legend.color = catCol[1:length(grps)],title=paste("Weight of the top ", ndisplay, " genes contributing to discriminant component ", comp, sep=""),size.title=1)#
  })#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$  #
  ## Kill shinyApp when session closes#
  session$onSessionEnded(stopApp)#
#
}
shinyApp(ui,server)
all_genes
shinyApp(ui,server)
shinyApp(ui,server)
server <- function(input, output, session) {#
#   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-#
#  / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \#
# `-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
## This is the database search begins#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
#
# Quick link from the main page#
observeEvent(input$linkSearch, {#
  updateNavbarPage(session, "receptorMain", selected="searchPanel")#
})#
# Set up colour environment#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  catCol <- brewer.pal(3, "Set1")#
  rowCol <-desat(catCol)#
  userID <- NULL#
# Search functions #
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  searchGSM <- eventReactive(input$searchButton, {#
      if(input$gplSelection=='human'){#
          sql<-"SELECT * FROM appgsm WHERE description MATCH ?id1 AND gpl LIKE 'GPL570';"#
      } else {#
          sql<-"SELECT * FROM appgsm WHERE description MATCH ?id1 AND gpl LIKE 'GPL1261';"#
      }#
      query<-sqlInterpolate(poolGEO,sql,id1=input$searchText)#
      queryGSM<-dbGetQuery(poolGEO,query)#
      shinyjs::disable("gplSelection")#
      return(queryGSM)#
  })#
#
  output$searchResultsGSM <- DT::renderDataTable({#
          searchGSM()}, extensions = 'Buttons', options=list(#
              dom = 'Bfrtip',#
              buttons = list(list(extend = 'colvis')),#
              searching=TRUE, #
              paging=FALSE,#
              scrollX=TRUE, #
              scrollY='60vh', #
              scrollCollapse=TRUE,#
              fixedHeader=TRUE,#
              autoWidth=TRUE,#
              columnDefs=list(list(#
              targets = "_all",#
              render = JS(#
                  "function(data, type, row, meta) {",#
                      "return type === 'display' && typeof data === 'string' && data.length > 100 ?",#
                      "'<span title=\"' + data + '\">' + data.substr(0, 100) + '...</span>' : data;",#
                      "}") #
                      )))) ## typeof data needs to be a string, as a "NA" converted to JS "NULL" breaks things#
#
# Set up tables to store user-selected data#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
#
  proxy.search = dataTableProxy('searchResultsGSM')#
#
  ## Set up reactive table to store experimental samples#
  userSamples <- reactiveValues()#
  userSamples$df <- data.frame()#
  # 2019-07-31 Upload user data#
  # Upload read count table#
  #_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  userEset <- reactive({#
      inFile <- input$eset_upload#
      if (is.null(inFile))#
          return(NULL)#
      df<- read.csv(inFile$datapath,header=TRUE,sep=",")#
      return(df)#
  })#
  output$upload_table <- DT::renderDataTable({#
      df <- userEset()#
      datatable(df, options=list(#
          searching=TRUE, #
          paging=TRUE,#
          scrollX=TRUE, #
          scrollY='25vh',#
          scrollCollapse=TRUE,#
          fixedHeader=TRUE,#
          autoWidth=FALSE))#
      })#
  observeEvent(input$uploadButton, {#
      showModal(modalDialog(title="Select your data to upload for analysis","Make sure things look right before proceeding. There is the ability to add some options here, if I want to make it slightly more flexible (e.g. separator, header).", radioButtons("speciesSelection", "Choose species:", choices = c("Mouse" = "mouse", "Human" = "human")),#
          fileInput('eset_upload','Choose file to upload', accept = c('text/csv','text/comma-separated-values','.csv')),#
          DT::dataTableOutput("upload_table"),#
          easyClose = TRUE,#
          footer = tagList(#
              actionButton("uploaded","Upload read table"))))#
  })#
  # 'uploaded file' flag#
  eset_is_uploaded = FALSE#
  observeEvent(input$uploaded, {#
      eset_is_uploaded <<- TRUE#
      removeModal()#
      uploadSamples <- userEset()#
      tableRows <- ncol(uploadSamples)#
      userSamples$df <<- data.frame(samples = colnames(uploadSamples), category = rep("Not yet assigned", tableRows), features = rep(nrow(uploadSamples), tableRows), description = rep("User uploaded samples",tableRows))#
      updateTabsetPanel(session = session, inputId = "searchpanel", selected = "2")  ## jump to 'Assign' tab#
  })#
#
  observeEvent(input$clear_upload, {#
      eset_is_uploaded <<- FALSE#
      userSamples$df <<- data.frame()#
      removeModal()#
  })#
# Add sample (array) record to the current experiment #
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  observeEvent(input$addButton, {#
      if(eset_is_uploaded){#
          showModal(modalDialog(title = "Alert! Uploaded data detected.", "Continuing with public arrays will erase uploaded dataset.",#
              easyClose = TRUE, footer = tagList(actionButton("clear_upload","Proceed"), modalButton("Cancel"))))#
      } else {#
      gsm_selected <- searchGSM()[input$searchResultsGSM_rows_selected,]#
      gsm_selected$category <- rep("Not yet assigned", nrow(gsm_selected))#
      userSamples$df <<- rbind(userSamples$df,gsm_selected)#
      proxy.search %>% selectRows(NULL)#
      updateTabsetPanel(session = session, inputId = "searchpanel", selected = "2")#
      }#
  })#
#
# Assign categories to each sample (GSM)#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  observeEvent(input$assignButton, {#
        userSamples$df[,"category"] <<- as.character(userSamples$df[,"category"])#
        userSamples$df[input$gsm_table_rows_selected,"category"] <<- input$selection#
        userSamples$df[,"category"] <<- as.factor(userSamples$df[,"category"])#
  })      #
  output$gsm_table <- DT::renderDataTable({#
      if(input$assignButton == 0){#
         return (datatable(userSamples$df, extensions = 'Buttons', options=list(#
               dom = 'Bfrtip',#
               buttons = list(list(extend = 'colvis')),#
               searching=TRUE, #
               paging=FALSE,#
               scrollX=TRUE, #
               scrollY='60vh', #
               scrollCollapse=TRUE,#
               fixedHeader=TRUE,#
               autoWidth=TRUE,#
               columnDefs=list(list(#
             targets = "_all",#
             render = JS(#
                 "function(data, type, row, meta) {",#
                     "return type === 'display' && typeof data === 'string' && data.length > 100 ?",#
                     "'<span title=\"' + data + '\">' + data.substr(0, 100) + '...</span>' : data;",#
                     "}")#
                     )))))#
      } else {#
         return (datatable(userSamples$df, extensions = 'Buttons', options=list(#
             dom = 'Bfrtip',#
             buttons = list(list(extend = 'colvis')),#
             searching=TRUE, #
             paging=FALSE,#
             scrollX=TRUE, #
             scrollY='60vh', #
             scrollCollapse=TRUE,#
             fixedHeader=TRUE,#
             autoWidth=TRUE,#
             columnDefs=list(list(#
             targets = "_all",#
             render = JS(#
                 "function(data, type, row, meta) {",#
                     "return type === 'display' && typeof data === 'string' && data.length > 100 ?",#
                     "'<span title=\"' + data + '\">' + data.substr(0, 100) + '...</span>' : data;",#
                     "}")#
                     )))) %>%#
                     formatStyle('category', target="row", backgroundColor=styleEqual(c(input$cat1, input$cat2, input$cat3), c(rowCol[1], rowCol[2], rowCol[3]))))#
      }#
  })#
  proxy.gsm = dataTableProxy('gsm_table')#
  observeEvent(input$assignButton,{#
      proxy.gsm %>% selectRows(NULL)#
  }) #
  ## UI output#
#
    output$categorySelect <- renderUI(#
      fluidRow(#
        column(12,#
               selectizeInput("selection", "Select a Category",#
                           c("category1" <- {input$cat1},#
                             "category2" <- {input$cat2},#
                             "category3" <- {input$cat3},#
                             "category4" <- "Not included")#
                             # , options = list(create=TRUE, plugins = list("remove_button")))  ### <- "remove_button" isn't what I thought it was. I would also like the "create" option but I will need to link this to the table as cat1-3 are linked (otherwise new variables are not coloured or sent along for processing)#
        )#
      )     ### 2018-12-10 I'd like to have a button to add category 3#
    )#
    )  #
# Finished table, to ultimately lead to CEL download#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
userSamples$finishedtable <- NULL#
#
observeEvent(input$assignButton, {#
    userSamples$finishedtable <<- dplyr::filter(userSamples$df, category %in% c(input$cat1, input$cat2, input$cat3))#
})#
  output$finishedtable <- DT::renderDataTable({#
      if(!is.null(userSamples$finishedtable)){#
      datatable(userSamples$finishedtable,#
      options=list(#
          searching=FALSE, #
          paging=FALSE,#
          scrollX=TRUE, #
          scrollY='60vh', #
          scrollCollapse=TRUE,#
          fixedHeader=TRUE,#
          autoWidth=TRUE,#
          columnDefs=list(list(#
          targets = "_all",#
          render = JS(#
              "function(data, type, row, meta) {",#
                  "return type === 'display' && typeof data === 'string' && data.length > 100 ?",#
                  "'<span title=\"' + data + '\">' + data.substr(0, 100) + '...</span>' : data;",#
                  "}")#
          )))) %>%#
      formatStyle('category',target="row",#
      backgroundColor=styleEqual(c(input$cat1,input$cat2,input$cat3),c(rowCol[1],rowCol[2],rowCol[3]))#
  )}})#
#
rv <- reactiveValues(download_flag = 0)#
  output$report <- downloadHandler(#
      filename = function(){paste(input$downloadId,"GSM_report.csv",sep="_")},#
      content = function(file){#
          write.csv(userSamples$finishedtable,file)#
          rv$download_flag <- rv$download_flag + 1#
      })#
# Modal confirming CEL download, and processing function#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_     #
observeEvent(input$downloadCEL, {#
    if (!eset_is_uploaded){#
        userSamples$finishedtable %>% group_by(category) %>% summarise(n.gse = n_distinct(series_id)) -> gse.check#
        warning <- "Please click below to begin processing the data."#
        numCat <- length(gse.check$category)>1#
        if(length(which(gse.check$n.gse==1))!=0){#
            catAlert <- paste(gse.check$category[which(gse.check$n.gse==1)], collapse = ", ")#
            warning <- paste("WARNING: The following categories contain samples from a single experiment (GSE) and as such they will be confounded by batch effects: ",catAlert,".<br>Please proceed with caution or cancel and select additional samples to add to these categories.",sep="")#
        }#
        if(!numCat){#
            showModal(modalDialog(title="Error! A minimum of two categories are needed.","Experimental samples need to be organized into 2 or 3 categories for appropriate downstream analysis. If you are interested in only one type of sample, we suggest choosing samples to act as 'background', which will allow for differential analysis to identify which receptor genes are enriched or depleted in your sample of interest.",#
            easyClose = TRUE,#
            footer = tagList(#
                modalButton("Cancel")))) #
        } else {#
            showModal(modalDialog(title="Important! Downloading raw .CEL files from the NCBI server.",HTML(paste("June 20th, 2019<br>",warning)),#
            easyClose = TRUE,#
            footer = tagList(#
                modalButton("Cancel"),#
                actionButton("processCEL","Proceed"))))      #
        }}#
# If the flag is TRUE, confirm and process uploaded data#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_             #
    else { #
        shinyjs::disable("downloadCEL")#
        userID <<- processDataUpload(userSamples$finishedtable, userEset(), input$downloadId, input$comments, input$speciesSelection, poolUserData)#
        global$DatasetTable <<- loadUserDatasets(poolUserData)#
        showModal(modalDialog(title="Your dataset was successfully processed!","Analyse your data in the 'Load Expression Datasets' tab. You can also download a report from this page.",#
        easyClose = TRUE,#
        footer = tagList(#
            modalButton("OK"))))# modal#
    }#
  })#
#
observeEvent(input$processCEL, {#
    shinyjs::disable("processCEL")#
    userID <<- processData(userSamples$finishedtable, input$downloadId, input$comments, input$gplSelection, poolUserData)#
    global$DatasetTable <<- loadUserDatasets(poolUserData)#
    removeModal()#
    showModal(modalDialog(title="Your dataset was successfully processed!","Analyse your data in the 'Load Expression Datasets' tab. You can also download a report from this page.",#
    easyClose = TRUE,#
    footer = tagList(#
        modalButton("OK"))))# modal#
  })#
# Reset button, modal confirmation#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  observeEvent(input$linkReset, {#
      showModal(modalDialog(title="Important! Are you sure you want to reset everything?","All searches and categorized samples will be lost. This can not be undone.",#
      footer = tagList(#
          modalButton("Cancel"),#
          actionButton("buttonReset","Yes, reset."))))# modal#
      # confirm reset (all categories, sample search, gone)#
      observeEvent(input$buttonReset, {#
          shinyjs::enable("gplSelection")#
          userSamples$df <<- userSamples$df[0,]#
          reset("searchText")#
          reset("cat1")#
          reset("cat2")#
          reset("cat3")#
          reset("downloadId")#
          replaceData(proxy.search, NULL)#
          replaceData(proxy.gsm, NULL)#
          userSamples$finishedtable <<- NULL#
          removeModal()#
          updateTabsetPanel(session = session, inputId = "searchpanel", selected = "1")#
        })#
  })#
#   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-#
#  / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \#
# `-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'#
#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
## This is where the analysis begins#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
#
# Quick link from the main page#
observeEvent(input$linkLoad, {#
  updateNavbarPage(session, "receptorMain", selected="expressionPanel")#
})#
#
# Conditional nav tabs#
hideTab(inputId = "receptorMain", target = "Gene-level Expression")#
hideTab(inputId = "receptorMain", target = "Sample-level Expression")#
#
observeEvent(input$user_data,{#
    if(input$user_data!="none"){#
        showTab(inputId = "receptorMain", target = "Gene-level Expression")#
        showTab(inputId = "receptorMain", target = "Sample-level Expression")#
    } else {#
        hideTab(inputId = "receptorMain", target = "Gene-level Expression")#
        hideTab(inputId = "receptorMain", target = "Sample-level Expression")#
#
    }#
})#
#
# Load dataset#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
output$loadUserExperiments = renderUI({#
    selectizeInput(inputId="user_data",label="Select an experiment for analysis",choices=c("none"="none",split(global$DatasetTable$desc, global$DatasetTable$species)),selected="none")#
})#
observeEvent(input$user_data,{#
    id <- NULL#
    datasetToLoad <- NULL#
   if(input$user_data=="none"){#
        mapped_probes<<-NULL  ### this is going to be the key for detecting upload data#
        uploaded_features<<-NULL ## ^ this set will be used for uploaded data#
        eset<<-NULL#
        de_choices<<-NULL#
        sig_genes_lfc<<-NULL#
    }else{         #
        id <- global$DatasetTable$userID[which(global$DatasetTable$desc == input$user_data)]#
        assign(#
              x = "species", value = global$DatasetTable$species[which(global$DatasetTable$desc == input$user_data)], envir = .GlobalEnv#
           )#
           uploaded_features <<-NULL ## I think this might have to be here for non-uploaded datasets#
        datasetToLoad <- paste("./data/app_data_", id, ".rda", sep='')#
        withProgress(message="Loading dataset",value=0.2,{#
            load(datasetToLoad,envir=.GlobalEnv)#
            incProgress(0.3, message = "Loading contrasts")#
            updateCheckboxGroupInput(session, "tissues", choices = groups, selected = groups)#
            updateCheckboxGroupInput(session, "pls_tissues", choices = groups, selected = groups)#
            updateCheckboxGroupInput(session, "de", choices = de_choices, selected = de_choices[1])#
            incProgress(0.3, message ="Loading genelists")#
            updateCheckboxGroupInput(session, "genelist", label = NULL, choices = names(gene_lists[[species]]), selected = NULL, inline = FALSE)#
            incProgress(0.2, message = "Loading gene names")#
            # updateSelectInput(session, "gene", choices = all_genes[species])#
            if(is.null(uploaded_features)){#
                updateSelectInput(session, "gene", choices = mapped_probes)#
            }#
            if(is.null(mapped_probes)){#
                updateSelectInput(session, "gene", choices = make.names(uploaded_features))#
            }#
        })#
    }#
})#
#
# Download DEG#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
#
rvDEG <- reactiveValues(download_flag = 0)#
#
  # proxy.finishedtable = dataTableProxy('finishedtable')#
  output$reportDEG <- downloadHandler(#
      filename = paste(input$user_data,"DEG_report.xlsx",sep="_"),#
      # filename = paste(input$user_data,"DEG_report.csv",sep="_"),#
      content = function(file){#
          write_xlsx(sig_genes_lfc, path=file)#
          rvDEG$download_flag <- rvDEG$download_flag + 1#
      })#
#
# QC output#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
#
output$QC = renderUI({#
  validate(#
    need(input$user_data!="none","No dataset selected"),#
    need(is.null(uploaded_features), "QC data not available for uploaded read table")#
  )#
#
  id <- global$DatasetTable$userID[which(global$DatasetTable$desc == input$user_data)]#
#
  fluidRow(#
      inlineCSS(list(#
          "#norm" = c("max-width:100%","width=100%"))),#
      h4("Expression normalization (array intensity, before and after)"), #
      tags$div(class="norm",#
          tags$img(src=paste("array_normalization_", id, ".png", sep=''))#
          ),#
      h4("RNA degradation plot (probe position along transcript vs intensity)"),#
      tags$img(src=paste("probe_degradation_", id, ".png", sep='')))#
})#
# Load genes tab#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
#
  geneList = reactive({#
    if (is.null(input$genelist) && is.null(input$gene)) {#
      return(NULL)#
    }#
    genes = c()#
#
    if (!is.null(input$genelist)) {#
      for (gene in input$genelist) {#
        genes = c(genes, gene_lists[[species]][[gene]])#
      }#
    }#
#
    if (!is.null(input$gene)) {#
      genes = c(genes, input$gene)#
    }#
    return(unname(genes))#
  })#
 summary_gene_data = reactive({#
     validate(#
       need(input$user_data!="none","No dataset selected. Please select an experiment for analysis."),#
       need(geneList(), "No genes selected. Please select receptor type(s) to analyse.")#
     )#
   get_expression_summary(eset, geneList())#
 })#
# Gene outputs#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  output$genes = DT::renderDataTable({#
      validate(#
        need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
        need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'.")#
      )#
     summary_gene_data() %>% datatable() %>% #
      formatRound(2:4)#
  })#
  # single gene plot#
 output$singleGenePlot = renderPlot({#
     validate(#
       need(input$user_data!="none","No dataset selected."),#
       need(geneList(), "No genes selected."),#
       need(input$genes_rows_selected >= 1, "Please select one or more genes from the 'Average Expression' table to inspect expression by tissue type.")#
     )#
    rows = as.integer(input$genes_rows_selected)#
    genes_to_plot = summary_gene_data()$Symbol[rows]#
    gene_data = get_gene_data(eset, genes_to_plot)#
    density <- gene_data %>% group_by(tissue) %>% summarise(count=n())#
    if (any(density$count < 3)) {by_gene_violplot(gene_data,tissues=groups)}#
        else {by_gene_boxplot(gene_data,tissues=groups)}#
  })#
#
# Expression tab#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  observe({#
    toggle("de_choices", anim = TRUE, condition = input$de_state )#
  })#
  genesToPlot = reactive({#
    validate(#
      need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
      need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'.")#
    )#
#
    genes = geneList()#
    if(input$de_state) {#
      selected_de = input$de#
      de_lists = lapply(selected_de, function(x) {as.character(get_de_genes(genes, x, sig_genes_lfc)$Symbol) })#
      genes = Reduce(union, de_lists)#
    } #
    return(genes) #
  }) #
# Heatmap plot#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  output$expressionPlot = renderPlot({#
      validate(#
          need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
          need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
          need(input$tissues, "No tissues selected. Please choose at least one tissue to plot receptor heatmap."),#
          need(length(genesToPlot())>10, if(input$de_state){paste("Based on the genes selected in 'Load Data', ", length(genesToPlot())," genes were differentially expressed in these tissues (",paste(input$tissues, collapse = ", "), "); try unselecting that option in the side menu.",sep="")}else{paste("No genes to plot as a heatmap (minimum = 10). Try including more receptor types in 'Load Data'.")})#
    )#
    selected_tissues = input$tissues#
    sub_eset = eset[, eset$tissue %in% selected_tissues]#
    genes = genesToPlot()#
    if(is.null(uploaded_features)){genes = gene2probe(genesToPlot(), mapped_probes)}#
    cat(file=stderr(), "Preparing heatmap:\n Tissues:", paste(input$tissues, collapse = ", "), "\n gene list: ",paste(genesToPlot(),collapse=", "),"\n genes: ", paste(genes,collapse=", "),"\n")#
    gene_heatmap(sub_eset, genes, scale = "row",#
                  probe_level = input$hm_probes,#
                  gsm_show = input$hm_gsm,#
                  show_rownames = input$hm_rownames,#
                  cluster_rows = input$hm_row_cluster,#
                  cluster_cols = input$hm_col_cluster,#
                  border_color = NA)#
    })#
  output$heatmap_ui = renderUI({#
    plotOutput("expressionPlot", height = input$hm_height, width = input$hm_width)#
  })#
#
# Overall expression#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  output$overallPlot = renderPlot({#
    validate(#
        need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
        need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
    need(input$tissues, "No tissues selected. Please choose at least one tissue to plot receptor heatmap."),#
    need(length(genesToPlot())>1, if(input$de_state){paste("Based on the genes selected in 'Load Data', ", length(genesToPlot())," genes were differentially expressed in these tissues (",paste(input$tissues, collapse = ", "), "); try unselecting that option in the side menu.",sep="")}else{paste("No genes to plot. Try including more receptor types in 'Load Data'.")}) #
    )#
    gene_data = get_gene_data(eset, genesToPlot())#
    overall_expression_boxplot(gene_data, tissues = input$tissues)#
  })#
# By gene boxplots ----------------------------------------------------------------------------#
#
  output$byGenePlot = renderPlot({#
      validate(#
          need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
          need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
      need(input$tissues, "No tissues selected. Please choose at least one tissue to plot receptor heatmap."),#
      need(length(genesToPlot())>1, if(input$de_state){paste("Based on the genes selected in 'Load Data', ", length(genesToPlot())," genes were differentially expressed in these tissues (",paste(input$tissues, collapse = ", "), "); try unselecting that option in the side menu.",sep="")}else{paste("No genes to plot. Try including more receptor types in 'Load Data'.")}) #
      )    #
    gene_data = get_gene_data(eset, genesToPlot())#
    by_gene_boxplot(gene_data, tissues = input$tissues)#
  })#
  plsdaData = reactive({#
    selected_tissues = input$pls_tissues#
    if(length(selected_tissues) < 2) {#
      return(NULL)#
    }#
    sub_eset = eset[, eset$tissue %in% selected_tissues]#
    genes = gene2probe(geneList(), mapped_probes)#
    # probe = input$pls_probe#
    get_plsda(sub_eset, genes, probe = FALSE) #
  })#
#
# PCA plot ----------------------------------------------------------------------------#
  output$indPlot = renderPlot({#
    validate(#
        need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
        need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
       need(length(input$pls_tissues) >= 2, "Please select at least two tissues for a PLS-DA plot.")#
    )#
    plotIndiv(plsdaData()$result, ind.names = FALSE, group = factor(plsdaData()$tissue_grps), pch = 16, #
              col.per.group = brewer.pal(3, "Set1")[1:length(input$pls_tissues)], legend = TRUE, cex = 2, ellipse=TRUE, title="Plot of individual arrays",style="graphics")#
  })#
#
# Correlation Circle plot ----------------------------------------------------------------------------  #
  output$varPlot = renderPlot({#
      validate(#
          need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
          need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
         need(length(input$pls_tissues) >= 2, "Please select at least two tissues for a Correlation circle plot.")#
      )#
      comp = as.integer(input$pls_ncomp)#
    plotVar(plsdaData()$result, var.names = list(plsdaData()$varNames), comp.select=comp, cex = 1, overlap=FALSE, col="grey",title="Correlation circle between genes and discriminant components", style="graphics")#
  })#
#
  output$numGenesUI = renderUI({#
    numericInput("pls_num_genes", "Select number of genes to show contributions for", #
                 value = 25, min = 1, max = length(geneList()), step = 1)#
  })#
# Loadings plot ----------------------------------------------------------------------------#
  output$contribPlot = renderPlot({#
      validate(#
          need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
          need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
         need(length(input$pls_tissues) >= 2, "Please select at least two tissues for a Loadings plot.")#
      )#
    grps = plsdaData()$result$names$colnames$Y#
    ndisplay = input$pls_num_genes#
    comp = as.integer(input$pls_ncomp)#
    plotLoadings(plsdaData()$result, name.var = plsdaData()$varNames, ndisplay = ndisplay, comp = comp, contrib='max', method='mean',legend.color = catCol[1:length(grps)],title=paste("Weight of the top ", ndisplay, " genes contributing to discriminant component ", comp, sep=""),size.title=1)#
  })#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$  #
  ## Kill shinyApp when session closes#
  session$onSessionEnded(stopApp)#
#
}
server <- function(input, output, session) {#
#   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-#
#  / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \#
# `-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
## This is the database search begins#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
#
# Quick link from the main page#
observeEvent(input$linkSearch, {#
  updateNavbarPage(session, "receptorMain", selected="searchPanel")#
})#
# Set up colour environment#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  catCol <- brewer.pal(3, "Set1")#
  rowCol <-desat(catCol)#
  userID <- NULL#
# Search functions #
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  searchGSM <- eventReactive(input$searchButton, {#
      if(input$gplSelection=='human'){#
          sql<-"SELECT * FROM appgsm WHERE description MATCH ?id1 AND gpl LIKE 'GPL570';"#
      } else {#
          sql<-"SELECT * FROM appgsm WHERE description MATCH ?id1 AND gpl LIKE 'GPL1261';"#
      }#
      query<-sqlInterpolate(poolGEO,sql,id1=input$searchText)#
      queryGSM<-dbGetQuery(poolGEO,query)#
      shinyjs::disable("gplSelection")#
      return(queryGSM)#
  })#
#
  output$searchResultsGSM <- DT::renderDataTable({#
          searchGSM()}, extensions = 'Buttons', options=list(#
              dom = 'Bfrtip',#
              buttons = list(list(extend = 'colvis')),#
              searching=TRUE, #
              paging=FALSE,#
              scrollX=TRUE, #
              scrollY='60vh', #
              scrollCollapse=TRUE,#
              fixedHeader=TRUE,#
              autoWidth=TRUE,#
              columnDefs=list(list(#
              targets = "_all",#
              render = JS(#
                  "function(data, type, row, meta) {",#
                      "return type === 'display' && typeof data === 'string' && data.length > 100 ?",#
                      "'<span title=\"' + data + '\">' + data.substr(0, 100) + '...</span>' : data;",#
                      "}") #
                      )))) ## typeof data needs to be a string, as a "NA" converted to JS "NULL" breaks things#
#
# Set up tables to store user-selected data#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
#
  proxy.search = dataTableProxy('searchResultsGSM')#
#
  ## Set up reactive table to store experimental samples#
  userSamples <- reactiveValues()#
  userSamples$df <- data.frame()#
  # 2019-07-31 Upload user data#
  # Upload read count table#
  #_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  userEset <- reactive({#
      inFile <- input$eset_upload#
      if (is.null(inFile))#
          return(NULL)#
      df<- read.csv(inFile$datapath,header=TRUE,sep=",")#
      return(df)#
  })#
  output$upload_table <- DT::renderDataTable({#
      df <- userEset()#
      datatable(df, options=list(#
          searching=TRUE, #
          paging=TRUE,#
          scrollX=TRUE, #
          scrollY='25vh',#
          scrollCollapse=TRUE,#
          fixedHeader=TRUE,#
          autoWidth=FALSE))#
      })#
  observeEvent(input$uploadButton, {#
      showModal(modalDialog(title="Select your data to upload for analysis","Make sure things look right before proceeding. There is the ability to add some options here, if I want to make it slightly more flexible (e.g. separator, header).", radioButtons("speciesSelection", "Choose species:", choices = c("Mouse" = "mouse", "Human" = "human")),#
          fileInput('eset_upload','Choose file to upload', accept = c('text/csv','text/comma-separated-values','.csv')),#
          DT::dataTableOutput("upload_table"),#
          easyClose = TRUE,#
          footer = tagList(#
              actionButton("uploaded","Upload read table"))))#
  })#
  # 'uploaded file' flag#
  eset_is_uploaded = FALSE#
  observeEvent(input$uploaded, {#
      eset_is_uploaded <<- TRUE#
      removeModal()#
      uploadSamples <- userEset()#
      tableRows <- ncol(uploadSamples)#
      userSamples$df <<- data.frame(samples = colnames(uploadSamples), category = rep("Not yet assigned", tableRows), features = rep(nrow(uploadSamples), tableRows), description = rep("User uploaded samples",tableRows))#
      updateTabsetPanel(session = session, inputId = "searchpanel", selected = "2")  ## jump to 'Assign' tab#
  })#
#
  observeEvent(input$clear_upload, {#
      eset_is_uploaded <<- FALSE#
      userSamples$df <<- data.frame()#
      removeModal()#
  })#
# Add sample (array) record to the current experiment #
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  observeEvent(input$addButton, {#
      if(eset_is_uploaded){#
          showModal(modalDialog(title = "Alert! Uploaded data detected.", "Continuing with public arrays will erase uploaded dataset.",#
              easyClose = TRUE, footer = tagList(actionButton("clear_upload","Proceed"), modalButton("Cancel"))))#
      } else {#
      gsm_selected <- searchGSM()[input$searchResultsGSM_rows_selected,]#
      gsm_selected$category <- rep("Not yet assigned", nrow(gsm_selected))#
      userSamples$df <<- rbind(userSamples$df,gsm_selected)#
      proxy.search %>% selectRows(NULL)#
      updateTabsetPanel(session = session, inputId = "searchpanel", selected = "2")#
      }#
  })#
#
# Assign categories to each sample (GSM)#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  observeEvent(input$assignButton, {#
        userSamples$df[,"category"] <<- as.character(userSamples$df[,"category"])#
        userSamples$df[input$gsm_table_rows_selected,"category"] <<- input$selection#
        userSamples$df[,"category"] <<- as.factor(userSamples$df[,"category"])#
  })      #
  output$gsm_table <- DT::renderDataTable({#
      if(input$assignButton == 0){#
         return (datatable(userSamples$df, extensions = 'Buttons', options=list(#
               dom = 'Bfrtip',#
               buttons = list(list(extend = 'colvis')),#
               searching=TRUE, #
               paging=FALSE,#
               scrollX=TRUE, #
               scrollY='60vh', #
               scrollCollapse=TRUE,#
               fixedHeader=TRUE,#
               autoWidth=TRUE,#
               columnDefs=list(list(#
             targets = "_all",#
             render = JS(#
                 "function(data, type, row, meta) {",#
                     "return type === 'display' && typeof data === 'string' && data.length > 100 ?",#
                     "'<span title=\"' + data + '\">' + data.substr(0, 100) + '...</span>' : data;",#
                     "}")#
                     )))))#
      } else {#
         return (datatable(userSamples$df, extensions = 'Buttons', options=list(#
             dom = 'Bfrtip',#
             buttons = list(list(extend = 'colvis')),#
             searching=TRUE, #
             paging=FALSE,#
             scrollX=TRUE, #
             scrollY='60vh', #
             scrollCollapse=TRUE,#
             fixedHeader=TRUE,#
             autoWidth=TRUE,#
             columnDefs=list(list(#
             targets = "_all",#
             render = JS(#
                 "function(data, type, row, meta) {",#
                     "return type === 'display' && typeof data === 'string' && data.length > 100 ?",#
                     "'<span title=\"' + data + '\">' + data.substr(0, 100) + '...</span>' : data;",#
                     "}")#
                     )))) %>%#
                     formatStyle('category', target="row", backgroundColor=styleEqual(c(input$cat1, input$cat2, input$cat3), c(rowCol[1], rowCol[2], rowCol[3]))))#
      }#
  })#
  proxy.gsm = dataTableProxy('gsm_table')#
  observeEvent(input$assignButton,{#
      proxy.gsm %>% selectRows(NULL)#
  }) #
  ## UI output#
#
    output$categorySelect <- renderUI(#
      fluidRow(#
        column(12,#
               selectizeInput("selection", "Select a Category",#
                           c("category1" <- {input$cat1},#
                             "category2" <- {input$cat2},#
                             "category3" <- {input$cat3},#
                             "category4" <- "Not included")#
                             # , options = list(create=TRUE, plugins = list("remove_button")))  ### <- "remove_button" isn't what I thought it was. I would also like the "create" option but I will need to link this to the table as cat1-3 are linked (otherwise new variables are not coloured or sent along for processing)#
        )#
      )     ### 2018-12-10 I'd like to have a button to add category 3#
    )#
    )  #
# Finished table, to ultimately lead to CEL download#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
userSamples$finishedtable <- NULL#
#
observeEvent(input$assignButton, {#
    userSamples$finishedtable <<- dplyr::filter(userSamples$df, category %in% c(input$cat1, input$cat2, input$cat3))#
})#
  output$finishedtable <- DT::renderDataTable({#
      if(!is.null(userSamples$finishedtable)){#
      datatable(userSamples$finishedtable,#
      options=list(#
          searching=FALSE, #
          paging=FALSE,#
          scrollX=TRUE, #
          scrollY='60vh', #
          scrollCollapse=TRUE,#
          fixedHeader=TRUE,#
          autoWidth=TRUE,#
          columnDefs=list(list(#
          targets = "_all",#
          render = JS(#
              "function(data, type, row, meta) {",#
                  "return type === 'display' && typeof data === 'string' && data.length > 100 ?",#
                  "'<span title=\"' + data + '\">' + data.substr(0, 100) + '...</span>' : data;",#
                  "}")#
          )))) %>%#
      formatStyle('category',target="row",#
      backgroundColor=styleEqual(c(input$cat1,input$cat2,input$cat3),c(rowCol[1],rowCol[2],rowCol[3]))#
  )}})#
#
rv <- reactiveValues(download_flag = 0)#
  output$report <- downloadHandler(#
      filename = function(){paste(input$downloadId,"GSM_report.csv",sep="_")},#
      content = function(file){#
          write.csv(userSamples$finishedtable,file)#
          rv$download_flag <- rv$download_flag + 1#
      })#
# Modal confirming CEL download, and processing function#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_     #
observeEvent(input$downloadCEL, {#
    if (!eset_is_uploaded){#
        userSamples$finishedtable %>% group_by(category) %>% summarise(n.gse = n_distinct(series_id)) -> gse.check#
        warning <- "Please click below to begin processing the data."#
        numCat <- length(gse.check$category)>1#
        if(length(which(gse.check$n.gse==1))!=0){#
            catAlert <- paste(gse.check$category[which(gse.check$n.gse==1)], collapse = ", ")#
            warning <- paste("WARNING: The following categories contain samples from a single experiment (GSE) and as such they will be confounded by batch effects: ",catAlert,".<br>Please proceed with caution or cancel and select additional samples to add to these categories.",sep="")#
        }#
        if(!numCat){#
            showModal(modalDialog(title="Error! A minimum of two categories are needed.","Experimental samples need to be organized into 2 or 3 categories for appropriate downstream analysis. If you are interested in only one type of sample, we suggest choosing samples to act as 'background', which will allow for differential analysis to identify which receptor genes are enriched or depleted in your sample of interest.",#
            easyClose = TRUE,#
            footer = tagList(#
                modalButton("Cancel")))) #
        } else {#
            showModal(modalDialog(title="Important! Downloading raw .CEL files from the NCBI server.",HTML(paste("June 20th, 2019<br>",warning)),#
            easyClose = TRUE,#
            footer = tagList(#
                modalButton("Cancel"),#
                actionButton("processCEL","Proceed"))))      #
        }}#
# If the flag is TRUE, confirm and process uploaded data#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_             #
    else { #
        shinyjs::disable("downloadCEL")#
        userID <<- processDataUpload(userSamples$finishedtable, userEset(), input$downloadId, input$comments, input$speciesSelection, poolUserData)#
        global$DatasetTable <<- loadUserDatasets(poolUserData)#
        showModal(modalDialog(title="Your dataset was successfully processed!","Analyse your data in the 'Load Expression Datasets' tab. You can also download a report from this page.",#
        easyClose = TRUE,#
        footer = tagList(#
            modalButton("OK"))))# modal#
    }#
  })#
#
observeEvent(input$processCEL, {#
    shinyjs::disable("processCEL")#
    userID <<- processData(userSamples$finishedtable, input$downloadId, input$comments, input$gplSelection, poolUserData)#
    global$DatasetTable <<- loadUserDatasets(poolUserData)#
    removeModal()#
    showModal(modalDialog(title="Your dataset was successfully processed!","Analyse your data in the 'Load Expression Datasets' tab. You can also download a report from this page.",#
    easyClose = TRUE,#
    footer = tagList(#
        modalButton("OK"))))# modal#
  })#
# Reset button, modal confirmation#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  observeEvent(input$linkReset, {#
      showModal(modalDialog(title="Important! Are you sure you want to reset everything?","All searches and categorized samples will be lost. This can not be undone.",#
      footer = tagList(#
          modalButton("Cancel"),#
          actionButton("buttonReset","Yes, reset."))))# modal#
      # confirm reset (all categories, sample search, gone)#
      observeEvent(input$buttonReset, {#
          shinyjs::enable("gplSelection")#
          userSamples$df <<- userSamples$df[0,]#
          reset("searchText")#
          reset("cat1")#
          reset("cat2")#
          reset("cat3")#
          reset("downloadId")#
          replaceData(proxy.search, NULL)#
          replaceData(proxy.gsm, NULL)#
          userSamples$finishedtable <<- NULL#
          removeModal()#
          updateTabsetPanel(session = session, inputId = "searchpanel", selected = "1")#
        })#
  })#
#   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-#
#  / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \#
# `-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'#
#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
## This is where the analysis begins#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#
#
# Quick link from the main page#
observeEvent(input$linkLoad, {#
  updateNavbarPage(session, "receptorMain", selected="expressionPanel")#
})#
#
# Conditional nav tabs#
hideTab(inputId = "receptorMain", target = "Gene-level Expression")#
hideTab(inputId = "receptorMain", target = "Sample-level Expression")#
#
observeEvent(input$user_data,{#
    if(input$user_data!="none"){#
        showTab(inputId = "receptorMain", target = "Gene-level Expression")#
        showTab(inputId = "receptorMain", target = "Sample-level Expression")#
    } else {#
        hideTab(inputId = "receptorMain", target = "Gene-level Expression")#
        hideTab(inputId = "receptorMain", target = "Sample-level Expression")#
#
    }#
})#
#
# Load dataset#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
output$loadUserExperiments = renderUI({#
    selectizeInput(inputId="user_data",label="Select an experiment for analysis",choices=c("none"="none",split(global$DatasetTable$desc, global$DatasetTable$species)),selected="none")#
})#
observeEvent(input$user_data,{#
    id <- NULL#
    datasetToLoad <- NULL#
   if(input$user_data=="none"){#
        mapped_probes<<-NULL  ### this is going to be the key for detecting upload data#
        uploaded_features<<-NULL ## ^ this set will be used for uploaded data#
        eset<<-NULL#
        de_choices<<-NULL#
        sig_genes_lfc<<-NULL#
    }else{         #
        id <- global$DatasetTable$userID[which(global$DatasetTable$desc == input$user_data)]#
        assign(#
              x = "species", value = global$DatasetTable$species[which(global$DatasetTable$desc == input$user_data)], envir = .GlobalEnv#
           )#
           uploaded_features <<-NULL ## I think this might have to be here for non-uploaded datasets#
        datasetToLoad <- paste("./data/app_data_", id, ".rda", sep='')#
        withProgress(message="Loading dataset",value=0.2,{#
            load(datasetToLoad,envir=.GlobalEnv)#
            incProgress(0.3, message = "Loading contrasts")#
            updateCheckboxGroupInput(session, "tissues", choices = groups, selected = groups)#
            updateCheckboxGroupInput(session, "pls_tissues", choices = groups, selected = groups)#
            updateCheckboxGroupInput(session, "de", choices = de_choices, selected = de_choices[1])#
            incProgress(0.3, message ="Loading genelists")#
            updateCheckboxGroupInput(session, "genelist", label = NULL, choices = names(gene_lists[[species]]), selected = NULL, inline = FALSE)#
            incProgress(0.2, message = "Loading gene names")#
            # updateSelectInput(session, "gene", choices = all_genes[species])#
            if(is.null(uploaded_features)){#
                updateSelectInput(session, "gene", choices = mapped_probes)#
            }#
            if(is.null(mapped_probes)){#
                updateSelectInput(session, "gene", choices = make.names(uploaded_features))#
            }#
        })#
    }#
})#
#
# Download DEG#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
#
rvDEG <- reactiveValues(download_flag = 0)#
#
  # proxy.finishedtable = dataTableProxy('finishedtable')#
  output$reportDEG <- downloadHandler(#
      filename = paste(input$user_data,"DEG_report.xlsx",sep="_"),#
      # filename = paste(input$user_data,"DEG_report.csv",sep="_"),#
      content = function(file){#
          write_xlsx(sig_genes_lfc, path=file)#
          rvDEG$download_flag <- rvDEG$download_flag + 1#
      })#
#
# QC output#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
#
output$QC = renderUI({#
  validate(#
    need(input$user_data!="none","No dataset selected"),#
    need(is.null(uploaded_features), "QC data not available for uploaded read table")#
  )#
#
  id <- global$DatasetTable$userID[which(global$DatasetTable$desc == input$user_data)]#
#
  fluidRow(#
      inlineCSS(list(#
          "#norm" = c("max-width:100%","width=100%"))),#
      h4("Expression normalization (array intensity, before and after)"), #
      tags$div(class="norm",#
          tags$img(src=paste("array_normalization_", id, ".png", sep=''))#
          ),#
      h4("RNA degradation plot (probe position along transcript vs intensity)"),#
      tags$img(src=paste("probe_degradation_", id, ".png", sep='')))#
})#
# Load genes tab#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
#
  geneList = reactive({#
    if (is.null(input$genelist) && is.null(input$gene)) {#
      return(NULL)#
    }#
    genes = c()#
#
    if (!is.null(input$genelist)) {#
      for (gene in input$genelist) {#
        genes = c(genes, gene_lists[[species]][[gene]])#
      }#
    }#
#
    if (!is.null(input$gene)) {#
      genes = c(genes, input$gene)#
    }#
    return(unname(genes))#
  })#
 summary_gene_data = reactive({#
     validate(#
       need(input$user_data!="none","No dataset selected. Please select an experiment for analysis."),#
       need(geneList(), "No genes selected. Please select receptor type(s) to analyse.")#
     )#
   get_expression_summary(eset, geneList())#
 })#
# Gene outputs#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  output$genes = DT::renderDataTable({#
      validate(#
        need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
        need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'.")#
      )#
     summary_gene_data() %>% datatable() %>% #
      formatRound(2:4)#
  })#
  # single gene plot#
 output$singleGenePlot = renderPlot({#
     validate(#
       need(input$user_data!="none","No dataset selected."),#
       need(geneList(), "No genes selected."),#
       need(input$genes_rows_selected >= 1, "Please select one or more genes from the 'Average Expression' table to inspect expression by tissue type.")#
     )#
    rows = as.integer(input$genes_rows_selected)#
    genes_to_plot = summary_gene_data()$Symbol[rows]#
    gene_data = get_gene_data(eset, genes_to_plot)#
    density <- gene_data %>% group_by(tissue) %>% summarise(count=n())#
    if (any(density$count < 3)) {by_gene_violplot(gene_data,tissues=groups)}#
        else {by_gene_boxplot(gene_data,tissues=groups)}#
  })#
#
# Expression tab#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  observe({#
    toggle("de_choices", anim = TRUE, condition = input$de_state )#
  })#
  genesToPlot = reactive({#
    validate(#
      need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
      need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'.")#
    )#
#
    genes = geneList()#
    if(input$de_state) {#
      selected_de = input$de#
      de_lists = lapply(selected_de, function(x) {as.character(get_de_genes(genes, x, sig_genes_lfc)$Symbol) })#
      genes = Reduce(union, de_lists)#
    } #
    return(genes) #
  }) #
# Heatmap plot#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  output$expressionPlot = renderPlot({#
      validate(#
          need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
          need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
          need(input$tissues, "No tissues selected. Please choose at least one tissue to plot receptor heatmap."),#
          need(length(genesToPlot())>10, if(input$de_state){paste("Based on the genes selected in 'Load Data', ", length(genesToPlot())," genes were differentially expressed in these tissues (",paste(input$tissues, collapse = ", "), "); try unselecting that option in the side menu.",sep="")}else{paste("No genes to plot as a heatmap (minimum = 10). Try including more receptor types in 'Load Data'.")})#
    )#
    selected_tissues = input$tissues#
    sub_eset = eset[, eset$tissue %in% selected_tissues]#
    genes = genesToPlot()#
    if(is.null(uploaded_features)){genes = gene2probe(genesToPlot(), mapped_probes)}#
    cat(file=stderr(), "Preparing heatmap:\n Tissues:", paste(input$tissues, collapse = ", "), "\n gene list: ",paste(genesToPlot(),collapse=", "),"\n genes: ", paste(genes,collapse=", "),"\n")#
    gene_heatmap(sub_eset, genes, scale = "row",#
                  probe_level = input$hm_probes,#
                  gsm_show = input$hm_gsm,#
                  show_rownames = input$hm_rownames,#
                  cluster_rows = input$hm_row_cluster,#
                  cluster_cols = input$hm_col_cluster,#
                  border_color = NA)#
    })#
  output$heatmap_ui = renderUI({#
    plotOutput("expressionPlot", height = input$hm_height, width = input$hm_width)#
  })#
#
# Overall expression#
#_,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,_#
  output$overallPlot = renderPlot({#
    validate(#
        need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
        need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
    need(input$tissues, "No tissues selected. Please choose at least one tissue to plot receptor heatmap."),#
    need(length(genesToPlot())>1, if(input$de_state){paste("Based on the genes selected in 'Load Data', ", length(genesToPlot())," genes were differentially expressed in these tissues (",paste(input$tissues, collapse = ", "), "); try unselecting that option in the side menu.",sep="")}else{paste("No genes to plot. Try including more receptor types in 'Load Data'.")}) #
    )#
    gene_data = get_gene_data(eset, genesToPlot())#
    overall_expression_boxplot(gene_data, tissues = input$tissues)#
  })#
# By gene boxplots ----------------------------------------------------------------------------#
#
  output$byGenePlot = renderPlot({#
      validate(#
          need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
          need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
      need(input$tissues, "No tissues selected. Please choose at least one tissue to plot receptor heatmap."),#
      need(length(genesToPlot())>1, if(input$de_state){paste("Based on the genes selected in 'Load Data', ", length(genesToPlot())," genes were differentially expressed in these tissues (",paste(input$tissues, collapse = ", "), "); try unselecting that option in the side menu.",sep="")}else{paste("No genes to plot. Try including more receptor types in 'Load Data'.")}) #
      )    #
    gene_data = get_gene_data(eset, genesToPlot())#
    by_gene_boxplot(gene_data, tissues = input$tissues)#
  })#
  plsdaData = reactive({#
    selected_tissues = input$pls_tissues#
    if(length(selected_tissues) < 2) {#
      return(NULL)#
    }#
    sub_eset = eset[, eset$tissue %in% selected_tissues]#
    genes = gene2probe(geneList(), mapped_probes)#
    # probe = input$pls_probe#
    get_plsda(sub_eset, genes, probe = FALSE) #
  })#
#
# PCA plot ----------------------------------------------------------------------------#
  output$indPlot = renderPlot({#
    validate(#
        need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
        need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
       need(length(input$pls_tissues) >= 2, "Please select at least two tissues for a PLS-DA plot.")#
    )#
    plotIndiv(plsdaData()$result, ind.names = FALSE, group = factor(plsdaData()$tissue_grps), pch = 16, #
              col.per.group = brewer.pal(3, "Set1")[1:length(input$pls_tissues)], legend = TRUE, cex = 2, ellipse=TRUE, title="Plot of individual arrays",style="graphics")#
  })#
#
# Correlation Circle plot ----------------------------------------------------------------------------  #
  output$varPlot = renderPlot({#
      validate(#
          need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
          need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
         need(length(input$pls_tissues) >= 2, "Please select at least two tissues for a Correlation circle plot.")#
      )#
      comp = as.integer(input$pls_ncomp)#
    plotVar(plsdaData()$result, var.names = list(plsdaData()$varNames), comp.select=comp, cex = 1, overlap=FALSE, col="grey",title="Correlation circle between genes and discriminant components", style="graphics")#
  })#
#
  output$numGenesUI = renderUI({#
    numericInput("pls_num_genes", "Select number of genes to show contributions for", #
                 value = 25, min = 1, max = length(geneList()), step = 1)#
  })#
# Loadings plot ----------------------------------------------------------------------------#
  output$contribPlot = renderPlot({#
      validate(#
          need(input$user_data!="none","No dataset selected. Please select an experiment for analysis in 'Load Expression Data'."),#
          need(geneList(), "No genes selected. Please select receptor type(s) to analyse in 'Load Expression Data'."),#
         need(length(input$pls_tissues) >= 2, "Please select at least two tissues for a Loadings plot.")#
      )#
    grps = plsdaData()$result$names$colnames$Y#
    ndisplay = input$pls_num_genes#
    comp = as.integer(input$pls_ncomp)#
    plotLoadings(plsdaData()$result, name.var = plsdaData()$varNames, ndisplay = ndisplay, comp = comp, contrib='max', method='mean',legend.color = catCol[1:length(grps)],title=paste("Weight of the top ", ndisplay, " genes contributing to discriminant component ", comp, sep=""),size.title=1)#
  })#
#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$  #
  ## Kill shinyApp when session closes#
  session$onSessionEnded(stopApp)#
#
}
g<-function(){shinyApp(ui,server)}
g)()
g()
q()
